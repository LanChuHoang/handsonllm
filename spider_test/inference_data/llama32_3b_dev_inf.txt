SELECT COUNT(*) FROM singer
SELECT COUNT(*) FROM singer;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country='France'
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE nationality = 'French';
SELECT T1.name, T2.release_year FROM singer AS T1 INNER JOIN song AS T2 ON T1.id = T2.singer_id ORDER BY T1.age DESC LIMIT 1;
SELECT T1.name, T2.release_year FROM Singer AS T1 INNER JOIN Song AS T2 ON T1.id = T2.singer_id WHERE T1.age = ( SELECT MIN(age) FROM Singer );
SELECT DISTINCT T2.country FROM singer AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.age > 20;
SELECT DISTINCT T2.country FROM singer AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.age > 20;
SELECT T1.name, COUNT(T2.country_id) FROM country AS T1 INNER JOIN singer ON T1.id = singer.country_id GROUP BY T1.name;
SELECT COUNT(*) , country FROM singer GROUP BY country;
SELECT T1.song_name FROM Singer AS T1 INNER JOIN Age AS T2 ON T1.singer_id = T2.singer_id WHERE T2.age > (SELECT AVG(age) FROM Age);
SELECT T1.song_name FROM Singer AS T1 INNER JOIN Age AS T2 ON T1.singer_id = T2.singer_id WHERE T2.age > (SELECT AVG(age) FROM Age);
SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT location, name FROM stations WHERE capacity BETWEEN 5000 AND 10000;
SELECT MAX(capacity), AVG(avg) FROM stadium;
SELECT AVG(capacity), MAX(capacity) FROM stadiums;
SELECT name, capacity FROM stadium WHERE avg_attendance = ( SELECT MAX(avg_attendance) FROM stadium );
SELECT name, capacity FROM stadium WHERE avg_attendance = ( SELECT MAX(avg_attendance) FROM stadium );
SELECT COUNT(*) FROM concert WHERE YEAR IN (2014, 2015)
SELECT COUNT(*) FROM concert WHERE year IN (2014, 2015)
SELECT stadium_name, COUNT(*) FROM concerts GROUP BY stadium_name;
SELECT COUNT(*) FROM concert WHERE stadium IN (SELECT id FROM stadium)
SELECT stadium, capacity FROM concerts WHERE concert_id IN ( SELECT concert_id FROM concerts WHERE year >= 2014 GROUP BY concert_id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT s.name, s.capacity FROM stadium AS s JOIN concert AS c ON s.id = c.stadium_id WHERE c.year > 2013 GROUP BY s.id ORDER BY COUNT(c.concert_id) DESC LIMIT 1;
SELECT YEAR FROM concert WHERE COUNT(*) = ( SELECT MAX(count) FROM concert );
SELECT YEAR FROM concert_id GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1;
SELECT stadium FROM concert WHERE concert_id NOT IN (concert_id_int, concert_id_name)
SELECT stadium FROM concerts WHERE concert_id NOT IN (concert_id_ID, concert_id_Name, concert_id_TexT)
SELECT T1.country FROM singer AS T1 INNER JOIN age AS T2 ON T1.id = T2.singer_id WHERE T2.age > 40 AND T2.age < 30;
SELECT name FROM stadiums WHERE id NOT IN (SELECT stadium_id FROM concerts WHERE year = 2014)
SELECT stadium FROM concerts WHERE concert_id NOT IN ( SELECT concert_id FROM concerts_2014 );
SELECT T1.name, T2.theme, COUNT(T3.singer_id) FROM concert AS T1 INNER JOIN concert_singer AS T2 ON T1.id = T2.concert_id INNER JOIN singer AS T3 ON T2.singer_id = T3.id GROUP BY T1.name
SELECT T1.name ,  T2.theme ,  COUNT(T3.singer_id) FROM concert AS T1 INNER JOIN concert_theme AS T2 ON T1.concert_id = T2.concert_id INNER JOIN singer AS T3 ON T2.singer_id = T3.singer_id GROUP BY T1.name
SELECT singer_name, COUNT(*) FROM concert WHERE singer_id IN (SELECT id FROM singer) GROUP BY singer_name;
SELECT T1.name, COUNT(T2.concert_id) FROM singer AS T1 INNER JOIN concert AS T2 ON T1.singer_id = T2.singer_id GROUP BY T1.name;
SELECT T1.singer_name FROM concert AS T1 INNER JOIN concert_id AS T2 ON T1.concert_id = T2.concert_id WHERE T2.year = 2014;
SELECT T1.name FROM singer AS T1 INNER JOIN concert AS T2 ON T1.singer_id = T2.singer_id WHERE T2.concert_id IN (2014)
SELECT T1.name, T2.nation FROM singer AS T1 INNER JOIN song AS T2 ON T1.singer_id = T2.singer_id WHERE T2.name LIKE '%Hey%'
SELECT T1.name, T2.country_of_origin FROM singer AS T1 INNER JOIN song AS T2 ON T1.singer_id = T2.singer_id WHERE T2.title LIKE '%Hey%'
SELECT T1.name, T2.location FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.id = T2.id WHERE T1.year IN (2014, 2015)
SELECT T1.name, T2.location FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.stadium_id = T2.id WHERE T1.year IN (2014, 2015)
SELECT COUNT(*) FROM concert WHERE stadium_id IN ( SELECT stadium_id FROM concert WHERE capacity = ( SELECT MAX(capacity) FROM concert ) );
SELECT COUNT(*) FROM concert WHERE stadium_id IN ( SELECT MAX(capacity) FROM stadium );
SELECT COUNT(*) FROM pets WHERE weight > 10;
SELECT COUNT(pet_id) FROM pets WHERE weight > 10;
SELECT MIN(w) FROM pets WHERE age IN (0, 2, 10) AND weight REAL;
SELECT MIN weight FROM pets WHERE age IN (1) AND type = 'dog';
SELECT MAX(w) ,  t FROM pets GROUP BY t;
SELECT MAX(weight), type FROM pets GROUP BY type
SELECT COUNT(DISTINCT student) FROM students WHERE age > 20;
SELECT COUNT(DISTINCT pet) FROM student WHERE age > 20;
SELECT COUNT(DISTINCT pets) FROM students WHERE sex = 'F' AND pets IN ('dog')
SELECT COUNT(DISTINCT pet_id) FROM student_pet WHERE student_id IN (SELECT id FROM student WHERE gender = 'F') AND pet_type = 'dog';
SELECT COUNT(DISTINCT pet_type) FROM pets;
SELECT COUNT(DISTINCT pet_type) FROM pets;
SELECT T1.first_name FROM students AS T1 INNER JOIN pets AS T2 ON T1.student_id = T2.student_id WHERE T2.pet_type IN ('cat', 'dog')
SELECT T1.first_name FROM Student AS T1 INNER JOIN Pet ON T1.student_id = Pet.student_id WHERE Pet.pet_type IN ('cat', 'dog')
SELECT T1.first_name FROM Student AS T1 INNER JOIN Pet ON T1.student_id = Pet.student_id WHERE Pet.pet_type IN ('cat', 'dog')
SELECT T1.first_name FROM students AS T1 INNER JOIN pets AS T2 ON T1.student_id = T2.student_id WHERE T2.pet_type IN ('cat', 'dog') GROUP BY T1.first_name HAVING COUNT(T2.pet_type) = 2;
SELECT P.RINARY_KEY, S.PRIMARY_KEY, S.PET_TYPE, S.PRIMARY_KEY, S.PRIMARY_KEY FROM STUDENT AS S JOIN PET AS P ON S.STUDENT_ID = P.STUDENT_ID WHERE P.PET_TYPE != 'cat'
SELECT T1.PET_TYPE, T2.AGE FROM STUDENT AS T1 INNER JOIN PET ON T1.STUDENT_ID = T1.PET_ID INNER JOIN PRIMARY_KEY AS T2 ON T1.PET_ID = T2.PET_ID WHERE T1.MAJOR_KY = 'FOREIGN' AND T1.PET_TYPE = 'KNEY'
SELECT id FROM students WHERE pets = 'none' OR pets = ''
SELECT student_id FROM students WHERE pets = 'none'
SELECT T1.first_name, T2.age FROM Student AS T1 INNER JOIN Pet ON T1.student_id = T2.pet_id WHERE T2.pet_type = 'dog' AND T2.pet_type != 'cat';
SELECT T1.first_name FROM students AS T1 INNER JOIN pets AS T2 ON T1.student_id = T2.student_id WHERE T2.pet_type = 'dog' AND T2.pet_type NOT IN ('cat', 'fish')
SELECT type, weight FROM pets WHERE age = (SELECT MIN(age) FROM pets);
SELECT T2.type, T1.weight FROM pets AS T1 INNER JOIN pet_integrenger AS T2 ON T1.id = T2.pet_id ORDER BY T1.age ASC LIMIT 1;
SELECT pet_id, weight FROM pets WHERE age > 1;
SELECT id, weight FROM pets WHERE age > 1;
SELECT AVG(age), MAX(age) FROM pets GROUP BY type
SELECT AVG(age), MAX(age) FROM pets GROUP BY type
SELECT AVG(weight) FROM pets GROUP BY type
SELECT AVG(weight) FROM pets WHERE type IN (SELECT name FROM pet_types);
SELECT T1.first_name, T2.age FROM Student AS T1 INNER JOIN PetOwner AS T2 ON T1.student_id = T2.student_id WHERE T2.pet_id IN (SELECT pet_id FROM Pet);
SELECT DISTINCT T1.FIRST_NAME, T2.AGE FROM STUDENT AS T1 INNER JOIN PET ON T1.STUDENT_ID = T2.STUDENT_ID WHERE T2.PET_ID IN (SELECT PET_ID FROM PET_owner)
SELECT P.id FROM Student AS S JOIN Pet ON S.student_id = Pet.student_id WHERE S.last_name = 'Smith';
SELECT T2.id FROM student AS T1 INNER JOIN pet AS T2 ON T1.student_id = T2.student_id WHERE T1.last_name = 'Smith';
SELECT COUNT(DISTINCT student_id) FROM students JOIN pets ON students.student_id = pets.student_id WHERE pets.pet_id IN (SELECT pet_id FROM pets WHERE foreign_key = 'student')
SELECT COUNT(*) , T2.student_id FROM students AS T1 INNER JOIN pets AS T2 ON T1.id = T2.student_id GROUP BY T1.id;
SELECT T1.first_name, T2.gender FROM student AS T1 INNER JOIN pet_owner AS T2 ON T1.student_id = T2.student_id WHERE T2.pet_id IN ( SELECT pet_id FROM pet_owner GROUP BY pet_id HAVING COUNT(DISTINCT student_id) > 1 )
SELECT T1.first_name, T2.gender FROM student AS T1 INNER JOIN pet_owner AS T2 ON T1.student_id = T2.student_id WHERE T2.pet_id IN ( SELECT pet_id FROM pet WHERE owner_id IN ( SELECT student_id FROM student ) GROUP BY pet_id HAVING COUNT(DISTINCT student_id) > 1 );
SELECT T2.last_name FROM student AS T1 INNER JOIN pet AS T2 ON T1.student_id = T2.student_id WHERE T2.age = 3;
SELECT T2.last_name FROM student AS T1 INNER JOIN pet AS T2 ON T1.student_id = T2.student_id WHERE T2.age = 3;
SELECT AVG(VARCHAR(1) + 0) FROM STUDENT WHERE NOT EXISTS (SELECT 1 FROM PET WHERE STUDENT.PETID = PET.PETID)
SELECT AVG(VARCHAR(1) + 12) FROM STUDENT WHERE NOT EXISTS (SELECT 1 FROM PET OWNER JOIN PET ON STUDENT.PET_ID = PET.OWNER_ID)
SELECT COUNT continent FROM continents;
SELECT COUNT continent FROM continents;
SELECT COUNT(c.id) AS num_countries, c.id, c.name FROM continents c JOIN countries ON c.id = countries.continent_id GROUP BY c.id
SELECT continent_id, name, COUNT(country_id) FROM continents GROUP BY continent_id;
SELECT COUNT(countries) FROM countries;
SELECT COUNT(DISTINCT country_id) FROM countries;
SELECT maker, COUNT(*) AS num_models FROM car_makers GROUP BY maker;
SELECT T1.name, T2.id, COUNT(T3.id) FROM car_makers AS T1 INNER JOIN manufacturers AS T2 ON T1.id = T2.car_maker_id INNER JOIN models AS T3 ON T2.id = T3.manufacturer_id GROUP BY T1.name;
SELECT model FROM cars WHERE horsepower = ( SELECT MIN(horsepower) FROM cars )
SELECT car_model FROM cars WHERE horsepower = ( SELECT MIN(horsepower) FROM cars );
SELECT model FROM cars WHERE weight < (SELECT AVG(weight) FROM cars)
SELECT car_name FROM cars WHERE weight < (SELECT AVG(weight) FROM cars)
SELECT T1.name FROM makers AS T1 INNER JOIN cars AS T2 ON T1.id = T2.maker_id WHERE T2.year = 1970;
SELECT DISTINCT car_makers FROM cars WHERE year = 1970;
SELECT make, mpg FROM cars ORDER BY mpg ASC LIMIT 1;
SELECT maker, MIN(year) FROM carr WHERE year = ( SELECT MIN(year) FROM carr );
SELECT DISTINCT car_models FROM cars WHERE production_year > 1980;
SELECT DISTINCT model FROM cards WHERE year > 1980;
SELECT COUNT(DISTINCT c.continent) ,  COUNT(DISTINCT c.continent) * ( SELECT COUNT(*) FROM car_makers ) AS count FROM car_makers JOIN continents ON car_makers.continents = continents.id
SELECT T1.name, COUNT(T2.id) FROM continents AS T1 INNER JOIN car_makers AS T2 ON T1.id = T2.continent_id GROUP BY T1.name;
SELECT country FROM countries WHERE id IN ( SELECT maker_id FROM makers ) GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country FROM countries WHERE ref_number IN ( SELECT ref_number FROM makers ) GROUP BY country ORDER BY COUNT(maker_id) DESC LIMIT 1;
SELECT maker, COUNT(*) FROM car_models GROUP BY maker;
SELECT COUNT(*) , maker_id , full_name FROM car_makers GROUP BY maker_id
SELECT T1.accelerate FROM car AS T1 INNER JOIN make AS T2 ON T1.make_id = T2.id WHERE T2.name = 'AMC Hornet Sportabout (SW)'
SELECT MIN car_accelerate FROM C WHERE make_id = (SELECT id FROM make WHERE name = 'AMC Hornet Sportabout (SW)')
SELECT COUNT(DISTINCT T1.car_maker) FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id WHERE T2.name = 'France';
SELECT COUNT(DISTINCT T2.maker) FROM CREATORS AS T1 INNER JOIN MAKERS AS T2 ON T1.id = T2.creatort_id WHERE T2.country = 'France';
SELECT COUNT(DISTINCT car_models.id) FROM car_models WHERE country = 'USA'
SELECT COUNT(DISTINCT car_models) FROM cars WHERE country = 'United States';
SELECT AVG(MPG) FROM cars WHERE cylinders = 4;
SELECT AVG(MPG) FROM CARS WHERE CYLINDERS = 4;
SELECT MIN(T1.weight) FROM cars AS T1 INNER JOIN engine AS T2 ON T1.id = T2.car_id WHERE T2.cylinders = 8 AND T1.year = 1974;
SELECT MIN(wt) FROM cars WHERE cyl = 8 AND yr = 1974;
SELECT maker, model FROM makers
SELECT maker, model FROM cars
SELECT T1.name, T2.id FROM countries AS T1 INNER JOIN manufacturers AS T2 ON T1.id = T2.country_id WHERE T2.id IS NOT NULL GROUP BY T1.name HAVING COUNT(T2.id) > 0;
SELECT T1.name, T2.id FROM countries AS T1 INNER JOIN manufacturers AS T2 ON T1.id = T2.country_id WHERE T2.id IS NOT NULL
SELECT COUNT(*) FROM cars WHERE horsepower > 150;
SELECT COUNT(*) FROM cars WHERE horsepower > 150;
SELECT AVG(car_weight) FROM cars WHERE year IN (2018, 2020, 2021);
SELECT AVG(w) ,  y FROM animals WHERE y IN (2018, 2020, 2021);
SELECT COUNT(DISTINCT c.country) FROM countries AS c JOIN manufacturers AS m ON c.id = m.country_id WHERE m.name IN ('Toyota', 'Ford')
SELECT T1.name FROM countries AS T1 INNER JOIN manufacturers AS T2 ON T1.id = T2.country_id GROUP BY T1.name HAVING COUNT(T2.manufacturer_id) >= 3
SELECT MAX horsepower FROM cars WHERE cylinders = 3;
SELECT MAX horsepower FROM cylinders WHERE cylinders = '3' AND make IN (SELECT make FROM models)
SELECT MAX(mpg) FROM cars
SELECT car_model FROM cars WHERE mpg = ( SELECT MAX(mpg) FROM cars );
SELECT AVG(horsepower) FROM cars WHERE year < 1980;
SELECT AVG(horsepower) FROM cars WHERE year < 1980;
SELECT AVG edispl FROM cars WHERE model = 'volvo'
SELECT AVG edispl FROM volvo
SELECT MAX(accelerate) FROM cars WHERE cylinders IN (4, 6, 8);
SELECT MAX(accelerate) FROM cylinders;
SELECT model FROM cars WHERE make = ( SELECT make FROM cars GROUP BY make ORDER BY COUNT(make) DESC LIMIT 1 )
SELECT model FROM versions GROUP BY model ORDER BY COUNT(model) DESC LIMIT 1;
SELECT COUNT(*) FROM cars WHERE cylinders > 4;
SELECT COUNT(*) FROM cars WHERE num_cylinders > 4;
SELECT COUNT(*) FROM cars WHERE YEAR = 1980;
SELECT COUNT(MP_G) FROM INTEGERS WHERE MP_G = 1980;
SELECT COUNT(DISTINCT maker) FROM car_models WHERE maker = 'American Motor Company';
SELECT COUNT(DISTINCT car_maker_id) FROM cars WHERE make = 'American Motor Company';
SELECT T1.full_name, T2.id FROM makers AS T1 INNER JOIN car_models AS T2 ON T1.id = T2.maker_id GROUP BY T1.id HAVING COUNT(T2.id) > 3;
SELECT maker_id, name FROM makers WHERE id IN ( SELECT maker_id FROM models GROUP BY maker_id HAVING COUNT(id) > 3 );
SELECT DISTINCT maker FROM models WHERE full_name = 'General Motors' OR weight > 3500;
SELECT DISTINCT T1.model FROM ( SELECT model FROM car_makers WHERE name = 'General Motors' UNION ALL SELECT model FROM models WHERE weight > 3500 ) AS T1
SELECT YEAR FROM cars WHERE weight BETWEEN 3000 AND 4000
SELECT DISTINCT YEAR FROM cars WHERE weight < 4000 INTERSECT SELECT DISTINCT YEAR FROM cars WHERE weight > 3000
SELECT MAX(MP.G) FROM MP AS T1 INNER JOIN RELATIONSHIP AS T2 ON T1.id = T2.car_id INNER JOIN ACCELERATE AS T3 ON T2.id = T3.relation_id WHERE T3.accelerate = ( SELECT MAX(accelerate) FROM ACCELERATE );
SELECT MAX(T1.horsepower) FROM T2 AS T1 INNER JOIN T3 AS T2 ON T1.id = T2.id INNER JOIN T4 AS T3 ON T1.car_id = T3.id WHERE T3.accelerate = ( SELECT MAX(accelerate) FROM T4 );
SELECT MIN(cylinders) FROM model WHERE make = 'volvo' AND accelerate = (SELECT MIN(accelerate) FROM model WHERE make = 'volvo')
SELECT MIN cylinders FROM volvo_model WHERE accelerate = ( SELECT MIN accelerate FROM volvo_model );
SELECT COUNT(*) FROM cars WHERE horsepower < ( SELECT MAX(horsepower) FROM cars );
SELECT COUNT(*) FROM cars WHERE horsepower < ( SELECT MAX(horsepower) FROM cars );
SELECT COUNT(DISTINCT country) FROM manufacturers WHERE number_of_makers > 2;
SELECT COUNT(DISTINCT country) FROM manufacturers WHERE number_of_makers > 2;
SELECT COUNT(*) FROM cars WHERE cylinders > 6;
SELECT COUNT(*) FROM cars WHERE cylinders > 6;
SELECT T1.model FROM cars AS T1 INNER JOIN engine AS T2 ON T1.id = T2.car_id WHERE T2.cylinders = 4 ORDER BY T1.horsepower DESC LIMIT 1;
SELECT model FROM cars WHERE horsepower = ( SELECT MAX(horsepower) FROM cars WHERE cylinders = 4 )
SELECT T1.makeid, T1.make_name FROM cars AS T1 INNER JOIN horsepower AS T2 ON T1.car_id = T2.car_id WHERE T2.horsepower > ( SELECT MIN(horsepower) FROM horsepower ) AND T2.cylinders <= 3;
SELECT make_id, name FROM cars WHERE horsepower < (SELECT MIN(horsepower) FROM cars) AND cylinders < 4;
SELECT MAX(MPG) FROM cars WHERE cylinders = 8 OR production_year < 1980;
SELECT MAX(MPG) FROM cars WHERE cylinders = 8 OR production_year < 1980;
SELECT model FROM models WHERE weight < 3500 AND manufacturer != 'Ford Motor Company'
SELECT model FROM cars WHERE weight < 3500 AND manufacturer != 'Ford Motor Company'
SELECT T1.name FROM countries AS T1 INNER JOIN manufacturers AS T2 ON T1.id = T2.country_id WHERE T2.name IS NULL GROUP BY T1.name
SELECT T1.name FROM countries AS T1 INNER JOIN manufacturers AS T2 ON T1.id = T2.country_id WHERE T2.id IS NULL;
SELECT T1.id, T2.maker FROM car_makers AS T1 INNER JOIN models AS T2 ON T1.id = T2.car_maker GROUP BY T1.id HAVING COUNT(T1.id) >= 2 AND COUNT(DISTINCT T2.maker) > 3;
SELECT id, maker FROM car_makers WHERE count(id) >= 2 AND count(maker_id) > 3;
SELECT T1.id, T2.name FROM countries AS T1 INNER JOIN manufacturers AS T2 ON T1.id = T2.country_id WHERE (T2.car_maker_count > 3) OR T2.model_name = 'fiat'
SELECT T1.id, T2.name FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.id = T2.country_id WHERE T2.car_maker IN ( SELECT id FROM car_makers GROUP BY country_id HAVING COUNT(*) > 3 ) OR T2.car_maker = 'Fiat'
SELECT country FROM airlines WHERE name = 'JetBlue Airways';
SELECT country FROM airlines WHERE name = 'Jetblue Airways';
SELECT airline_abbr FROM airlines WHERE name = 'JetBlue Airways';
SELECT T2.abbreviation FROM airlines AS T1 INNER JOIN abbreviations AS T2 ON T1.id = T2.airline_id WHERE T1.name = 'Jetblue Airways';
SELECT airline_name, abbreviation FROM airlines WHERE country = 'USA';
SELECT airline_name, abbreviation FROM airlines WHERE country = 'USA'
SELECT airport_code, name FROM airports WHERE city = 'Anthony';
SELECT airport_code, airport_name FROM airports WHERE city = 'Anthony';
SELECT COUNT(DISTINCT airline) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT airline FROM flights WHERE airline = 'UAL';
SELECT COUNT(DISTINCT T1.airline) FROM airline AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.name = 'USA';
SELECT COUNT(T1.id) FROM airlines AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'USA';
SELECT city, country FROM airports WHERE name = 'Alton Airport';
SELECT city, country FROM airports WHERE name = 'Alton Airport';
SELECT airport_name FROM airports WHERE code = 'AKO';
SELECT name FROM airports WHERE code = 'AKO';
SELECT airport_name FROM airports WHERE city = 'Aberdeen';
SELECT airport_name FROM airports WHERE city = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE airport_code = 'APG';
SELECT COUNT(*) FROM flights WHERE airport = 'APG';
SELECT COUNT(*) FROM flights WHERE destination = 'ATO';
SELECT COUNT(T1.flight_id) FROM flights AS T1 INNER JOIN airport_codes AS T2 ON T1.flight_no = T2.flight_no WHERE T2.code = 'ATO';
SELECT COUNT(*) FROM flights WHERE airport = 'Aberdeen'
SELECT COUNT(DISTINCT airport_id) FROM flights WHERE origin = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE destination = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE airport = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE destination = 'Ashley' AND origin = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE airport = 'Aberdeen' AND destination = 'Ashley';
SELECT COUNT(*) FROM Flights WHERE airline = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE airline = 'Jetblue Airways';
SELECT COUNT(*) FROM Flights AS f JOIN Airlines AS a ON f.AirlineID = a.AirlineID WHERE f.AirportID IN (SELECT AirportID FROM Airports WHERE Name = 'ASY') AND a.Name = 'United Airlines';
SELECT COUNT(*) FROM Flights WHERE Airline = 'United Airlines' AND Airport = 'ASY Airport';
SELECT COUNT(*) FROM Flights WHERE Airline = 'United Airlines' AND AirportCode = 'AHD';
SELECT COUNT(*) FROM flights WHERE airport = 'AHD' AND airline = 'United Airlines';
SELECT COUNT(*) FROM flights WHERE airport = 'Aberdeen';
SELECT COUNT(T1.flight_id) FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.airline_id = T2.airline_id WHERE T2.name = 'United Airlines' AND T1.destination = 'Aberdeen';
SELECT city FROM flights WHERE arrivals = ( SELECT MAX(arrivals) FROM flights );
SELECT airport_code FROM airports WHERE destination_airport = ( SELECT MAX(destination_airport) FROM airports );
SELECT city FROM flights WHERE count(*) = ( SELECT MAX(count()) FROM flights );
SELECT airport_code FROM airports WHERE source_airport = ( SELECT MAX(source_airport) FROM airports );
SELECT airport_code FROM flights WHERE num_flights = ( SELECT MAX(num_flights) FROM flights );
SELECT airport_code FROM airports WHERE flights = ( SELECT MAX(flights) FROM airports );
SELECT airport_code FROM airports WHERE num_flights = ( SELECT MIN(num_flights) FROM airports );
SELECT airport_code FROM airports WHERE num_flights = ( SELECT MIN(num_flights) FROM airports );
SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(flight) DESC LIMIT 1;
SELECT airline FROM flights GROUP BY airline ORDER BY COUNT(flight) DESC LIMIT 1;
SELECT T1.abbreviation, T2.country FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.airline = T2.airline GROUP BY T1.airline ORDER BY COUNT(T1.flight) LIMIT 1;
SELECT T1.airline, T2.country FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.airline = T2.airline GROUP BY T1.airline ORDER BY COUNT(T1.flight) LIMIT 1;
SELECT airline FROM flights WHERE airport = 'AHD'
SELECT airline FROM flights WHERE source_airport = 'AHD'
SELECT airline FROM flights WHERE airport = 'AHD';
SELECT airline FROM flights WHERE destination_airport = 'AHD';
SELECT airline FROM flights WHERE airport = 'APG' AND airport = 'CVO';
SELECT airline FROM flights WHERE airport IN ('APG', 'CVO')
SELECT airline FROM flights WHERE airport = 'CVO' AND airport != 'APG';
SELECT airline FROM airports WHERE airport = 'CVO' EXCEPT SELECT airline FROM airports WHERE airport = 'APG';
SELECT airline FROM flights GROUP BY airline HAVING COUNT(flight) >= 10;
SELECT airline FROM flights WHERE COUNT(flight_id) >= 10;
SELECT airline FROM flights WHERE num_flights < 200;
SELECT airline FROM flights WHERE flights.flight_num < 200;
SELECT flight_number FROM flights WHERE airline = 'United Airlines';
SELECT flight_number FROM flights WHERE airline = 'United Airlines'
SELECT flight_number FROM flights WHERE airport_code = 'APG';
SELECT flight_number FROM flights WHERE airport_code = 'APG';
SELECT flight_number FROM flights WHERE airport_code = 'APG';
SELECT flight_number FROM flights WHERE airport = 'APG';
SELECT flight_number FROM flights WHERE city = 'Aberdeen'
SELECT flight_number FROM flights WHERE origin = 'Aberdeen'
SELECT flight_number FROM flights WHERE city = 'Aberdeen'
SELECT flight_number FROM flights WHERE airport = 'ABE'
SELECT COUNT(*) FROM flights WHERE city IN ('Aberdeen', 'Abilene')
SELECT COUNT(*) FROM flights WHERE airport IN ('Aberdeen', 'Abilene')
SELECT name FROM airports WHERE id NOT IN ( SELECT airport_id FROM flights )
SELECT airport FROM flights WHERE NOT IN (SELECT airport FROM arrivals) AND NOT IN (SELECT airport FROM departures);
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT name FROM employee ORDER BY age ASC;
SELECT name FROM employee WHERE age IN (SELECT min(age) FROM employee) ORDER BY age ASC;
SELECT COUNT(*) , city FROM employees GROUP BY city;
SELECT city, COUNT(*) FROM employee GROUP BY city;
SELECT T2.city FROM employees AS T1 INNER JOIN cities AS T2 ON T1.city_id = T2.id WHERE T1.age < 30 GROUP BY T2.city HAVING COUNT(T1.employee_id) > 1;
SELECT T2.city FROM employees AS T1 INNER JOIN cities AS T2 ON T1.city_id = T2.id WHERE T1.age < 30 GROUP BY T2.id HAVING COUNT(T1.employee_id) > 1;
SELECT COUNT(*) , location FROM shops GROUP BY location
SELECT COUNT(*) ,  location FROM shops GROUP BY location;
SELECT T1.name, T2.district FROM shop AS T1 INNER JOIN product AS T2 ON T1.id = T2.shop_id GROUP BY T1.id ORDER BY COUNT(T2.product_id) DESC LIMIT 1;
SELECT T1.name, T2.district FROM shop AS T1 INNER JOIN shop_id AS T2 ON T1.id = T2.shop_id GROUP BY T2.shop_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT MIN(T1.num_products) ,  MAX(T1.num_products) FROM Store AS T1 INNER JOIN Product AS T2 ON T1.store_id = T2.store_id GROUP BY T1.store_id;
SELECT MIN(T1.num_products) ,  MAX(T1.num_products) FROM Shop AS T1 INNER JOIN Product AS T2 ON T1.id = T2.shop_id
SELECT name, location, district FROM shop ORDER BY COUNT(*) DESC;
SELECT T1.name, T2.location, T2.district FROM shop AS T1 INNER JOIN district AS T2 ON T1.id = T2.shop_id ORDER BY COUNT(T1.product_id) DESC;
SELECT T1.name FROM store AS T1 JOIN product AS T2 ON T1.id = T2.store_id GROUP BY T1.id HAVING COUNT(T2.product_id) > (SELECT AVG(product_id) FROM product)
SELECT shop_name FROM shops WHERE num_products > (SELECT AVG(num_products) FROM shops);
SELECT e.employee_name FROM employee AS e JOIN evaluation AS ev ON e.employee_id = ev.employee_id GROUP BY e.employee_id ORDER BY COUNT(ev.yeawarded) DESC LIMIT 1;
SELECT T1.name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.id = T2.employee_id GROUP BY T1.name ORDER BY COUNT(T2.award_id) DESC LIMIT 1;
SELECT T1.name FROM employee AS T1 INNER JOIN one_time_bonus AS T2 ON T1.id = T2.employee_id ORDER BY T2.bonus_amount DESC LIMIT 1;
SELECT T1.name FROM employee AS T1 INNER JOIN bonus AS T2 ON T1.id = T2.employee_id ORDER BY T2.bonus_amount DESC LIMIT 1
SELECT DISTINCT e.name FROM employee e LEFT JOIN evaluation e_val ON e.id = e_val.employee_id LEFT JOIN award a ON e_val.id = a.evaluation_id WHERE e_val.id IS NULL AND a.id IS NULL;
SELECT name FROM employee WHERE id NOT IN (SELECT id FROM evaluation)
SELECT shop FROM employees WHERE job_id IN ( SELECT job_id FROM hiring WHERE shop = 'Shop_ID' ) GROUP BY shop ORDER BY COUNT(job_id) DESC LIMIT 1;
SELECT shop FROM employees WHERE count(*) = ( SELECT MAX(count(*)) FROM employees );
SELECT shop FROM shops WHERE id NOT IN (SELECT shop_id FROM employees)
SELECT shop FROM shops WHERE employees = 0;
SELECT shop_id, COUNT(*) FROM employees WHERE hire_date IN (SELECT hire_date FROM hires WHERE employee_id IN (SELECT id FROM employees)) GROUP BY shop_id;
SELECT COUNT(DISTINCT shop_id), name FROM shops WHERE status = 'active' GROUP BY shop_id;
SELECT SUM(T2.bonus) FROM evaluations AS T1 INNER JOIN evaluations AS T2 ON T1.id = T2.id WHERE T1.id != T2.id;
SELECT SUM(T1.bonus) FROM evaluations AS T1 INNER JOIN employees AS T2 ON T1.employee_id = T2.id
SELECT * FROM hiring
SELECT * FROM hiring
SELECT DISTINCT d.name FROM district AS d JOIN shop AS s ON d.id = s.district_id WHERE s.num_products < 3000 INTERSECT SELECT DISTINCT d.name FROM district AS d JOIN shop AS s ON d.id = s.district_id WHERE s.num_products > 10000;
SELECT DISTINCT district FROM shop WHERE products < 3000 AND products > 10000;
SELECT COUNT(DISTINCT location_id) FROM shop
SELECT COUNT(DISTINCT store_location) FROM shop
SELECT COUNT(*) FROM documents;
SELECT COUNT(*) FROM documents;
SELECT document_id, name, description FROM documents
SELECT id, name, description FROM documents;
SELECT document_name, template_id FROM documents WHERE description LIKE '%w%'
SELECT name, template_id FROM documents WHERE description LIKE '%w%'
SELECT document_id, template_id, description FROM documents WHERE name = 'Robbin CV';
SELECT document_id, template_id, description FROM documents WHERE name = 'Robbin CV';
SELECT COUNT(DISTINCT template_id) FROM documents;
SELECT COUNT(DISTINCT template_id) FROM documents;
SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT id FROM templates WHERE type_code = 'PPT')
SELECT COUNT(*) FROM documents WHERE type_id IN (SELECT id FROM templates WHERE name = 'PPT')
SELECT template_id, COUNT(*) FROM documents GROUP BY template_id;
SELECT COUNT(DISTINCT template_id) FROM documents;
SELECT id, type_code FROM documents ORDER BY COUNT(*) DESC LIMIT 1;
SELECT id, type_code FROM templates WHERE id = ( SELECT MAX(id) FROM templates );
SELECT t.id FROM templates AS t JOIN documents AS d ON t.id = d.template_id GROUP BY t.id HAVING COUNT(d.id) > 1;
SELECT template_id FROM documents GROUP BY template_id HAVING COUNT(template_id) > 1;
SELECT id FROM templates WHERE id NOT IN ( SELECT template_id FROM documents )
SELECT id FROM templates WHERE id NOT IN (SELECT template_id FROM documents)
SELECT COUNT(*) FROM templates;
SELECT COUNT(*) FROM templates;
SELECT template_id, version_number, template_type_code FROM templates
SELECT id, version_number, type_code FROM templates
SELECT DISTINCT template_type_code FROM templates;
SELECT template_type_code FROM templates
SELECT id FROM templates WHERE template_type IN ('PP', 'PPT')
SELECT id FROM templates WHERE code IN ('PP', 'PPT')
SELECT COUNT(*) FROM templates WHERE template_type_code = 'CV';
SELECT COUNT(*) FROM templates WHERE type = 'CV';
SELECT template_version_number, template_type_code FROM templates WHERE template_version_number > 5;
SELECT template_type_code FROM templates WHERE version_number > 5;
SELECT template_type_code, COUNT(*) FROM templates GROUP BY template_type_code;
SELECT template_type_code, COUNT(*) FROM templates GROUP BY template_type_code;
SELECT template_type_code FROM templates WHERE COUNT(*) = ( SELECT MAX(count) FROM ( SELECT template_type_code, COUNT(*) as count FROM templates GROUP BY template_type_code ) );
SELECT t1.type_code FROM templates AS t1 INNER JOIN template_types AS t2 ON t1.id = t2.template_id GROUP BY t1.id ORDER BY COUNT(t1.id) DESC LIMIT 1;
SELECT template_type_code FROM templates WHERE num_templates < 3;
SELECT template_code FROM templates WHERE id IN ( SELECT id FROM template_types WHERE count(*) < 3 );
SELECT MIN(version_number) FROM templates WHERE template_type_code = 'NUL';
SELECT MIN(version_number) FROM templates WHERE template_type_code IN (template_id, template_type_code);
SELECT template_type_code FROM documents WHERE name = 'Data base';
SELECT template_type_code FROM documents WHERE document_name = 'Data base';
SELECT document_name FROM documents WHERE template_type = 'BK'
SELECT document_name FROM documents WHERE template_id IN (SELECT id FROM templates WHERE code = 'BK')
SELECT template_type_code, COUNT(*) FROM templates GROUP BY template_type_code;
SELECT COUNT(T1.template_id) ,  T2.template_type FROM documents AS T1 INNER JOIN template_types AS T2 ON T1.template_id = T2.id GROUP BY T2.template_type;
SELECT template_type_code FROM documents GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT template_id FROM templates WHERE id IN ( SELECT template_id FROM documents GROUP BY template_id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT DISTINCT template_id FROM documents WHERE document_id NOT IN ( SELECT document_id FROM templates );
SELECT template_id FROM documents WHERE document_type NOT IN ('template_id_integrate', 'template_id_foreign_key', 'template_id_typpe_code')
SELECT template_type_code, description FROM template_type WHERE template_type_code IN (1, 2)
SELECT type_code, description FROM template_type
SELECT template_type_description FROM template_type WHERE template_type_code = 'AD';
SELECT template_type_description FROM template_type WHERE code = 'AD';
SELECT template_type_code FROM templates WHERE template_type_description = 'Book';
SELECT template_type_code FROM template WHERE description = 'Book'
SELECT DISTINCT template_type_description FROM documents;
SELECT DISTINCT template_id FROM documents;
SELECT template_id FROM templates WHERE type_description = 'Presentation';
SELECT id FROM templates WHERE description = 'Presentation'
SELECT COUNT(*) FROM paragraphs;
SELECT COUNT(*) FROM paragraphs;
SELECT COUNT(T1.paragraph) FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.document_id WHERE T1.name = 'Summer Show';
SELECT COUNT(T1.paragraph_id) FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.document_id WHERE T1.name = 'Summer Show';
SELECT paragraph FROM paragraphs WHERE id = (SELECT id FROM paragraphs WHERE text LIKE '%Korea %')
SELECT paragraphs FROM paragraphs WHERE id IN (SELECT paragraph_id FROM paragraphs WHERE text LIKE '%Korea %')
SELECT paragraph_id, text FROM documents WHERE name = 'Welcome to NY';
SELECT id, text FROM paragraphs WHERE document_id = (SELECT id FROM documents WHERE title = 'Welcome to NY')
SELECT paragraph_texts FROM documents WHERE name = 'Customer reviews';
SELECT paragraph_texts FROM documents WHERE name = 'Customer reviews'
SELECT document_id, COUNT(paragraphs) FROM documents GROUP BY document_id ORDER BY document_id;
SELECT id, COUNT(*) FROM paragraphs GROUP BY id ORDER BY id;
SELECT document_id, name, COUNT(paragraph) FROM documents GROUP BY document_id;
SELECT id, name, COUNT(paragraphs) FROM documents GROUP BY id;
SELECT document_id FROM documents WHERE paragraphs > 2;
SELECT id FROM documents WHERE paragraphs >= 2;
SELECT document_id, name FROM documents ORDER BY COUNT(paragraphs) DESC LIMIT 1;
SELECT id, name FROM documents ORDER BY paragraphs DESC LIMIT 1;
SELECT document_id FROM paragraphs GROUP BY document_id ORDER BY COUNT(paragraphs) LIMIT 1;
SELECT id FROM documents ORDER BY paragraphs LIMIT 1;
SELECT document_id FROM documents WHERE length(document_content) BETWEEN 1 AND 2;
SELECT id FROM documents WHERE paragraphs BETWEEN 1 AND 2;
SELECT document_id FROM documents WHERE paragraph_text LIKE '%Brazil%' OR paragraph_text LIKE '%Ireland%'
SELECT id FROM documents WHERE paragraph LIKE '%Brazil%Ireland%'
SELECT COUNT(*) FROM teacher
SELECT COUNT(*) FROM teacher
SELECT name FROM teacher ORDER BY age ASC;
SELECT name FROM teacher ORDER BY age ASC;
SELECT age, hometown FROM teacher
SELECT age, hometown FROM teacher
SELECT T1.name FROM teacher AS T1 INNER JOIN teacher_id AS T2 ON T1.id = T2.teacher_id WHERE T2.hometown != 'Little Lever Urban District';
SELECT T1.name FROM teacher AS T1 INNER JOIN teacher_id AS T2 ON T1.id = T2.teacher_id WHERE T2.hometown != 'Little Lever Urban District';
SELECT T1.name FROM teacher AS T1 INNER JOIN teacher_id AS T2 ON T1.id = T2.teacher_id WHERE T2.age IN (32, 33)
SELECT T1.name FROM teacher AS T1 INNER JOIN teacher_id AS T2 ON T1.id = T2.teacher_id WHERE T2.age IN (32, 33)
SELECT hometown FROM teacher WHERE id IN (SELECT min(id) FROM teacher);
SELECT teacher_id FROM teachers WHERE age = ( SELECT MIN(age) FROM teachers );
SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown;
SELECT COUNT(Teacher_ID) FROM Teacher WHERE Home_Town = 'Hometown'
SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.hometown FROM teacher AS T1 INNER JOIN teacher_id AS T2 ON T1.id = T2.teacher_id GROUP BY T2.hometown ORDER BY COUNT(T2.teacher_id) DESC LIMIT 1;
SELECT T2.hometown FROM teacher AS T1 INNER JOIN teacher AS T2 ON T1.id = T2.id WHERE T1.id != T2.id GROUP BY T2.hometown HAVING COUNT(T1.id) > 1;
SELECT T2.town FROM teacher AS T1 INNER JOIN town AS T2 ON T1.town_id = T2.id GROUP BY T2.id HAVING COUNT(T1.teacher_id) >= 2;
SELECT T1.name, T2.course FROM Teacher AS T1 INNER JOIN Course AS T2 ON T1.id = T2.teacher_id
SELECT T1.name, T2.course FROM Teacher AS T1 INNER JOIN Course AS T2 ON T1.id = T2.teacher_id
SELECT T1.name FROM courses AS T2 JOIN teachers AS T1 ON T2.teacher_id = T1.id ORDER BY T1.name ASC;
SELECT T1.name, T2.course FROM Teacher AS T1 INNER JOIN Course_Teacher AS T2 ON T1.id = T2.teacher_id ORDER BY T1.name ASC;
SELECT T1.name FROM courses AS T1 INNER JOIN teachers AS T2 ON T1.teacher_id = T2.id WHERE T1.course_name = 'Math'
SELECT T1.name FROM courses AS T1 INNER JOIN instructor_id AS T2 ON T1.id = T2.course_id WHERE T2.instructor_name IN ('Math')
SELECT T1.name, COUNT(T2.course_id) FROM teacher AS T1 INNER JOIN courses AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.name;
SELECT T1.name, COUNT(T2.course_id) FROM CREATE TABLE T1 AS (SELECT DISTINCT teacher_id FROM CREATE TABLE T2 AS (SELECT course_id FROM courses)) GROUP BY T1.name;
SELECT T1.name FROM courses AS T1 INNER JOIN teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.teacher_id HAVING COUNT(T1.course_id) >= 2;
SELECT T1.name FROM CREATE TABLE T1 AS ( SELECT name FROM REFERENCE ) WHERE name IN ( SELECT teacher_id FROM courses );
SELECT T1.name FROM courses AS T1 INNER JOIN teacher_id AS T2 ON T1.course_id = T2.course_id WHERE T2.teacher_id NOT IN ( SELECT course_id FROM teacher_arrangements )
SELECT T1.name FROM CREATE TABLE AS T1 JOIN courses ON T1.id = courses.teacher_id WHERE courses.course_id NOT IN ( SELECT course_id FROM arrange_course );
SELECT COUNT(*) FROM visitors WHERE age < 30;
SELECT name FROM visitor WHERE level > 4 ORDER BY level DESC;
SELECT AVG(age) FROM visitors WHERE membership_level <= 4;
SELECT name, membership_level FROM visitors WHERE membership_level > 4 ORDER BY age DESC
SELECT m.id, m.name FROM museum AS m JOIN staff AS s ON m.id = s.museum_id GROUP BY m.id ORDER BY COUNT(s.staff_id) DESC LIMIT 1;
SELECT AVG(T2.staff_count) FROM museum AS T1 INNER JOIN museum_id AS T2 ON T1.id = T2.museum_id WHERE T1.open_year < 2009;
SELECT opening_year, staff_number FROM museum WHERE name = 'Plaza Museum';
SELECT name FROM museum WHERE staff > (SELECT MIN(staff) FROM museum WHERE opened_after = 1)
SELECT id, name, age FROM visitor WHERE id IN ( SELECT museum_id FROM visit WHERE visitor_id IN ( SELECT id FROM visitor ) GROUP BY museum_id HAVING COUNT(*) > 1 );
SELECT id, name, membership_level FROM visitors WHERE id IN ( SELECT visitor_id FROM museum_ticket WHERE total_amount = ( SELECT MAX(total_amount) FROM museum_ticket ) );
SELECT id, name FROM museum WHERE visit_id = ( SELECT visit_id FROM visit GROUP BY visit_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT name FROM museum WHERE id NOT IN (SELECT id FROM visitor)
SELECT T1.name, T2.age FROM visitor AS T1 INNER JOIN ticket AS T2 ON T1.id = T2.visitor_id GROUP BY T2.visitor_id ORDER BY COUNT(T2.ticket_id) DESC LIMIT 1;
SELECT AVG(Tickets), MAX(Tickets) FROM Visits
SELECT SUM(T1.expense) FROM visitors AS T1 INNER JOIN tickets AS T2 ON T1.id = T2.visitor_id WHERE T1.membership_level = 1;
SELECT v.visitor_id FROM museum AS m JOIN visitor AS v ON m.museum_id = v.museum_id WHERE m.opened_before_2009 AND m.opened_after_2011;
SELECT COUNT(DISTINCT v.visitor_id) FROM museum AS m INNER JOIN visitor AS v ON m.museum_id = v.museum_id WHERE v.visit_date < (SELECT MIN(visit_date) FROM visitor WHERE visit_date >= 2010)
SELECT COUNT(DISTINCT museum_id) FROM museum WHERE EXTRACT(YEAR FROM open_year) BETWEEN 2008 AND 2013;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT first_name, birth_date FROM players WHERE country='USA'
SELECT AVG(CASE WHEN T.EXTPARTNER = 'loser' THEN T.AGE END) AS loser_avg, AVG(CASE WHEN T.EXTPARTNER = 'winner' THEN T.AGE END) AS winner_avg FROM MATCHES T
SELECT AVG(T1.age) FROM losers AS T1 INNER JOIN winners AS T2 ON T1.id = T2.id
SELECT AVG(T1.rank) FROM matches AS T1 INNER JOIN teams AS T2 ON T1.team_id = T2.id
SELECT AVG(T1.rank) FROM matches AS T1 INNER JOIN teams AS T2 ON T1.team_id = T2.id WHERE T1.winner = 1;
SELECT MAX(T1.rank) FROM matches AS T1 INNER JOIN losers AS T2 ON T1.id = T2.match_id
SELECT MIN rank FROM matches;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country) FROM players;
SELECT COUNT(DISTINCT loser_name) FROM loser
SELECT COUNT(DISTINCT loser_name) FROM loser
SELECT T1.name FROM tournament AS T1 INNER JOIN match AS T2 ON T1.id = T2.tournament_id GROUP BY T1.id HAVING COUNT(T2.match_id) > 10;
SELECT T1.name FROM tournament AS T1 INNER JOIN match AS T2 ON T1.id = T2.tournament_id WHERE T2.matches > 10;
SELECT T1.name FROM competition AS T1 INNER JOIN event AS T2 ON T1.id = T2.competition_id WHERE T2.year IN (2013, 2016)
SELECT T1.name FROM players AS T1 INNER JOIN results AS T2 ON T1.id = T2.player_id WHERE T2.year IN (2013, 2016)
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)
SELECT T1.country_code, T2.first_name FROM tournament AS T1 INNER JOIN player AS T2 ON T1.id = T2.tournament_id WHERE T1.name IN ('WTA Championships', 'Australian Open')
SELECT T1.first_name, T2.country_code FROM players AS T1 INNER JOIN tournaments AS T2 ON T1.player_id = T2.player_id WHERE T2.name IN ('WTA Championships', 'Australian Open')
SELECT first_name, country_code FROM players ORDER BY age DESC LIMIT 1;
SELECT first_name, country_code FROM players ORDER BY age DESC LIMIT 1;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT full_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT T1.full_name, T2.birth_date FROM players AS T1 INNER JOIN players_ as T2 ON T1.id = T2.player_id WHERE T1.hand = 'left' ORDER BY T2.birth_date;
SELECT T1.first_name, T2.country_code FROM players AS T1 INNER JOIN tours AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY COUNT(T2.tour_id) DESC LIMIT 1;
SELECT first_name, country_code FROM players WHERE tours = ( SELECT MAX(tours) FROM players );
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT YEAR FROM matches GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.name, SUM(T2.rank_points) FROM matches AS T1 INNER JOIN loser AS T2 ON T1.id = T2.match_id GROUP BY T1.name ORDER BY SUM(T2.rank_points) DESC LIMIT 1;
SELECT T1.name, SUM(T2.rank_points) FROM matches AS T1 INNER JOIN loser AS T2 ON T1.id = T2.match_id GROUP BY T1.name ORDER BY SUM(T2.rank_points) DESC LIMIT 1;
SELECT T1.name FROM players AS T1 INNER JOIN tournaments AS T2 ON T1.id = T2.player_id WHERE T2.tournament_name = 'Australian Open' ORDER BY T1.rank_points DESC LIMIT 1;
SELECT T1.name FROM tournaments AS T1 INNER JOIN players AS T2 ON T1.id = T2.tournament_id INNER JOIN results AS T3 ON T2.id = T3.player_id WHERE T1.name = 'Australian Open' ORDER BY T3.rank_points DESC LIMIT 1;
SELECT loser_name, winner_name FROM matches WHERE minutes = ( SELECT MAX(minutes) FROM matches );
SELECT T1.winner, T2.loser FROM matches AS T1 INNER JOIN loser AS T2 ON T1.id = T2.match_id ORDER BY T1.duration DESC LIMIT 1;
SELECT AVG(ranking) ,  first_name FROM players GROUP BY first_name
SELECT T1.first_name, AVG(T2.ranking) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name;
SELECT T1.player_id, T2.first_name, SUM(T3.ranking_points) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id INNER JOIN ranking_points AS T3 ON T2.ranking_id = T3.ranking_id GROUP BY T1.player_id, T2.first_name
SELECT T1.first_name, SUM(T2.ranking_points) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name;
SELECT COUNT(DISTINCT country) FROM players;
SELECT COUNT(*) , country FROM players GROUP BY country;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT code FROM countries WHERE players > 50;
SELECT country_code FROM players WHERE player_count > 50;
SELECT COUNT(*) , ranking_date FROM tours GROUP BY ranking_date
SELECT COUNT(*) , ranking_date FROM tours GROUP BY ranking_date
SELECT COUNT(*) , YEAR(match_date) FROM matches GROUP BY YEAR(match_date);
SELECT COUNT(*) , YEAR FROM matches GROUP BY YEAR;
SELECT T1.name, T2.rank FROM matches AS T1 INNER JOIN winners AS T2 ON T1.id = T2.match_id ORDER BY T2.rank LIMIT 3;
SELECT T1.name, T2.rank FROM matches AS T1 INNER JOIN players AS T2 ON T1.player_id = T2.id ORDER BY T1.match_date ASC LIMIT 3;
SELECT COUNT(DISTINCT T1.winner) FROM T1 INNER JOIN T2 ON T1.winner = T2.winner WHERE T2.handness = 'left' AND T1.event = 'WTA Championships';
SELECT COUNT(T1.id) FROM T1 AS LEFT HANDED WINNERS INNER JOIN T2 AS WTA CHAMPIONSHIPS ON T1.id = T2.id WHERE T1.handed = 'left' AND T2.name = 'WTA Championships';
SELECT T1.first_name, T2.country_code, T3.birth_date FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.player_id INNER JOIN results AS T3 ON T2.match_id = T3.match_id WHERE T3.rank_points = ( SELECT MAX(rank_points) FROM results );
SELECT first_name, country_code, birth_date FROM players WHERE winner_rank_points = ( SELECT MAX(winner_rank_points) FROM players );
SELECT COUNT(hand_type) ,  hand_type FROM players GROUP BY hand_type;
SELECT COUNT(hand_type) , hand_type FROM players GROUP BY hand_type;
SELECT COUNT(*) FROM ships WHERE status = 'Captured';
SELECT name FROM barrel ORDER BY LOWER(name) DESC
SELECT name, date, result FROM battle
SELECT MAX(d), MIN(d) FROM deaths
SELECT AVG(i) FROM injury WHERE type = 'ship'
SELECT death, injury FROM ship WHERE tonnage = 't';
SELECT name, results FROM battles WHERE commander != 'Boril'
SELECT T1.id, T2.name FROM battles AS T1 INNER JOIN ships AS T2 ON T1.id = T2.battle_id WHERE T2.type = 'Brig'
SELECT T1.id, T2.name FROM battles AS T1 INNER JOIN casualties AS T2 ON T1.id = T2.battle_id WHERE SUM(T2.killed) > 10;
SELECT ship_id, name FROM accidents WHERE total_injuries = ( SELECT MAX(total_injuries) FROM accidents );
SELECT DISTINCT T2.battle_name FROM T1.commander AS T1 JOIN T2.battle AS T2 ON T1.id = T2.commander_id WHERE T1.name IN ('Kaloyan', 'Baldwin I')
SELECT COUNT(DISTINCT battle) FROM battles
SELECT COUNT(*) FROM battles WHERE loss = 0 AND tonnage = '225'
SELECT T1.name, T2.date FROM ship AS T1 INNER JOIN battle AS T2 ON T1.id = T2.ship_id WHERE T1.name IN ('Lettice', 'HMS Atalanta')
SELECT T1.name, T2.result, T3.bulgarian_commander FROM battles AS T1 INNER JOIN ship_losses AS T2 ON T1.id = T2.battle_id INNER JOIN losses AS T3 ON T2.id = T3.ship_id WHERE T2.battle_id IN ( SELECT id FROM battles WHERE name = 'English Channel' ) AND T2.losses = 0;
SELECT notes FROM death WHERE notes LIKE '%East%'
SELECT line1, line2 FROM addresses
SELECT line1, line2 FROM addresses ORDER BY id LIMIT 1, 1;
SELECT COUNT(*) FROM courses;
SELECT COUNT(*) FROM courses;
SELECT description FROM courses WHERE id IN (SELECT course_id FROM math_courses)
SELECT description FROM courses WHERE type = 'math'
SELECT zip_code FROM addresses WHERE city = 'Port Chelsea';
SELECT zip_code FROM locations WHERE city = 'Port Chelsea';
SELECT d.id, d.name FROM departments d JOIN degrees d1 ON d.id = d1.department_id GROUP BY d.id ORDER BY COUNT(d1.id) DESC LIMIT 1;
SELECT d.name, d.id FROM departments d INNER JOIN degrees d1 ON d.id = d1.department_id WHERE d1.degree_id = ( SELECT MAX(degree_id) FROM degrees )
SELECT COUNT(DISTINCT T2.department_id) FROM departments AS T1 INNER JOIN degrees AS T2 ON T1.department_id = T2.department_id
SELECT COUNT(DISTINCT degreename_id) FROM departments
SELECT COUNT(DISTINCT degree_name) FROM degrees
SELECT COUNT(DISTINCT degree_id) FROM degrees
SELECT COUNT(DISTINCT degree_id) FROM DEGREE WHERE department_id IN (SELECT id FROM DEPARTMENT WHERE name = 'ENGINEERING') AND degree_name != 'Bachelor of Engineering';
SELECT COUNT(*) FROM DEPARTMENTS WHERE NAME = 'ENGINEERING' AND PRIMARIES = 1;
SELECT name, description FROM sections;
SELECT name, description FROM sections;
SELECT name, id FROM courses WHERE sections_count <= 2;
SELECT name, id FROM courses WHERE sections < 2;
SELECT section_name FROM sections ORDER BY section_name DESC;
SELECT name FROM sqlite_master WHERE type='table' ORDER BY name DESC;
SELECT s.name, s.id FROM semester s JOIN student_enrollment se ON s.id = se.semester_id WHERE se.enrollment_type IN ('N', 'O') GROUP BY s.id ORDER BY COUNT(se.student_id) DESC LIMIT 1;
SELECT T1.name, T2.id FROM courses AS T1 INNER JOIN enrollments AS T2 ON T1.id = T2.course_id GROUP BY T2.course_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1;
SELECT description FROM departments WHERE name LIKE '%computer%'
SELECT department_description FROM departments WHERE name LIKE '%computer%'
SELECT T1.first_name, T1.middle_name, T1.last_name, T2.id FROM students_enrollment AS T1 INNER JOIN degree_programs AS T2 ON T1.degree_program_id = T2.id WHERE T2.degree_type = '2' AND T2.semester_id IN (25, 55)
SELECT T1.first_name, T1.middle_name, T1.last_name, T2.student_id FROM students AS T1 INNER JOIN degree_programs AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_program_id IN (25, 255) AND T2.semester_id = 'semester_id';
SELECT T1.first_name, T1.middle_name, T1.last_name FROM students_enrolled AS T1 INNER JOIN programs AS T2 ON T1.program_id = T2.id WHERE T2.degree = 'Bachelor'
SELECT first_name, middle_name, last_name FROM students WHERE degree = 'Bachelors'
SELECT p.program_id, COUNT(p.id) FROM program p JOIN student s ON p.id = s.program_id GROUP BY p.program_id ORDER BY COUNT(s.id) DESC LIMIT 1;
SELECT deg_name FROM degrees WHERE student_enroll = ( SELECT MAX(student_enroll) FROM degrees );
SELECT p.id, COUNT(s.student_id) FROM programs p JOIN students s ON p.id = s.program_id GROUP BY p.id ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT T2.program_id, T1.summary FROM degrees AS T1 INNER JOIN degree_programs AS T2 ON T1.id = T2.degree_id GROUP BY T2.program_id ORDER BY COUNT(T2.program_id) DESC LIMIT 1;
SELECT s.id, s.first_name, s.middle_name, s.last_name, COUNT(e.enrollment_id) FROM students s JOIN enrollments e ON s.student_id = e.student_id GROUP BY s.student_id ORDER BY COUNT(e.enrollment_id) DESC LIMIT 1;
SELECT T1.first_name, T1.middle_name, T1.last_name, T2.id, COUNT(T3.student_id) FROM students AS T1 INNER JOIN enrollments AS T2 ON T1.student_id = T2.student_id INNER JOIN programs AS T3 ON T2.program_id = T3.id GROUP BY T2.student_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1
SELECT semester_name FROM semesters WHERE id NOT IN ( SELECT semester_id FROM students )
SELECT semester_id FROM semesters WHERE id NOT IN ( SELECT semester_id FROM students );
SELECT T1.name FROM courses AS T1 INNER JOIN students_enrolled AS T2 ON T1.id = T2.course_id
SELECT c.course_id FROM courses AS T1 INNER JOIN student_courses AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id IS NOT NULL
SELECT c.course_id, COUNT(e.enrollment_id) FROM enrollments e JOIN courses c ON e.course_id = c.course_id GROUP BY c.course_id ORDER BY COUNT(e.enrollment_id) DESC LIMIT 1;
SELECT c.course_id, c.name FROM courses AS c JOIN students_enroll INTEGERS AS se ON c.course_id = se.course_id GROUP BY se.course_id ORDER BY COUNT(se.course_id) DESC LIMIT 1;
SELECT T1.last_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.student_id = T2.student_id WHERE T2.state = 'NC' AND T1.degree_program IS NULL;
SELECT T1.last_name FROM students AS T1 INNER JOIN degrees AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_id IS NULL AND T1.state = 'NC'
SELECT transcript_id, date FROM transcripts WHERE COUNT(course_result_id) >= 2;
SELECT transcript_id, date FROM transcripts WHERE id IN ( SELECT course_id FROM courses GROUP BY course_id HAVING COUNT(*) >= 2 );
SELECT phone_number FROM addresses WHERE address_id IN (SELECT address_id FROM contacts WHERE first_name = 'Timmothy' AND last_name = 'Ward')
SELECT mobile_number FROM students WHERE name = 'Timmothy Ward';
SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 INNER JOIN registers AS T2 ON T1.student_id = T2.student_id ORDER BY T2.register_date ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM students ORDER BY id LIMIT 1;
SELECT T1.first_name, T1.middle_name, T1.last_name FROM graduates AS T1 INNER JOIN degrees AS T2 ON T1.degree_id = T2.degree_id WHERE T2.name = 'Bachelor of Arts' ORDER BY T1.graduation_year ASC LIMIT 1;
SELECT T1.first_name, T1.middle_name, T1.last_name FROM graduates AS T1 INNER JOIN schools AS T2 ON T1.school_id = T2.id WHERE T1.date_of_graduation IS NOT NULL ORDER BY T1.date_of_graduation LIMIT 1;
SELECT T1.first_name FROM users AS T1 INNER JOIN addresses AS T2 ON T1.id = T2.user_id WHERE T2.address_type IN ('permanent', 'current') AND T2.address_id != T1.current_address_id;
SELECT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.student_id = T2.student_id WHERE T2.address_type != 'permanent' AND T2.address_id IN ( SELECT address_id FROM addresses WHERE address_type = 'current' )
SELECT T1.id, T2.line1, T2.line2, T2.line3, T2.line4, T2.line5, T2.line6, T2.line7 FROM addresses AS T1 INNER JOIN student_addresses AS T2 ON T1.id = T2.address_id GROUP BY T2.address_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1;
SELECT T1.id, T2.line_1, T2.line_2 FROM addresses AS T1 INNER JOIN students AS T2 ON T1.id = T2.address_id ORDER BY T2.student_count DESC LIMIT 1;
SELECT AVG(VARCHAR) FROM transcripts;
SELECT AVG(dates_date) FROM transcripts;
SELECT t1.date, t1.details FROM transcripts AS t1 INNER JOIN transcript_id AS t2 ON t1.id = t2.transcript_id WHERE t2.integer = 1 ORDER BY date ASC LIMIT 1;
SELECT MIN(t_transcript_id.date), t_transcripts.title FROM transcripts JOIN transcript_ids ON transcripts.id = transcript_ids.transcript_id WHERE transcript_ids.integer = 1;
SELECT COUNT(t_id) FROM transcripts;
SELECT COUNT(*) FROM transcripts;
SELECT transcript_id FROM transcripts WHERE date = ( SELECT MAX(date) FROM transcripts );
SELECT transcript_id FROM transcripts WHERE date = (SELECT MAX(date) FROM transcripts);
SELECT COUNT(DISTINCT t.id) ,  t.course_enrollment_id FROM transcripts t JOIN course_enrollments ce ON t.id = ce.transcript_id JOIN courses c ON ce.course_id = c.id
SELECT MAX(COUNT(*)), id FROM transcripts GROUP BY id
SELECT transcript_id, date FROM transcripts ORDER BY COUNT(*) LIMIT 1;
SELECT transcript_id, date FROM transcripts ORDER BY results ASC LIMIT 1;
SELECT semester_id FROM degrees AS T1 INNER JOIN students AS T2 ON T1.degree_id = T2.degree_id WHERE T1.degree_name IN ('Master', 'Bachelor') GROUP BY semester_id HAVING COUNT(T2.student_id) > 1;
SELECT id FROM degrees WHERE id IN ( SELECT degree_id FROM students WHERE major_id IN ( SELECT id FROM majors WHERE name = 'Masters' ) UNION SELECT degree_id FROM students WHERE major_id IN ( SELECT id FROM majors WHERE name = 'Bachelors' ) );
SELECT COUNT(DISTINCT T1.address_id) FROM students AS T1 INNER JOIN addresses AS T2 ON T1.student_id = T2.student_id;
SELECT DISTINCT T1.address FROM students AS T1 INNER JOIN addresses AS T2 ON T1.student_id = T2.id
SELECT * FROM students ORDER BY name DESC;
SELECT * FROM students ORDER BY name ASC;
SELECT section_h FROM sections WHERE id IN (SELECT id FROM sections WHERE name = 'section h')
SELECT description FROM sections WHERE name = 'h';
SELECT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.student_id = T2.student_id WHERE T2.country = 'Haiti' OR T2.cell_phone_number = 09700166582
SELECT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.student_id = T2.student_id WHERE T2.country = 'Haiti' OR T2.cell_phone_number = '09700166582';
SELECT title FROM cartoons ORDER BY title;
SELECT title FROM cartoons ORDER BY title;
SELECT title FROM cartoons WHERE director = 'Ben Jones';
SELECT T1.name FROM Cartoons AS T1 INNER JOIN Directors AS T2 ON T1.id = T2.cartoon_id WHERE T2.director_name = 'Ben Jones';
SELECT COUNT(T1.id) FROM Cartoons AS T1 INNER JOIN Writers AS T2 ON T1.id = T2.cartoon_id WHERE T2.writer_name = 'Joseph Kuhr';
SELECT COUNT(T1.id) FROM Cartoons AS T1 INNER JOIN Writers AS T2 ON T1.id = T2.id WHERE T2.name = 'Joseph Kuhr';
SELECT T1.title, T2.director FROM Cartoons AS T1 INNER JOIN Directors AS T2 ON T1.id = T2.id ORDER BY T1.air_date;
SELECT T1.name, T2.director FROM Cartoons AS T1 INNER JOIN Directors AS T2 ON T1.id = T2.cartoon_id ORDER BY T1.air_date;
SELECT T2.title FROM director AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.director_id WHERE T1.name IN ('Ben Jones', 'Brandon Vietti');
SELECT T1.title FROM Cartoons AS T1 INNER JOIN Directors AS T2 ON T1.id = T2.id WHERE T2.director IN ('Ben Jones', 'Brandon Vietti');
SELECT T1.Country, COUNT(T2.TV_Channels) FROM Country AS T1 INNER JOIN TV_Channels AS T2 ON T1.Country = T2.Country GROUP BY T1.Country ORDER BY COUNT(T2.TV_Channels) DESC LIMIT 1;
SELECT country, COUNT(*) FROM TV_channel GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name) ,  COUNT(DISTINCT content) FROM TV_Channels;
SELECT COUNT(DISTINCT series) ,  COUNT(DISTINCT content) FROM TV_Channels;
SELECT TVChannel FROM Channel WHERE SerialName = 'Sky Radio';
SELECT content FROM series WHERE name = 'Sky Radio';
SELECT PackageOption FROM TVChannel WHERE serialName = 'Sky Radio';
SELECT PackageOptions FROM TV WHERE SeriesName = 'Sky Radio'
SELECT COUNT(TVChannel) FROM TVChannel WHERE Language = 'English'
SELECT COUNT(TVChannelID) FROM TVChannel WHERE LanguageID = (SELECT ID FROM Language WHERE Name = 'English')
SELECT language, COUNT(*) FROM TV_channel GROUP BY language ORDER BY COUNT(*) LIMIT 1;
SELECT language, COUNT(*) FROM TV_channels GROUP BY language ORDER BY COUNT(*) LIMIT 1;
SELECT language, COUNT(*) FROM TV_channels GROUP BY language;
SELECT language, COUNT(TV_Channels) FROM TV_Channels GROUP BY language;
SELECT T.V_Channel FROM TV_Channels AS T WHERE T.id IN ( SELECT T2.TV_Channel FROM Cartoons AS T1 INNER JOIN TV_Channels AS T2 ON T1.TV_Channel = T2.id WHERE T1.Name = 'The Rise of the Blue Beetle!' );
SELECT T1.name FROM TV_Channels AS T1 INNER JOIN Shows AS T2 ON T1.id = T2.tv_channel_id WHERE T2.show_name = 'The Rise of the Blue Beetle';
SELECT T1.title FROM Cartoons AS T1 INNER JOIN TVChannel AS T2 ON T1.id = T2.id WHERE T2.name = 'Sky Radio';
SELECT T1.title FROM Cartools AS T1 INNER JOIN TVChannel AS T2 ON T1.id = T2.id WHERE T2.series_name = 'Sky Radio';
SELECT T1.Episode FROM TV_series AS T1 INNER JOIN Episodes AS T2 ON T1.id = T2.tv_show_id ORDER BY T2.Rating;
SELECT * FROM episodes ORDER BY ratings;
SELECT TV_series, Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT T1.title, T2.rating FROM TV_series AS T1 INNER JOIN episodes AS T2 ON T1.id = T2.tv_show_id ORDER BY T2.rating DESC LIMIT 3;
SELECT MIN(TV_series.shares) ,  MAX(TV_series.shares) FROM TV_series;
SELECT MAX(share) , MIN(share) FROM TV_series
SELECT air_date FROM TV_series WHERE episode = 'A Love of a Lifetime';
SELECT airing_date FROM episodes WHERE title = 'A Love of a Lifetime';
SELECT T1.Weekly_Rank FROM TV_series AS T1 INNER JOIN Episodes AS T2 ON T1.TV_Series_ID = T2.TV_Series_ID WHERE T2.Episode = 'A Love of a Lifetime'
SELECT T2.weekly_rank FROM episodes AS T1 INNER JOIN ratings AS T2 ON T1.id = T2.episode_id WHERE T1.title = 'A Love of a Lifetime';
SELECT T1.TV_Chanel FROM TV_Series AS T1 INNER JOIN Episodes AS T2 ON T1.TV_SerieID = T2.TV_SerieID WHERE T2.Episode = 'A Love of a Lifetime'
SELECT T1.name FROM series AS T1 INNER JOIN episodes AS T2 ON T1.id = T2.series_id WHERE T2.episode = 'A Love of a Lifetime';
SELECT T1.Episode FROM TV_series AS T1 INNER JOIN Channel AS T2 ON T1.id = T2.id WHERE T2.name = 'Sky Radio';
SELECT T1.episode FROM TV_series AS T1 INNER JOIN Episodes AS T2 ON T1.id = T2.tv_show_id WHERE T1.name = 'Sky Radio';
SELECT COUNT(*) FROM cartoons WHERE director IN ('Cartoon Network', 'Nickelodeon', 'Disney', 'Warner Bros.', 'Orignal Air Date', 'Production Company Real', 'Channel Name ChananeL', 'ID')
SELECT COUNT(c) FROM (  SELECT director, COUNT(cartoon) AS c   FROM cartoons   GROUP BY director )
SELECT production_code, channel FROM episodes ORDER BY air_date DESC LIMIT 1;
SELECT prod_code, channel FROM cartoons ORDER BY id DESC LIMIT 1;
SELECT T1.package_choice, T2.series_name FROM TV_channel AS T1 INNER JOIN channel_text AS T2 ON T1.id = T2.id WHERE T2.text LIKE '%HDTV%'
SELECT package_options, series FROM tv_channel WHERE name = 'HD'
SELECT T1.country FROM TV_channel AS T1 INNER JOIN CARTOON AS T2 ON T1.id = T2.id WHERE T2.writer = 'Todd Casey'
SELECT T1.country FROM TV_ChanneL AS T1 INNER JOIN CARTOON ON T1.id = CARTOON.id INNER JOIN WRITER ON CARTOON.id = WRITER.id WHERE WRITER.name = 'Todd Casey'
SELECT T1.country FROM TV_channel AS T1 INNER JOIN CARTOON AS T2 ON T1.id = T2.channel_id WHERE T2.writer NOT LIKE '%Todd Casey%'
SELECT T1.country FROM Cartoons AS T1 INNER JOIN Cartonwriters AS T2 ON T1.id = T2.cartoon_id WHERE T2.writer != 'Todd Casey'
SELECT T1.name, T2.country FROM TV_channel AS T1 INNER JOIN DIRECTED AS T2 ON T1.id = T2.id WHERE T2.director IN ('Ben Jones', 'Michael Chang')
SELECT T1.name, T2.country FROM TV_channel AS T1 INNER JOIN DIRECTED AS T2 ON T1.id = T2.channel_id WHERE T2.director = 'Ben Jones' OR T2.director = 'Michael Chang';
SELECT T1.PixelAspectRatio, T2.Nation FROM TVChannel AS T1 INNER JOIN Channel AS T2 ON T1.ChannelID = T2.ChannelID WHERE T2.Language != 'English'
SELECT pixel_aspect_ratio, country_of_origin FROM TV_channel WHERE language != 'English'
SELECT T1.id FROM TV_channel AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id GROUP BY T2.id HAVING COUNT(T1.id) > 2;
SELECT id FROM tv_channel WHERE COUNT(id) > 2;
SELECT id FROM TV_CHANNEL WHERE id NOT IN (SELECT tv_channel_id FROM CARTOON WHERE director = 'Ben Jones')
SELECT T1.id FROM TV_channel AS T1 INNER JOIN CARTOON AS T2 ON T1.id = T2.channel_id WHERE T2.director != 'Ben Jones'
SELECT package_option FROM tv_channel WHERE id NOT IN (SELECT id FROM cartoon WHERE director = 'Ben Jones')
SELECT package_options FROM tv_channel WHERE id NOT IN (SELECT tv_channel_id FROM cartoon_directed_by Ben Jones)
SELECT COUNT(*) FROM poker_player
SELECT COUNT(*) FROM poker_player
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Earnings FROM poker_player_id ORDER BY Earnings DESC;
SELECT T1.name, T2.best_finish FROM Player AS T1 INNER JOIN Results AS T2 ON T1.id = T2.player_id ORDER BY T2.best_finish DESC;
SELECT T1.best_finish, T2.final_table FROM poker_player AS T1 INNER JOIN results AS T2 ON T1.player_id = T2.player_id
SELECT AVG(Earnings) FROM PokerPlayer
SELECT AVG(Earnings) FROM poker_player
SELECT money_rank FROM poker_player WHERE earnings = ( SELECT MAX(earnings) FROM poker_player );
SELECT MAX(MoneyRank) FROM Player
SELECT MAX(T2.earnings) FROM poker_player AS T1 INNER JOIN player_stats AS T2 ON T1.player_id = T2.player_id WHERE T2.earnings < 200000 AND T2.final_table_count > ( SELECT MIN(final_table_count) FROM player_stats );
SELECT MAX(T2.final_tables) FROM poker_player AS T1 INNER JOIN player_stats AS T2 ON T1.player_id = T2.player_id WHERE T1.earnings < 200000;
SELECT name FROM poker_player;
SELECT name FROM poker_player;
SELECT name FROM poker_player WHERE earnings > 300000;
SELECT p.name FROM player AS p JOIN poker_player AS pp ON p.id = pp.player_id WHERE pp.earnings > 300000;
SELECT name FROM poker_player ORDER BY final_tables ASC;
SELECT p.name FROM player p JOIN poker_player pp ON p.id = pp.player_id GROUP BY pp.player_id ORDER BY COUNT(pp.final_table) ASC;
SELECT T1.birth_date FROM poker_player AS T1 INNER JOIN earnings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.earnings ASC LIMIT 1;
SELECT T2.birth_date FROM poker_player AS T1 INNER JOIN player AS T2 ON T1.player_id = T2.player_id ORDER BY T1.earnings LIMIT 1;
SELECT money_rank FROM poker_player WHERE height = ( SELECT MAX(height) FROM poker_player );
SELECT MAX(MoneyRank) FROM Player WHERE Height = ( SELECT MAX(Height) FROM Player );
SELECT AVG(T1.earnings) FROM poker_player AS T1 INNER JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.height > 200
SELECT AVG (Earnings) FROM Player WHERE Height > 200;
SELECT name FROM poker_player ORDER BY earnings DESC;
SELECT name FROM poker_player ORDER BY earnings DESC;
SELECT nationality, COUNT(*) FROM people GROUP BY nationality;
SELECT COUNT(*) , nationality FROM people GROUP BY nationality;
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1;
SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1;
SELECT T2.nationality FROM people AS T1 INNER JOIN nationality AS T2 ON T1.id = T2.id GROUP BY T2.nationality HAVING COUNT(T1.id) > 1;
SELECT nationality FROM people GROUP BY nationality HAVING COUNT(*) >= 2;
SELECT name, birth_date FROM people ORDER BY name ASC;
SELECT name, birth_date FROM people ORDER BY name;
SELECT name FROM people WHERE nationality != 'Russia';
SELECT name FROM people WHERE nationality != 'Russian'
SELECT name FROM people WHERE id NOT IN (SELECT player_id FROM poker_player)
SELECT name FROM people WHERE id NOT IN (SELECT player_id FROM poker)
SELECT COUNT(DISTINCT nationality) FROM people
SELECT COUNT(DISTINCT nationality) FROM people
SELECT COUNT(DISTINCT state) FROM states;
SELECT contestant_number, name FROM contestants ORDER BY name DESC
SELECT vote_id, phone_number, state FROM votes
SELECT MAX(area_code), MIN(area_code) FROM calls;
SELECT MAX(vote_id) FROM votes WHERE state = 'CA';
SELECT name FROM contestants WHERE name != 'Jessie Alloway';
SELECT DISTINCT state, create_time FROM votes;
SELECT c.contestant_number, c.name FROM contestants c JOIN votes v ON c.contestant_number = v.contestant_number GROUP BY v.contestant_number HAVING COUNT(v.votecast) >= 2
SELECT contestant_number, name FROM contestants WHERE votes = ( SELECT MIN(votes) FROM contestants );
SELECT COUNT(votes_id) FROM votes WHERE state IN ('NY', 'CA')
SELECT COUNT(*) FROM CONTESTANTS WHERE id NOT IN (SELECT contestant_id FROM VOTES)
SELECT area_code FROM VOTERS GROUP BY area_code ORDER BY COUNT(vote_id) DESC LIMIT 1;
SELECT create_date, state, phone_number FROM votes WHERE contestant = 'Tabatha Gehling';
SELECT area_code FROM contestants WHERE name = 'Tabatha Gehling' INTERSECT SELECT area_code FROM contestants WHERE name = 'Kelly Clauss';
SELECT T1.name FROM contestants AS T1 INNER JOIN contestants_numberevent AS T2 ON T1.id = T2.contestant_id WHERE T2.event_name LIKE '%Al%'
SELECT T2.name FROM COUNTRY AS T1 INNER JOIN INDEPENDENTLY AS T2 ON T1.id = T2.country_id WHERE T2.independence_date > '1950-01-01'
SELECT T1.name FROM country AS T1 INNER JOIN nationality AS T2 ON T1.code = T2.country_code WHERE T2.founding_date > '1950-01-01'
SELECT COUNT(*) FROM country WHERE government_form = 'republic'
SELECT COUNT(*) FROM country WHERE government_type = 'republic'
SELECT SUM(T2.area * T1.surface_area) FROM country AS T1 INNER JOIN surface_area AS T2 ON T1.code = T2.country_code WHERE T2.region IN ('C', 'NAMe', 'CONtinent', 'REGioN') AND T2.name IN ('Caribbean');
SELECT SUM(Area) FROM Country
SELECT T2.continent FROM COUNTRY AS T1 INNER JOIN CONTINENT AS T2 ON T1.id = T2.id WHERE T1.name = 'Anguilla';
SELECT T2.name FROM COUNTRY AS T1 INNER JOIN CONTINENT AS T2 ON T1.continent_id = T2.id WHERE T1.code = 'ASIA'
SELECT region FROM city WHERE name = 'Kabul';
SELECT region FROM cities WHERE name = 'Kabul';
SELECT T2.name FROM COUNTRY AS T1 INNER JOIN LANGUAGE AS T2 ON T1.code = T2.country_code WHERE T1.name = 'Aruba' ORDER BY T2.population DESC LIMIT 1;
SELECT language FROM COUNTRY WHERE name = 'Aruba'
SELECT T1.population, T2.life_expectancy FROM Country AS T1 INNER JOIN LifeExpectancy AS T2 ON T1.code = T2.country_code WHERE T1.name = 'Brazil';
SELECT T1.population, T2.life_expectancy FROM Country AS T1 INNER JOIN LifeExpectancy AS T2 ON T1.code = T2.country_code WHERE T1.name = 'Brazil'
SELECT T2.region, T1.population FROM Country AS T1 INNER JOIN Region AS T2 ON T1.id = T2.id WHERE T1.name = 'Angola';
SELECT T2.region, T1.population FROM country AS T1 INNER JOIN region AS T2 ON T1.code = T2.code WHERE T1.name = 'Angola';
SELECT AVG(life_expectancy) FROM country WHERE region = 'Central Africa'
SELECT AVG(life_expectancy) FROM Central_Africa WHERE continent = 'People';
SELECT T2.name FROM life_expectancy AS T1 INNER JOIN country AS T2 ON T1.country = T2.code WHERE T1.life_expectancy = ( SELECT MIN(life_expectancy) FROM life_expectancy ) AND T1.region = 'Asia';
SELECT T2.name FROM life_expectancy AS T1 INNER JOIN country AS T2 ON T1.country = T2.code WHERE T1.defaulthealthexpectancy < ( SELECT MIN(defaulthealthexpectancy) FROM life_expectancy ) AND T2.region = 'Asia';
SELECT SUM(T2.population), MAX(T2.GNP) FROM Country AS T1 INNER JOIN Asia AS T2 ON T1.code = T2.code
SELECT COUNT(T2.name) ,  MAX(T1.GNP) FROM Country AS T1 INNER JOIN Asia AS T2 ON T1.code = T2.asia_code
SELECT AVG(life_expectancy) FROM country WHERE continent = 'Africa' AND government_type = 'republic'
SELECT AVG(life_expectancy) FROM country WHERE continent = 'Africa' AND government_type = 'republic'
SELECT SUM(T1.area * T2.factor) FROM Continents AS T1 INNER JOIN SurfaceAreas AS T2 ON T1.id = T2.continent_id WHERE T1.name IN ('Asia', 'Europe')
SELECT SUM(f.lifexpcaty * f.floataufl) FROM country AS T1 INNER JOIN surfacearea AS T2 ON T1.code = T2.code WHERE T1.name IN ('Asia', 'Europe')
SELECT COUNT(*) FROM Gelderland WHERE population > 0;
SELECT SUM(T2.population) FROM districts AS T1 INNER JOIN counties AS T2 ON T1.id = T2.id WHERE T1.name = 'Gelderland';
SELECT AVG(GNP) ,  SUM(population) FROM country WHERE government = 'US territory'
SELECT AVG(GNP) ,  SUM(population) FROM country WHERE territory = 'US'
SELECT COUNT(DISTINCT language) FROM Country
SELECT COUNT(DISTINCT language) FROM Country
SELECT COUNT(DISTINCT T2.name) FROM T1 AS T1 INNER JOIN T2 ON T1.id = T2.id WHERE T2.type IN ('Government', 'NULLENT');
SELECT COUNT(DISTINCT T2.name) FROM T1 AS T1 INNER JOIN T2 ON T1.id = T2.id WHERE T2.type IN ('NULLEDDEFUALT', 'NOTNULL') AND T2.name IN ('COUNTRYSIDE', 'NAME', 'REGION', 'SURFACEAREA', 'INDIGENOUS', 'POPULATION', 'LIFEXPECTANCY', 'GNP', 'GNPOLD', 'GOVERNMENT', 'HEADSOFSTATE', 'CAPITAL')
SELECT COUNT(T2.name) FROM COUNTRY AS T1 INNER JOIN LANGUAGE AS T2 ON T1.code = T2.country_code WHERE T1.name = 'Aruba';
SELECT COUNT(T2.name) FROM T1 AS T1 INNER JOIN T2 AS T2 ON T1.id = T2.id WHERE T2.language IN ('Aruba')
SELECT COUNT(DISTINCT T2.name) FROM T1 AS T1 INNER JOIN T2 AS T2 ON T1.id = T2.id WHERE T2.type = 'official_language' AND T2.value IN ('Afghan', 'Pashto', 'Dari')
SELECT COUNT(DISTINCT T2.name) FROM T1 AS T1 INNER JOIN T2 AS T2 ON T1.id = T2.id WHERE T2.category IN ('official_language', 'Afghanistan') AND T2.value IN (3, 5, 26);
SELECT T2.name FROM country AS T1 INNER JOIN language AS T2 ON T1.code = T2.country_code WHERE T2.num_languages IS (3)
SELECT T1.nation FROM language AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id GROUP BY T1.nation ORDER BY COUNT(T1.language_id) DESC LIMIT 1;
SELECT c.continent, COUNT(c.country) AS num_countries FROM country c JOIN continent con ON c.continent = con.name GROUP BY c.continent ORDER BY num_countries DESC LIMIT 1;
SELECT c.continent, COUNT(c.country) FROM country AS c JOIN language AS l ON c.code = l.country GROUP BY c.continent ORDER BY COUNT(l.name) DESC LIMIT 1;
SELECT COUNT DISTINCT T2.country FROM COUNTRY AS T1 INNER JOIN LANGUAGE AS T2 ON T1.code = T2.country WHERE T2.name IN ('English', 'Dutch')
SELECT COUNT(DISTINCT T2.nation) FROM COUNTRY AS T1 INNER JOIN LANGUAGE AS T2 ON T1.code = T2.country_code WHERE T2.language = 'English' AND T2.dutch_language = 'Dutch';
SELECT T1.name FROM country AS T1 INNER JOIN language AS T2 ON T1.code = T2.country_code WHERE T2.language_name IN ('English', 'French')
SELECT T1.name FROM language AS T1 INNER JOIN country AS T2 ON T1.code = T2.code WHERE T1.english = 1 AND T1.french = 1;
SELECT T1.name FROM country AS T1 INNER JOIN language AS T2 ON T1.code = T2.country_code WHERE T2.language_name IN ('English', 'French') GROUP BY T1.name HAVING COUNT(T2.language_name) > 1;
SELECT T1.name FROM country AS T1 INNER JOIN language AS T2 ON T1.code = T2.country_code WHERE T2.language IN ('English', 'French')
SELECT COUNT(DISTINCT T2.continent) FROM language AS T1 INNER JOIN continent AS T2 ON T1.continent = T2.name WHERE T1.language = 'Chinese';
SELECT COUNT DISTINCT T2.continent FROM COUNTRY AS T1 INNER JOIN CONTINENT AS T2 ON T1.continent = T2.name WHERE T1.language = 'Chinese'
SELECT T1.name FROM language AS T1 INNER JOIN region AS T2 ON T1.id = T2.language_id WHERE T1.name IN ('English', 'Dutch')
SELECT T1.name FROM language AS T1 INNER JOIN region AS T2 ON T1.id = T2.language_id WHERE T1.name IN ('Dutch', 'English')
SELECT T1.name FROM country AS T1 INNER JOIN language AS T2 ON T1.code = T2.country_code WHERE T2.language IN ('English', 'Dutch')
SELECT T1.name FROM country AS T1 INNER JOIN language AS T2 ON T1.code = T2.country_code WHERE T2.language IN ('English', 'Dutch')
SELECT Languague FROM language WHERE continent = 'Asia' ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.name FROM language AS T1 INNER JOIN country AS T2 ON T1.id = T2.language_id ORDER BY T2.asian_nations DESC LIMIT 1;
SELECT T1.name FROM country AS T1 INNER JOIN language AS T2 ON T1.code = T2.country_code WHERE T2.id IN ( SELECT T3.id FROM language AS T3 INNER JOIN country_language AS T4 ON T3.id = T4.language_id INNER JOIN country AS T5 ON T4.country_id = T5.code GROUP BY T3.name HAVING COUNT(T5.code) = 1 )
SELECT T1.name FROM country AS T1 INNER JOIN language AS T2 ON T1.code = T2.country_code WHERE T2.language_code IN ( SELECT T3.name FROM language AS T3 INNER JOIN country_language AS T4 ON T3.name = T4.language_name WHERE T4.country_id IN ( SELECT id FROM country WHERE government = 'republic' ) GROUP BY T3.name HAVING COUNT(T3.name) = 1 )
SELECT city FROM cities WHERE language = 'English' ORDER BY population DESC LIMIT 1;
SELECT city FROM cities WHERE population > ( SELECT MAX(population) FROM cities ) AND language = 'English';
SELECT T1.name, T2.population, T3.life_expectancy FROM country AS T1 INNER JOIN asian_country AS T2 ON T1.id = T2.country_id INNER JOIN life_expectancy AS T3 ON T2.id = T3.country_id ORDER BY T2.area DESC LIMIT 1;
SELECT T1.name, T2.population, T3.life_expectancy FROM Country AS T1 INNER JOIN AsianCountry AS T2 ON T1.id = T2.country_id INNER JOIN LifeExpectancy AS T3 ON T2.id = T3.country_id WHERE T2.asia = 'Asia' ORDER BY T2.area DESC LIMIT 1;
SELECT AVG(life_expectancy) FROM country WHERE language != 'English'
SELECT AVG(life_expectancy) FROM country WHERE language != 'English'
SELECT COUNT(*) FROM nation AS n INNER JOIN language AS l ON n.nationkey = l.nationkey WHERE l.languagekey NOT IN ( SELECT languagekey FROM language WHERE name = 'English' )
SELECT COUNT(*) FROM country WHERE language != 'English'
SELECT T1.name FROM country AS T1 INNER JOIN headofstate AS T2 ON T1.id = T2.country_id WHERE T2.head_of_state = 'Beatrix';
SELECT T1.name FROM country AS T1 INNER JOIN headofstate AS T2 ON T1.id = T2.country_id WHERE T2.name = 'Beatrix';
SELECT COUNT(DISTINCT T2.official_language) FROM COUNTRY AS T1 INNER JOIN OFFICIAL_LANGUAGE AS T2 ON T1.id = T2.country_id WHERE T1.founded_before = 1930;
SELECT COUNT(DISTINCT T2.official_language) FROM COUNTRY AS T1 INNER JOIN LANGUAGE AS T2 ON T1.name = T2.country WHERE T1.founded < 1930;
SELECT country FROM surface_area WHERE area > ( SELECT MAX(area) FROM surface_area WHERE continent = 'Europe' )
SELECT country FROM countries WHERE area > ( SELECT MAX(area) FROM countries WHERE region = 'Europe' )
SELECT country FROM africa WHERE population < ( SELECT MIN(population) FROM asia );
SELECT country FROM africa WHERE population < ( SELECT MIN(population) FROM asia );
SELECT country FROM asian_country WHERE population > (SELECT MAX(population) FROM african_country);
SELECT T2.name FROM country AS T1 INNER JOIN asian_country AS T2 ON T1.id = T2.country_id WHERE T1.population > ( SELECT MIN(population) FROM country WHERE continent = 'Africa' )
SELECT country_code FROM countries WHERE language != 'English'
SELECT country_code FROM countries WHERE language != 'English'
SELECT country_code FROM country WHERE language != 'English'
SELECT country_code FROM countries WHERE language_id NOT IN (3, 30)
SELECT T1.code FROM country AS T1 INNER JOIN language AS T2 ON T1.id = T2.country_id INNER JOIN government_form AS T3 ON T1.id = T3.country_id WHERE T2.name NOT IN ('English') AND T3.name NOT IN ('Republic')
SELECT code FROM country WHERE language != 'English' AND government != 'Republic';
SELECT city FROM cities WHERE country IN ('Germany', 'France', 'Spain') AND language != 'English';
SELECT T2.name FROM CITIES AS T1 INNER JOIN LANGUAGES AS T2 ON T1.id = T2.city_id WHERE T2.language NOT IN ('English')
SELECT DISTINCT T1.city FROM COUNTRY AS T1 INNER JOIN LANGUAGE AS T2 ON T1.id = T2.country_id WHERE T2.name = 'Chinese' AND T1.region IN ('Asia', 'Oceania')
SELECT DISTINCT city FROM cities WHERE continent = 'Asia' AND language = 'Chinese';
SELECT name, independence_year, surface_area FROM country ORDER BY population ASC LIMIT 1;
SELECT T1.name, T2.year_of_independence, T3.surface_area FROM country AS T1 INNER JOIN independence AS T2 ON T1.id = T2.country_id INNER JOIN surface_area AS T3 ON T1.id = T3.country_id ORDER BY T1.population ASC LIMIT 1;
SELECT T1.population, T2.name, T3.leader FROM country AS T1 INNER JOIN area AS T2 ON T1.id = T2.country_id INNER JOIN defaulter AS T3 ON T1.id = T3.country_id ORDER BY T2.area DESC LIMIT 1;
SELECT T1.name, T2.population, T3.head_of_state FROM country AS T1 INNER JOIN area AS T2 ON T1.code = T2.country_code INNER JOIN defaulter AS T3 ON T1.code = T3.country_code ORDER BY T2.area DESC LIMIT 1;
SELECT T2.country, COUNT(T1.language) FROM language AS T1 INNER JOIN country AS T2 ON T1.country = T2.name WHERE T1.count > 3 GROUP BY T2.name
SELECT T1.name, COUNT(T2.lang) FROM country AS T1 INNER JOIN language AS T2 ON T1.code = T2.country_code WHERE T2.num_languages > 2 GROUP BY T1.name;
SELECT COUNT(DISTINCT c.id) FROM city AS c JOIN district AS d ON c.district_id = d.id WHERE c.population > (SELECT AVG(population) FROM city);
SELECT COUNT(*) FROM city WHERE population > ( SELECT AVG(population) FROM city );
SELECT T1.name, SUM(T2.population) FROM government_form AS T1 INNER JOIN life_expectancy AS T2 ON T1.id = T2.government_form_id WHERE T2.average_life_expectancy > 72 GROUP BY T1.name;
SELECT T1.name, AVG(T2.life_expectancy) FROM government_forms AS T1 JOIN life_expectancies AS T2 ON T1.id = T2.government_form_id WHERE T2.life_expectancy > 72 GROUP BY T1.name;
SELECT AVG(life_expectancy) ,  SUM(population) FROM continent WHERE life_expectancy < (72 / 2)
SELECT c.continent, SUM(p.population) AS total_population, AVG(l.life_expectancy) AS average_life_expectancy FROM country c JOIN population p ON c.code = p.country_code JOIN life_expectancy l ON p.code = l.country_code WHERE l.average_life_expectancy < 72 GROUP BY c.continent
SELECT T1.name, T2.area FROM country AS T1 INNER JOIN area AS T2 ON T1.id = T2.country_id ORDER BY T2.area DESC LIMIT 5;
SELECT T1.name, (T2.surface_area * pi()) AS surface_area FROM country AS T1 INNER JOIN area AS T2 ON T1.code = T2.country_code ORDER BY T2.surface_area DESC LIMIT 5;
SELECT T1.name FROM country AS T1 INNER JOIN population AS T2 ON T1.code = T2.country ORDER BY T2.population DESC LIMIT 3;
SELECT T1.name FROM country AS T1 INNER JOIN population AS T2 ON T1.code = T2.country ORDER BY T2.population DESC LIMIT 3;
SELECT T1.name FROM nations AS T1 INNER JOIN population AS T2 ON T1.id = T2.nation_id ORDER BY T2.population ASC LIMIT 3;
SELECT T1.name FROM country AS T1 INNER JOIN population AS T2 ON T1.code = T2.country ORDER BY T2.population ASC LIMIT 3;
SELECT COUNT(*) FROM country WHERE continent = 'Asia';
SELECT COUNT(*) FROM Asia;
SELECT T2.name FROM country AS T1 INNER JOIN continent AS T2 ON T1.continent_id = T2.id WHERE T2.name = 'Europe' AND T1.population = 80000;
SELECT T2.name FROM COUNTRY AS T1 INNER JOIN POPULATION AS T2 ON T1.code = T2.country WHERE T2.population = 80000 AND T1.region IN ('Europe')
SELECT SUM(T2.population) ,  AVG(T2.area) FROM country AS T1 INNER JOIN continent AS T2 ON T1.continent = T2.name WHERE T2.name = 'North America' AND T1.area > 3000;
SELECT SUM(T2.population), AVG(T2.surface_area) FROM country AS T1 INNER JOIN surface_area AS T2 ON T1.code = T2.country_code WHERE T2.area > 3000 AND T1.region IN ('North America')
SELECT city FROM cities WHERE population BETWEEN 160000 AND 900000;
SELECT city FROM cities WHERE population BETWEEN 160000 AND 900000;
SELECT language FROM country_language WHERE num_countries = ( SELECT MAX(num_countries) FROM country_language );
SELECT language FROM country_language WHERE num_countries = ( SELECT MAX(num_countries) FROM country_language );
SELECT T1.country, T2.language FROM country AS T1 INNER JOIN language AS T2 ON T1.code = T2.country_code GROUP BY T1.code ORDER BY COUNT(T2.id) DESC LIMIT 1;
SELECT T1.country_code, T2.language_name FROM country AS T1 INNER JOIN language AS T2 ON T1.country_code = T2.country_code GROUP BY T1.country_code ORDER BY COUNT(T2.language_id) DESC LIMIT 10;
SELECT COUNT(*) FROM country_language WHERE language = 'Spanish' AND percentage > ( SELECT MAX(percentage) FROM country_language );
SELECT COUNT(DISTINCT country) FROM Country WHERE language = 'Spanish'
SELECT T1.code FROM Country AS T1 INNER JOIN Language AS T2 ON T1.code = T2.country_code WHERE T2.name IN ('Spanish', 'Castilian') GROUP BY T1.code ORDER BY SUM(T2.frequency) DESC LIMIT 1;
SELECT country FROM country_language WHERE language = 'Spanish'
SELECT COUNT(Co conductor_id) FROM CTE
SELECT COUNT(*) FROM Conductors
SELECT name FROM conductor WHERE age IN (1, 2, 3) ORDER BY age ASC;
SELECT name FROM conductor ORDER BY age;
SELECT name FROM conductor WHERE nationality != 'USA'
SELECT name FROM conductor WHERE nationality != 'USA'
SELECT T2.record_company FROM orchestras AS T1 INNER JOIN record_companies AS T2 ON T1.id = T2.orchestra_id ORDER BY T2.founded_year DESC;
SELECT T2.record_company FROM orchestras AS T1 INNER JOIN record_companies AS T2 ON T1.id = T2.orchestra_id ORDER BY T2.founded_year DESC;
SELECT AVG(T attendance) FROM S shows;
SELECT AVG(T.attendance) FROM Schedules
SELECT MAX(CASE WHEN type != 'Live final' THEN share_of_performance END), MIN(CASE WHEN type != 'Live final' THEN share_of_performance END) FROM performances
SELECT MAX(shares) ,  MIN(shares) FROM performances WHERE type NOT LIKE 'Live final';
SELECT COUNT(DISTINCT nationality) FROM conductor
SELECT COUNT(DISTINCT nationality) FROM conductor
SELECT name FROM conductor WHERE years_of_work DESC
SELECT name FROM conductor WHERE years_worked DESC
SELECT conductor_name FROM conductor WHERE years_of_work = ( SELECT MAX(years_of_work) FROM conductor );
SELECT conductor_name FROM conductor WHERE years_worked = ( SELECT MAX(years_worked) FROM conductor );
SELECT T1.name, T2.orchestra FROM conductors AS T1 INNER JOIN concerts AS T2 ON T1.id = T2.conductor_id
SELECT T1.name, T2.orchestra FROM conductors AS T1 INNER JOIN orchestras AS T2 ON T1.id = T2.conductor_id
SELECT c.Conductor_ID FROM Conductors AS c JOIN Orchestras AS o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID HAVING COUNT(o.orchestra_ID) > 1;
SELECT DISTINCT conductor_id FROM orchestra WHERE conductor_id IN ( SELECT conductor_id FROM orchestra GROUP BY conductor_id HAVING COUNT(*) > 1 );
SELECT conductor_id FROM orchestras GROUP BY conductor_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT conductor_id FROM orchestras GROUP BY conductor_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.name FROM CREATORTABLE AS T1 INNER JOIN Conductors AS T2 ON T1.id = T2.conductor_id WHERE T1.founded_after = 2008;
SELECT c.ConductorID, c.Name FROM Conductors c JOIN Orchestras o ON c.ConductorID = o.ConductorID WHERE o.FoundingYear > 2008
SELECT DISTINCT r.name, COUNT(o.id) FROM record_company AS r JOIN orchestra AS o ON r.id = o.record_company_id GROUP BY r.name;
SELECT COUNT(DISTINCT T2.id) FROM T1 AS T1 INNER JOIN T2 ON T1.id = T2.orchestra_id GROUP BY T1.id;
SELECT format, COUNT(*) FROM orchestras GROUP BY format ORDER BY COUNT(*) ASC;
SELECT format, COUNT(*) FROM orchestras GROUP BY format ORDER BY COUNT(*) DESC;
SELECT record_company FROM orchestras GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1;
SELECT T2.record_company FROM orchestras AS T1 INNER JOIN record_companies AS T2 ON T1.id = T2.orchestra_id GROUP BY T2.record_company ORDER BY COUNT(T1.id) DESC LIMIT 1;
SELECT name FROM orchestras WHERE id IN (SELECT id FROM performances)
SELECT orchestra_id FROM orchestras WHERE id NOT IN ( SELECT orchestra_id FROM performances );
SELECT T2.name FROM orchestras AS T1 INNER JOIN record_companies AS T2 ON T1.id = T2.orchestra_id WHERE T1.founded < '2003-01-01' AND T1.founded > '2003-12-31';
SELECT T2.record_company FROM orchestras AS T1 INNER JOIN record_company AS T2 ON T1.id = T2.orchestra_id WHERE T1.founded < '2003' INTERSECT SELECT T2.record_company FROM orchestras AS T1 INNER JOIN record_company AS T2 ON T1.id = T2.orchestra_id WHERE T1.founded > '2003';
SELECT COUNT(*) FROM orchestras WHERE record_format IN ('CD', 'DVD')
SELECT COUNT(DISTINCT T2.orchestra_id) FROM C AS T1 INNER JOIN ORCHESTRA AS T2 ON T1.id = T2.id WHERE T1.record_format IN ('CD', 'DVD')
SELECT YEAR FROM ORCHESTRA_ID WHERE COUNT(*) > 1 GROUP BY YEAR;
SELECT YEAR(FoundingID) FROM Orchestras WHERE PerformanceID IN ( SELECT PerformanceID FROM Orchestras WHERE NumberofPerformances > 1 )
SELECT COUNT(*) FROM highschooler;
SELECT COUNT(*) FROM highschooler
SELECT name, grade FROM high_schooler
SELECT name, grade FROM students
SELECT grade FROM grades
SELECT grade FROM high_schooler
SELECT grade FROM grades WHERE name = 'Kyle'
SELECT grade FROM high_schooler WHERE name = 'Kyle';
SELECT name FROM students WHERE grade = 10;
SELECT name FROM students WHERE grade = 10;
SELECT ID FROM high_schooler WHERE name = 'Kyle';
SELECT id FROM users WHERE name = 'Kyle';
SELECT COUNT(*) FROM students WHERE grade IN (9, 10)
SELECT COUNT(*) FROM students WHERE grade IN (9, 10)
SELECT COUNT(*) ,  grade FROM students GROUP BY grade;
SELECT COUNT(*) , grade FROM highschooler GROUP BY grade;
SELECT grade FROM grades WHERE count = ( SELECT MAX(count) FROM grades );
SELECT grade FROM grades WHERE count = ( SELECT MAX(count) FROM grades );
SELECT grade FROM grades GROUP BY grade HAVING COUNT(student_id) >= 4;
SELECT grade FROM grades WHERE count = 4;
SELECT student_id, COUNT(friend_id) FROM friends GROUP BY student_id;
SELECT COUNT(friend_id) FROM friends WHERE student_id IN (SELECT id FROM students);
SELECT T1.name, COUNT(T2.friend_id) FROM students AS T1 INNER JOIN friends AS T2 ON T1.student_id = T2.student_id GROUP BY T1.name
SELECT T1.name, COUNT(T2.friend_id) FROM students AS T1 INNER JOIN friends AS T2 ON T1.id = T2.student_id GROUP BY T1.name;
SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.highschool_id GROUP BY f.highschool_id ORDER BY COUNT(friend_id) DESC LIMIT 1;
SELECT T1.name FROM students AS T1 INNER JOIN friends AS T2 ON T1.id = T2.student_id GROUP BY T1.id ORDER BY COUNT(T2.friend_id) DESC LIMIT 1;
SELECT T1.name FROM students AS T1 JOIN friends AS T2 ON T1.id = T2.student_id GROUP BY T1.id HAVING COUNT(T2.friend_id) >= 3
SELECT T1.name FROM Students AS T1 JOIN Friends AS T2 ON T1.id = T2.student_id GROUP BY T1.id HAVING COUNT(T2.friend_id) >= 3
SELECT T2.name FROM friends AS T1 INNER JOIN highschooler AS T2 ON T1.friend_id = T2.id WHERE T2.name = 'Kyle'
SELECT T1.name FROM friends AS T1 JOIN highschool AS T2 ON T1.friend_id = T2.student_id WHERE T2.student_name = 'Kyle';
SELECT COUNT(friend_id) FROM high_school_student WHERE student_id = 'Kyle';
SELECT COUNT(friend_id) FROM friends WHERE name = 'Kyle';
SELECT id FROM students WHERE friends_id IS NULL;
SELECT id FROM students WHERE friends_id IS NULL;
SELECT name FROM students WHERE friends = ''
SELECT name FROM students WHERE friends_id IS NULL;
SELECT T1.id FROM friends AS T1 INNER JOIN highschooler AS T2 ON T1.friend_id = T2.id WHERE T1.friend_id IN ( SELECT friend_id FROM highschooler ) AND T2.id NOT IN ( SELECT liked_id FROM highschooler );
SELECT T1.id FROM students AS T1 JOIN friends AS T2 ON T1.id = T2.student_id WHERE T2.friend_id IS NOT NULL AND T1.id IN ( SELECT friend_id FROM friends )
SELECT T1.name FROM Students AS T1 INNER JOIN Friends AS T2 ON T1.id = T2.student_id WHERE T2.friend_id IS NOT NULL AND T1.id NOT IN ( SELECT friend_id FROM Friends )
SELECT T1.name FROM Students AS T1 INNER JOIN Friends AS T2 ON T1.id = T2.student_id INNER JOIN Likes AS T3 ON T1.id = T3.student_id WHERE T2.friend_id IS NOT NULL AND T3 liked_id IS NOT NULL
SELECT COUNT(*) , s.student_id FROM likes l JOIN students s ON l.student_id = s.student_id GROUP BY s.student_id;
SELECT COUNT(*) ,  s.student_id FROM likes AS l JOIN students AS s ON l.student_id = s.student_id GROUP BY s.student_id;
SELECT T1.name, COUNT(T2.id) FROM students AS T1 INNER JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T1.name
SELECT T1.name, COUNT(T2.id) FROM students AS T1 INNER JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T1.name;
SELECT T1.name FROM students AS T1 INNER JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T2.student_id ORDER BY COUNT(T2.like_id) DESC LIMIT 1;
SELECT T1.name FROM students AS T1 INNER JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T2.student_id ORDER BY COUNT(T2.like_id) DESC LIMIT 1;
SELECT T1.name FROM students AS T1 JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T1.id HAVING COUNT(T2.like_id) >= 2;
SELECT T1.name FROM students AS T1 JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T1.id HAVING COUNT(T2.like_id) >= 2;
SELECT T1.name FROM Students AS T1 JOIN Friends AS T2 ON T1.id = T2.student_id WHERE T1.grade > 5 GROUP BY T1.id HAVING COUNT(T2.friend_id) >= 2
SELECT T1.name FROM students AS T1 JOIN friends AS T2 ON T1.id = T2.student_id WHERE T1.grade > 5 AND T2.friend_count >= 2;
SELECT likes FROM users WHERE name = 'Kyle';
SELECT COUNT(T1.likes) FROM HighSchooler AS T1 INNER JOIN Likes AS T2 ON T1.ID = T2.high_school_id WHERE T1.name = 'Kyle';
SELECT AVG(T1.grade) FROM Students AS T1 INNER JOIN Friends AS T2 ON T1.student_id = T2.student_id WHERE T2.friend_id IS NOT NULL
SELECT AVG(T1.grade) FROM Students AS T1 INNER JOIN Friends AS T2 ON T1.student_id = T2.student_id WHERE T2.friend_id IS NOT NULL;
SELECT MIN(T1.grade) FROM Students AS T1 INNER JOIN Friends AS T2 ON T1.id = T2.student_id WHERE T2.friend_id IS NULL;
SELECT MIN(HighSchoolStudent.id) FROM HighSchoolStudent WHERE FriendID IS NULL;
SELECT T1.state FROM owners AS T1 INNER JOIN professionals AS T2 ON T1.state = T2.state
SELECT T1.state FROM owners AS T1 INNER JOIN professionals AS T2 ON T1.id = T2.owner_id WHERE T1.address IN ( SELECT address FROM addresses ) AND T2.address IN ( SELECT address FROM addresses );
SELECT AVG(T1.age) FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.id = T2.dog_id WHERE T2.type IN ('breed_code', 'size_code')
SELECT AVG(T1.VARCHAR(50)) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.id = T2.dog_id
SELECT T1.id, T2.last_name, T2.cell_phone FROM professionals AS T1 INNER JOIN treatment AS T2 ON T1.id = T2.professional_id WHERE T2.treatment_id IN (10, 50, 60, 20) OR T2.treatment_id IN (30);
SELECT T1.id, T2.last_name, T3.cell_phone FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.id = T2.professional_id INNER JOIN appointments AS T3 ON T2.appointment_id = T3.appointment_id WHERE T2.treatment_id IN (5, 50) OR T1.state_id = 'IN'
SELECT d.name FROM dogs AS d JOIN treatments AS t ON d.id = t.dog_id WHERE t.cost < 1000
SELECT d.dog_id FROM dogs AS d JOIN owners AS o ON d.owner_id = o.owner_id JOIN treatments AS t ON d.dog_id = t.dog_id WHERE t.treatment_cost <= 1000;
SELECT DISTINCT first_name FROM owners WHERE first_name NOT IN ( SELECT first_name FROM dogs );
SELECT DISTINCT first_name FROM owners JOIN professionals ON owners.id = professionals.owner_id WHERE professionals.name NOT IN (SELECT name FROM dogs)
SELECT id, role, email FROM professionals WHERE id NOT IN (SELECT professional_id FROM treatments)
SELECT T1.id, T2.role, T3.email FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.id = T2.professional_id INNER JOIN treatment_names AS T3 ON T2.name_id = T3.id WHERE T3.name NOT IN ('treatment', 'date', 'cost', 'foreing')
SELECT owner_id, first_name, last_name FROM owners WHERE owner_id IN ( SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT owner_id, first_name, last_name FROM owners WHERE owner_id IN ( SELECT owner_id FROM dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT T1.id, T2.role, T3.first_name FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.id = T2.professional_id INNER JOIN treatment_varchar AS T3 ON T2.treatment_id = T3.treatment_id GROUP BY T1.id HAVING COUNT(T3.treatment_id) >= 2
SELECT T1.id, T2.role, T3.first_name FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.id = T2.professional_id INNER JOIN treatment_varchars AS T3 ON T2.treatment_id = T3.treatment_id WHERE T3.value IN (20, 50, 60, 70, 200) GROUP BY T1.id HAVING COUNT(T2.treatment_id) >= 2
SELECT breed FROM breeds WHERE COUNT(breed) = ( SELECT MAX(breed) FROM breeds );
SELECT breed FROM dogs WHERE id IN ( SELECT id FROM breeds ) GROUP BY breed ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.owner_id, T2.last_name FROM owners AS T1 INNER JOIN treatments AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY COUNT(T2.treatment_id) DESC LIMIT 1;
SELECT owner_id, last_name FROM owners WHERE total_dog_treatment_cost = ( SELECT MAX(total_dog_treatment_cost) FROM owners )
SELECT t1.description FROM treatments AS t1 INNER JOIN treatment_types AS t2 ON t1.id = t2.treatment_id ORDER BY t2.cost DESC LIMIT 1;
SELECT t1.treatment_type FROM treatments AS t1 INNER JOIN treatment_types AS t2 ON t1.treatment_type = t2.name WHERE t2.value = ( SELECT MIN(t2.value) FROM treatment_types )
SELECT owner_id, zip_code FROM dogs WHERE SUM(breed_cost) = ( SELECT MAX(SUM(breed_cost)) FROM dogs )
SELECT owner_id, zip_code FROM dogs WHERE total_amount = ( SELECT MAX(total_amount) FROM dogs );
SELECT T1.professional_id, T2.cell_phone FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_name) >= 2
SELECT T1.id, T2.cell_phone FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.id = T2.professional_id GROUP BY T1.id HAVING COUNT(DISTINCT T2.treatment_name) >= 2
SELECT T1.first_name, T1.last_name FROM professionals AS T1 INNER JOIN treatment AS T2 ON T1.id = T2.professional_id WHERE T2.cost < (SELECT AVG(cost) FROM treatment)
SELECT T1.first_name, T1.last_name FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.id = T2.professional_id WHERE T2.cost < (SELECT AVG(cost) FROM treatments)
SELECT T2.date, T1.first_name FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.id = T2.professional_id
SELECT T1.date, T2.first_name FROM treatments AS T1 INNER JOIN professionals AS T2 ON T1.professional_id = T2.id
SELECT t.treatment_cost, t.treatment_type_description FROM treatments AS t INNER JOIN treatment_types AS tt ON t.id = tt.id WHERE tt.name IN ('treatment_name_type', 'treatment_name_type_descriptive')
SELECT cost, treatment_type_description FROM treatments;
SELECT T1.first_name, T1.last_name, T2.size FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id
SELECT T1.first_name, T1.last_name, T2.size FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id
SELECT T1.first_name, T3.dog_name FROM owners AS T1 INNER JOIN dogs AS T3 ON T1.owner_id = T3.owner_id INNER JOIN breeds AS T2 ON T3.breed_id = T2.breed_id
SELECT T1.first_name, T3.name FROM owners AS T1 INNER JOIN dogs AS T3 ON T1.id = T3.owner_id INNER JOIN breeds AS T2 ON T3.breed_id = T2.id WHERE T2.name IN ('bred_code', 'breed_code')
SELECT T1.name, T2.treatment_date FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.id = T2.dog_id WHERE T2.treatment_date IN ( SELECT treatment_date FROM treatments GROUP BY treatment_date ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT T1.name, T2.treatment_date FROM dogs AS T1 INNER JOIN treatment AS T2 ON T1.id = T2.dog_id WHERE T2.treatment_date IN ( SELECT MIN(treatment_date) FROM treatment GROUP BY dog_id ) ORDER BY T2.treatment_date LIMIT 10;
SELECT T1.first_name, T1.dog_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'VA'
SELECT T1.first_name, T3.dog_name FROM owners AS T1 INNER JOIN dogs AS T3 ON T1.owner_id = T3.owner_id INNER JOIN Virginia AS T2 ON T1.virginia_id = T2.id WHERE T2.name = 'Virginia' AND T1.integener = 'primairy';
SELECT t1.arriving_date, t2.departing_date FROM dogs AS t1 INNER JOIN treatment AS t2 ON t1.dog_id = t2.dog_id WHERE t2.treatment_name IN ('treatment_1', 'treatment_10', 'treatment_50', 'treatment_60')
SELECT t1.arriving_date, t2.departure_date FROM dogs AS t1 INNER JOIN treatments AS t2 ON t1.id = t2.dog_id WHERE t2.treatment_type IN ('treatment', 'vaccination')
SELECT T1.last_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.youngest_date ASC LIMIT 1;
SELECT T1.last_name FROM dogs AS T1 INNER JOIN owners AS T2 ON T1.id = T2.dog_id ORDER BY T1.age ASC LIMIT 1;
SELECT T1.email FROM professionals AS T1 INNER JOIN INTENTEGRENER AS T2 ON T1.id = T2.professional_id WHERE T2.state IN ('Hawaii', 'Wisconsin')
SELECT email FROM professionals WHERE state IN ('Hawaii', 'Wisconsin')
SELECT arriving_date, departing_date FROM dogs
SELECT T1.arrival_date, T2.departure_date FROM dogs AS T1 INNER JOIN arrival_dates AS T2 ON T1.id = T2.dog_id;
SELECT COUNT(DISTINCT t1.dog_id) FROM treatments AS t1 INNER JOIN dogs AS t2 ON t1.dog_id = t2.dog_id WHERE t1.treatment_type IN ('treatment', 'profeissional', 'dog_id')
SELECT COUNT(treatment_id) FROM treatment
SELECT COUNT(DISTINCT t1.id) FROM treatments AS t1 INNER JOIN professionals AS t2 ON t1.prof_id = t2.id WHERE t1.treatment_type IN ('treatment_code', 'dog_id') AND t2.professionality IN ('professional', 'inspector', 'forensic', 'analyst');
SELECT COUNT(DISTINCT T1.id) FROM treatments AS T1 INNER JOIN professionals AS T2 ON T1.professional_id = T2.id INNER JOIN dogs AS T3 ON T1.dog_id = T3.id WHERE T3.id IN ( SELECT dog_id FROM treatments ) AND T2.role IN ('veterinarian', 'vet')
SELECT T1.role, T1.street, T1.city, T1.state FROM professionals AS T1 INNER JOIN addresses AS T2 ON T1.id = T2.professional_id WHERE T2.city LIKE '%West%'
SELECT T1.role, T1.street, T1.city, T1.state FROM professionals AS T1 INNER JOIN addresses AS T2 ON T1.id = T2.professional_id WHERE T2.city LIKE '%West%'
SELECT T1.first_name, T1.last_name, T1.email FROM owners AS T1 INNER JOIN addresses AS T2 ON T1.owner_id = T2.owner_id WHERE T2.state LIKE '%North%'
SELECT T1.first_name, T1.last_name, T1.email FROM owners AS T1 INNER JOIN states AS T2 ON T1.state_id = T2.id WHERE T2.name LIKE '%North%'
SELECT COUNT(DISTINCT d.id) FROM dogs AS d INNER JOIN ages AS a ON d.id = a.dog_id WHERE a.age < (SELECT AVG(age) FROM ages)
SELECT COUNT(DISTINCT d.id) FROM dogs AS d INNER JOIN dates AS dt ON d.id = dt.dog_id WHERE dt.date < (SELECT AVG(VARCHAR(10)) FROM dates)
SELECT MIN(treatment_cost) FROM treatments
SELECT t.treatment_cost FROM treatments AS t WHERE t.treatment_id = ( SELECT MAX(treatment_id) FROM treatments );
SELECT COUNT(DISTINCT d.id) FROM dogs AS d INNER JOIN treatments AS t ON d.id = t.dog_id WHERE t.treatment_name IN ('Vaccination (1)', 'Vaccination (100)', 'Vaccination (500)', 'Vaccination (200)', 'Treatment (1)', 'Treatment (2)', 'Treatment (3)') AND t.treatment_type NOT IN ('NUL', 'NAND');
SELECT COUNT(DISTINCT d.id) FROM dogs AS d INNER JOIN treatments AS t ON d.id = t.dog_id WHERE t.treatment_name IN ('Vaccination (1)', 'Vaccination (100)', 'Vaccination (500)', 'Vaccination (200)', 'Treatment (1)', 'Treatment (2)', 'Treatment (3)') AND t.treatment_type NOT IN ('NUL', 'NAND');
SELECT COUNT(DISTINCT owner_id) FROM dogs WHERE owner_id NOT IN (SELECT owner_id FROM owners)
SELECT COUNT(o.id) FROM owners o LEFT JOIN dogs d ON o.id = d.owner_id WHERE d.id IS NULL;
SELECT COUNT(DISTINCT t1.professional_id) FROM professionals AS t1 INNER JOIN treatments AS t2 ON t1.professional_id = t2.professional_id WHERE t2.treatment_name IN ('VACCHAR (100)', 'VACCHAR (50)', 'VACCHAR (50)', 'VACCHAR (50)', 'VACCHAR (20)', 'VACCHAR (20)', 'VACCHAR (50)', 'VACCHAR (50)', 'VACCHAR (30)', 'VACCHAR (20)')
SELECT COUNT(DISTINCT t1.professional_id) FROM professionals AS t1 INNER JOIN treats AS t2 ON t1.professional_id = t2.professional_id WHERE t2.dog_id IS NULL;
SELECT d.name, d.age, d.weight FROM dogs AS d JOIN abandoned AS a ON d.id = a.d_id WHERE a.abandoned = 1;
SELECT T1.dog_id, T2.name, T3.age, T4.weight FROM dogs AS T1 INNER JOIN details AS T2 ON T1.dog_id = T2.dog_id INNER JOIN characteristics AS T3 ON T1.dog_id = T3.dog_id INNER JOIN attributes AS T4 ON T1.dog_id = T4.dog_id WHERE T4.name IN ('abandoned', 'breed_code')
SELECT AVG(T1.age) FROM dogs AS T1 INNER JOIN breeds AS T2 ON T1.breed_id = T2.id
SELECT AVG(d.age) FROM dogs;
SELECT MAX(dog_id) FROM dogs
SELECT MAX(age) FROM dogs
SELECT charge_type, amount FROM charges;
SELECT charge_type, amount FROM charges;
SELECT MAX(charge_type) FROM charges
SELECT charge_amount FROM charges WHERE charge_type = ( SELECT MAX(charge_type) FROM charges );
SELECT email, cell_phone, home_phone FROM professionals
SELECT T1.email, T1.cell_phone, T1.home_phone FROM professionals AS T1 INNER JOIN professionals_id AS T2 ON T1.id = T2.id INNER JOIN variable_characteristic AS T3 ON T1.id = T3.id WHERE T3.name IN ('email', 'cell_phone', 'home_phone')
SELECT breed_type, size_type FROM breeds
SELECT DISTINCT breed_code, size_code FROM dogs
SELECT T1.first_name, T3.description FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.id = T2.professional_id INNER JOIN treatment_types AS T3 ON T2.type_id = T3.id WHERE T3.name IN ('Treatment', 'Diagnostic')
SELECT T1.first_name, T3.description FROM professional AS T1 INNER JOIN treatment AS T2 ON T1.id = T2.professional_id INNER JOIN treatment_type AS T3 ON T2.type_id = T3.id WHERE T3.name IN ('treatment', 'integrener')
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM Singer
SELECT name FROM singer ORDER BY net_worth ASC;
SELECT singer_name FROM Singer ORDER BY net_worth ASC;
SELECT birth_year, citizenship FROM singer WHERE nationality = 'Nam' AND birth_year IS NOT NULL;
SELECT birth_year, citizenship FROM singer
SELECT name FROM singer WHERE citizenship != 'France';
SELECT T1.name FROM Singer AS T1 INNER JOIN Citizen AS T2 ON T1.id = T2.singer_id WHERE T2.country != 'France';
SELECT name FROM singer WHERE birth_year IN (1948, 1949)
SELECT T1.name FROM singer AS T1 INNER JOIN birth_year AS T2 ON T1.id = T2.singer_id WHERE T2.birth_year IN (1948, 1949)
SELECT T1.name FROM Singer AS T1 INNER JOIN Net_Worth_Millions AS T2 ON T1.id = T2.singer_id ORDER BY T2.net_worth_millions DESC LIMIT 1;
SELECT T1.name FROM Singer AS T1 INNER JOIN Net_Worth AS T2 ON T1.id = T2.singer_id ORDER BY T2.net_worth DESC LIMIT 1;
SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship;
SELECT COUNT(*) FROM singer JOIN citizenship ON singer.citizen_id = citizenship.id GROUP BY citizenship.id;
SELECT T2.citizenship FROM singer AS T1 INNER JOIN citizenship AS T2 ON T1.id = T2.singer_id GROUP BY T2.citizenship ORDER BY COUNT(T2.citizenship) DESC LIMIT 1;
SELECT singer_citizenship FROM singers GROUP BY singer_citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship, MAX(net_worth) FROM singer GROUP BY citizenship;
SELECT MAX(net_worth) FROM citizens WHERE citizenship IN (SELECT name FROM countries);
SELECT T1.title, T2.name FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.id
SELECT song_title, singer_id FROM songs
SELECT DISTINCT T1.name FROM singer AS T1 INNER JOIN song AS T2 ON T1.singer_id = T2.singer_id WHERE T2.sales > 300000;
SELECT DISTINCT T1.name FROM Singer AS T1 INNER JOIN Sales AS T2 ON T1.singer_id = T2.singer_id WHERE T2.sales > 300000;
SELECT T1.name FROM singer AS T1 INNER JOIN song AS T2 ON T1.singer_id = T2.singer_id GROUP BY T1.name HAVING COUNT(T1.name) > 1;
SELECT T1.name FROM Singer AS T1 INNER JOIN Song AS T2 ON T1.singer_id = T2.singer_id GROUP BY T1.name HAVING COUNT(T1.name) > 1;
SELECT T1.name, SUM(T2.sales) FROM singer AS T1 INNER JOIN song AS T2 ON T1.singer_id = T2.singer_id GROUP BY T1.name;
SELECT SUM(sales) FROM singer WHERE id IN (SELECT id FROM song);
SELECT T1.name FROM Singer AS T1 INNER JOIN Song AS T2 ON T1.singer_id = T2.singer_id WHERE T2.id IS NULL;
SELECT sname FROM singer WHERE id NOT IN (SELECT id FROM song)
SELECT DISTINCT citizenship FROM singer WHERE birth_year BETWEEN 1945 AND 1955;
SELECT DISTINCT citizenship FROM singer WHERE birth_year BETWEEN 1945 AND 1955;
SELECT COUNT(DISTINCT feature_id) FROM features;
SELECT T2.feature_type_name FROM features AS T1 INNER JOIN feature_types AS T2 ON T1.id = T2.id WHERE T1.name = 'AirCon';
SELECT property_type_description FROM properties WHERE code IN (SELECT code FROM codes)
SELECT T1.property_name FROM properties AS T1 INNER JOIN houses AS T2 ON T1.id = T2.property_id INNER JOIN apartments AS T3 ON T1.id = T3.property_id WHERE T2.rooms > 1 OR T3.rooms > 1;