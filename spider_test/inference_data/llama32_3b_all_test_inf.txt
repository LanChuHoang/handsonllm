SELECT COUNT(*) FROM club;
SELECT COUNT(*) FROM club;
SELECT Name FROM club ORDER BY Name ASC
SELECT Name FROM club ORDER BY Name
SELECT Manager, Captain FROM club
SELECT Manager, Captain FROM club
SELECT Name FROM club WHERE Manufacturer != 'Nike'
SELECT Name FROM club WHERE Manufacturer != 'Nike'
SELECT Name FROM player ORDER BY Wins_count ASC
SELECT Name FROM player ORDER BY Wins_count ASC
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1;
SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1;
SELECT DISTINCT Country FROM player WHERE Earnings > 1200000;
SELECT Country FROM player WHERE Earnings > 1200000
SELECT Country FROM player WHERE Wins_count > 2 ORDER BY Earnings DESC LIMIT 1
SELECT T1.Country FROM player AS T1 INNER JOIN ( SELECT Player_ID, MAX(Wins_count) AS max_wins FROM player GROUP BY Player_ID ) AS T2 ON T1.Player_ID = T2.Player_ID WHERE T2.max_wins > 2 ORDER BY T2.max_wins DESC LIMIT 1
SELECT T1.Name, T2.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID
SELECT T1.Name, T2.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID
SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T2.Club_ID HAVING COUNT(T2.Wins_count) > 2
SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T2.Club_ID HAVING COUNT(T2.Wins_count) > 2
SELECT T1.Name FROM player AS T1 INNER JOIN club AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Manager = 'Sam Allardyce'
SELECT Name FROM player WHERE Club_ID = (SELECT Club_ID FROM club WHERE Manager = 'Sam Allardyce')
SELECT T1.Name FROM club AS T1 INNER JOIN ( SELECT Club_ID , AVG(Earnings) AS avg_earnings FROM player GROUP BY Club_ID ) AS T2 ON T1.Club_ID = T2.Club_ID ORDER BY T2.avg_earnings DESC;
SELECT T1.Name FROM club AS T1 INNER JOIN ( SELECT Club_ID , AVG(Earnings) AS avg_earnings FROM player GROUP BY Club_ID ) AS T2 ON T1.Club_ID = T2.Club_ID ORDER BY T2.avg_earnings DESC;
SELECT Manufacturer, COUNT(*) FROM club GROUP BY Manufacturer
SELECT COUNT(Club_ID), Manufacturer FROM club GROUP BY Manufacturer
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(Club_ID) DESC LIMIT 1;
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1
SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(Club_ID) > 1
SELECT Country FROM player GROUP BY Country HAVING COUNT(Player_ID) > 1
SELECT Country FROM player GROUP BY Country HAVING COUNT(Player_ID) > 1
SELECT Name FROM club WHERE Club_ID NOT IN ( SELECT Club_ID FROM player )
SELECT Name FROM club WHERE Club_ID NOT IN ( SELECT Club_ID FROM player )
SELECT Country FROM player WHERE Earnings > 1400000 UNION SELECT Country FROM player WHERE Earnings < 1100000
SELECT Country FROM player WHERE Earnings > 1400000 INTERSECT SELECT Country FROM player WHERE Earnings < 1100000
SELECT COUNT(DISTINCT "Country") FROM player
SELECT COUNT(DISTINCT "Country") FROM player
SELECT Earnings FROM player WHERE Country = "Australia" OR Country = "Zimbabwe";
SELECT Earnings FROM player WHERE Country IN ('Australia', 'Zimbabwe')
SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Order_Items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT(T3.product_id) >= 3 AND COUNT(T2.order_id) > 2
SELECT T1.customer_id, T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT(T3.order_item_id) >= 3
SELECT T1.order_id, T1.order_status_code, COUNT(T2.product_id) FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id
SELECT COUNT(DISTINCT order_item_id), T1.order_status_code, T1.order_id FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id
SELECT T1.date_order_placed FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING COUNT(T2.product_id) > 1 OR T1.date_order_placed = ( SELECT MIN(date_order_placed) FROM Orders )
SELECT T1.date_order_placed, T2.date_order_placed FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T2.order_item_status_code != 'Delivered' AND (SELECT COUNT(order_item_id) FROM Order_Items WHERE order_id = T1.order_id) > 1
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Orders )
SELECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Orders )
SELECT T2.id, T2.name, T2.price, T2.color FROM Products AS T2 INNER JOIN Order_Items AS T1 ON T2.product_id = T1.product_id GROUP BY T1.product_id HAVING COUNT(T1.order_item_id) >= 2
SELECT T1.order_id, T1.customer_id, T1.date_order_placed, T1.order_status_code FROM Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.order_status_code IN ('Cancelled', 'Out of Stock') GROUP BY T2.product_id HAVING COUNT(T2.product_id) < 2
SELECT T1.order_id, T1.date_order_placed FROM Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id HAVING COUNT(T2.product_id) >= 2
SELECT order_id, date_order_placed FROM Orders WHERE order_id IN ( SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(order_item_id) >= 2 )
SELECT T2.product_name, T2.product_price FROM Order_Items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id ORDER BY COUNT(T1.order_item_id) DESC LIMIT 1;
SELECT T2.product_id, T2.product_name, T2.product_price FROM Order_Items AS T1 INNER JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id ORDER BY COUNT(T1.order_item_id) DESC LIMIT 10;
SELECT order_id, SUM(product_price) FROM Orders AS t1 INNER JOIN Order_Items AS t2 ON t1.order_id = t2.order_id GROUP BY t1.order_id ORDER BY SUM(product_price) LIMIT 1
SELECT order_item_status_code, SUM(CASE WHEN p.product_price IS NOT NULL THEN p.product_price ELSE 0 END) FROM Order_Items o JOIN Products p ON o.product_id = p.product_id GROUP BY order_item_status_code
SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1
SELECT payment_method_code FROM Customer_Payment_Methods GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1
SELECT T1.gender_code, COUNT(T2.product_id) FROM Customers AS T1 INNER JOIN Order_Items AS T2 ON T1.customer_id = T2.order_id GROUP BY T1.gender_code
SELECT COUNT(DISTINCT T1.product_id) , T2.gender_code FROM Order_Items AS T1 INNER JOIN Customers AS T2 ON T1.product_id = T2.customer_id GROUP BY T2.gender_code
SELECT COUNT(DISTINCT T1.customer_id), T2.gender_code FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.gender_code
SELECT COUNT(DISTINCT T1.customer_id), T2.gender_code FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.gender_code
SELECT T1.customer_first_name, T1.customer_middle_initial, T1.customer_last_name, T2.payment_method_code FROM Customers AS T1 INNER JOIN Customer_Payment_Methods AS T2 ON T1.customer_id = T2.customer_id
SELECT customer_first_name, customer_middle_initial, customer_last_name, payment_method_code FROM Customers JOIN Customer_Payment_Methods ON Customers.customer_id = Customer_Payment_Methods.customer_id
SELECT T1.invoice_status_code, T1.invoice_date, T2.shipment_date FROM Invoices AS T1 INNER JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number
SELECT T1.invoice_status_code, T1.invoice_date, T2.shipment_date FROM Invoices AS T1 INNER JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number
SELECT T1.product_name, T2.shipment_date FROM Products AS T1 INNER JOIN Shipment_Items AS T2 ON T1.product_id = T2.order_item_id INNER JOIN Shipments AS T3 ON T2.order_item_id = T3.order_id WHERE T3.shipment_date IS NOT NULL
SELECT T1.product_name, T2.shipment_date FROM Products AS T1 JOIN Shipment_Items AS T3 ON T1.product_id = T3.order_item_id JOIN Shipments AS T2 ON T3.shipment_id = T2.shipment_id WHERE T3.order_item_status_code IS NOT NULL AND T3.order_item_status_code = 'Delivered'
SELECT order_item_status_code, shipment_tracking_number FROM Shipment_Items JOIN Order_Items ON Shipment_Items.order_item_id = Order_Items.order_item_id JOIN Shipments ON Shipment_Items.shipment_id = Shipments.shipment_id
SELECT T1.order_item_status_code, T2.shipment_tracking_number FROM Order_Items AS T1 INNER JOIN Shipment_Items AS T2 ON T1.order_item_id = T2.order_item_id WHERE T1.order_item_status_code = 'Delivered' AND T2.order_item_id IN ( SELECT order_item_id FROM Shipment_Items )
SELECT T1.product_name, T2.color FROM Products AS T1 INNER JOIN Shipment_Items AS T2 ON T1.product_id = T2.order_item_id WHERE T2.shipment_id IN ( SELECT shipment_id FROM Shipments WHERE order_id IN ( SELECT order_id FROM Order_Items WHERE order_item_status_code = 'Delivered' ) );
SELECT T1.product_name, T1.product_color FROM Products AS T1 INNER JOIN Shipment_Items AS T2 ON T1.product_id = T2.order_item_id INNER JOIN Orders AS T3 ON T2.order_item_id = T3.order_id WHERE T3.order_id IN ( SELECT order_id FROM Order_items WHERE order_item_status_code = 'Delivered' )
SELECT DISTINCT T2.product_name, T2.product_price, T2.product_description FROM Customers AS T1 JOIN Orders AS T3 ON T1.customer_id = T3.customer_id JOIN Order_Items AS T4 ON T3.order_id = T4.order_id JOIN Products AS T2 ON T4.product_id = T2.product_id WHERE T1.gender_code = 'F'
SELECT T2.product_name, T2.product_price, T2.product_description FROM Customers AS T1 JOIN Orders AS T3 ON T1.customer_id = T3.customer_id JOIN Order_Items AS T4 ON T3.order_id = T4.order_id JOIN Products AS T2 ON T4.product_id = T2.product_id WHERE T1.gender_code = 'F'
SELECT T1.invoice_status_code FROM Invoices AS T1 INNER JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number WHERE T2.order_id IS NULL
SELECT T1.invoice_status_code FROM Invoices AS T1 INNER JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number WHERE T2.order_id IS NULL
SELECT SUM(T1.product_price * (SELECT COUNT(*) FROM Order_Items WHERE order_id = T2.order_id)) AS total_cost ,  T2.order_id ,  T2.date_order_placed FROM Products AS T1 INNER JOIN Orders AS T2 ON T1.product_id = T2.customer_id GROUP BY T2.order_id
SELECT O.order_id, O.date_order_placed, SUM(OI.product_price) FROM Orders O INNER JOIN Order_Items I ON O.order_id = I.order_id GROUP BY O.order_id
SELECT COUNT(DISTINCT customer_id) FROM Orders
SELECT COUNT(DISTINCT customer_id) FROM Orders
SELECT COUNT(DISTINCT order_item_status_code) FROM Order_Items
SELECT COUNT(DISTINCT `order_item_status_code`) FROM Order_Items
SELECT COUNT(DISTINCT payment_method_code) FROM Customer_Payment_Methods
SELECT COUNT(DISTINCT payment_method_code) FROM `Customer_Payment_Methods`
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'
SELECT login_name, login_password FROM Customers WHERE phone_number LIKE '+12%'
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'
SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)
SELECT product_price, product_size FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)
SELECT COUNT(DISTINCT product_id) FROM Order_Items WHERE order_item_status_code IN ('Out of Stock')
SELECT COUNT(DISTINCT product_id) FROM Order_Items WHERE order_item_status_code = 'Out of Stock'
SELECT COUNT(customer_id) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods );
SELECT COUNT(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )
SELECT order_status_code, date_order_placed FROM Orders
SELECT order_status_code, date_order_placed FROM Orders
SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA'
SELECT address_line_1, town_city, county FROM Customers WHERE country = 'USA'
SELECT T2.customer_first_name, T1.product_name FROM Products AS T1 INNER JOIN Order_Items AS T2 ON T1.product_id = T2.product_id
SELECT T2.customer_first_name, T4.product_name FROM Orders AS T1 INNER JOIN Customers AS T2 ON T1.customer_id = T2.customer_id INNER JOIN Order_Items AS T3 ON T1.order_id = T3.order_id INNER JOIN Products AS T4 ON T3.product_id = T4.product_id
SELECT COUNT(*) FROM Shipment_Items;
SELECT COUNT(*) FROM Shipment_Items
SELECT AVG(product_price) FROM Products;
SELECT AVG(product_price) FROM Products;
SELECT AVG(T2.product_price) FROM Order_Items AS T1 INNER JOIN Products AS T2 ON T1.product_id = T2.product_id
SELECT AVG(T2.product_price) FROM Order_Items AS T1 INNER JOIN Products AS T2 ON T1.product_id = T2.product_id
SELECT email_address, town_city, county FROM Customers GROUP BY gender_code ORDER BY COUNT(*) LIMIT 1
SELECT email_address, town_city, county FROM Customers WHERE gender_code IN ('F') GROUP BY gender_code HAVING COUNT(customer_id) < 3
SELECT T1.date_order_placed FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id JOIN Customer_Payment_Methods AS T3 ON T2.customer_id = T3.customer_id GROUP BY T1.customer_id HAVING COUNT(T3.payment_method_code) >= 2
SELECT T1.date_order_placed FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id JOIN Customer_Payment_Methods AS T3 ON T2.customer_id = T3.customer_id GROUP BY T1.customer_id HAVING COUNT(T3.payment_method_code) >= 2
SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) LIMIT 1;
SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) LIMIT 1;
SELECT T2.product_id, T2.product_description FROM Order_Items AS T1 INNER JOIN Products AS T2 ON T1.product_id = T2.product_id WHERE T1.order_item_status_code != 'Out of Stock' GROUP BY T1.product_id HAVING COUNT(T1.order_id) > 3
SELECT T2.product_id, T2.product_description FROM Order_Items AS T1 INNER JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id HAVING COUNT(T1.order_item_id) > 3
SELECT T1.invoice_date, T1.invoice_number FROM Invoices AS T1 INNER JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T2.invoice_number HAVING COUNT(T2.shipment_id) >= 2
SELECT T1.invoice_date, T1.invoice_number FROM Invoices AS T1 INNER JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number HAVING COUNT(T2.invoice_number) > 1
SELECT shipment_tracking_number, shipment_date FROM Shipments;
SELECT shipment_tracking_number, shipment_date FROM Shipments;
SELECT product_color, product_description, product_size FROM Products WHERE product_price < ( SELECT MAX(product_price) FROM Products );
SELECT product_color, product_description, product_size FROM Products WHERE product_price < ( SELECT MAX(product_price) FROM Products );
SELECT Name FROM director WHERE Age > (SELECT AVG(Age) FROM director)
SELECT Name FROM director ORDER BY Age LIMIT 1;
SELECT COUNT(*) FROM channel WHERE Internet LIKE '%bbc.co.uk%'
SELECT COUNT(DISTINCT "Digital_terrestrial_channel") FROM channel
SELECT Title FROM program ORDER BY Start_Year DESC
SELECT T2.Name FROM program AS T1 INNER JOIN director AS T2 ON T1.Director_ID = T2.Director_ID GROUP BY T1.Director_ID ORDER BY COUNT(T1.Program_ID) DESC LIMIT 1
SELECT T1.Name, T1.Age FROM director AS T1 INNER JOIN program AS T2 ON T1.Director_ID = T2.Director_ID GROUP BY T1.Director_ID ORDER BY COUNT(T2.Program_ID) DESC LIMIT 1
SELECT Title FROM program ORDER BY Start_Year DESC LIMIT 1
SELECT T1.Name, T1.Internet FROM channel AS T1 INNER JOIN program AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T1.Channel_ID HAVING COUNT(T2.Program_ID) > 1
SELECT T1.Name, COUNT(T2.Program_ID) FROM channel AS T1 INNER JOIN program AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T1.Name
SELECT COUNT(Channel_ID) FROM channel WHERE Channel_ID NOT IN ( SELECT Channel_ID FROM program );
SELECT T2.Name FROM program AS T1 INNER JOIN director AS T2 ON T1.Director_ID = T2.Director_ID WHERE T1.Title = 'Dracula'
SELECT T1.Name, T1.Internet FROM channel AS T1 INNER JOIN director_admin AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T1.Name ORDER BY COUNT(T2.Director_ID) DESC LIMIT 1
SELECT Name FROM director WHERE Age BETWEEN 30 AND 60;
SELECT T2.Name FROM director_admin AS T1 INNER JOIN channel AS T2 ON T1.Channel_ID = T2.Channel_ID INNER JOIN director AS T3 ON T1.Director_ID = T3.Director_ID WHERE T3.Age < 40 AND T3.Age > 60;
SELECT T2.Channel_ID, T2.Name FROM director_admin AS T1 INNER JOIN channel AS T2 ON T1.Channel_ID = T2.Channel_ID WHERE T1.Director_ID != (SELECT Director_ID FROM director WHERE Name = 'Hank Baskett')
SELECT COUNT("Radio_ID") FROM "radio";
SELECT Transmitter FROM radio ORDER BY ERP_kW ASC
SELECT tv_show_name, Original_Airdate FROM tv_show
SELECT Station_name FROM city_channel WHERE Affiliation != 'ABC'
SELECT Transmitter FROM radio WHERE ERP_kW > 150 OR ERP_kW < 30;
SELECT Transmitter FROM radio WHERE ERP_kW = ( SELECT MAX(ERP_kW) FROM radio );
SELECT AVG (ERP_kW) FROM radio;
SELECT Affiliation, COUNT(*) FROM city_channel GROUP BY Affiliation
SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1
SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(DISTINCT City) > 3
SELECT City, Station_name FROM city_channel ORDER BY Station_name ASC
SELECT T1.City, T1.Station_name, T3.Transmitter FROM city_channel AS T1 JOIN city_channel_radio AS T2 ON T1.ID = T2.City_channel_ID JOIN radio AS T3 ON T2.Radio_ID = T3.Radio_ID;
SELECT T2.Station_name, T1.Transmitter FROM radio AS T1 INNER JOIN city_channel_radio AS T2 ON T1.Radio_ID = T2.Radio_ID INNER JOIN city_channel AS T3 ON T2.City_channel_ID = T3.ID WHERE T1.ERP_kW IS NOT NULL ORDER BY CAST(REPLACE(T1.ERP_kW, ',', '') AS REAL) DESC
SELECT T2.Transmitter, COUNT(T1.City_channel_ID) FROM city_channel_radio AS T1 INNER JOIN radio AS T2 ON T1.Radio_ID = T2.Radio_ID GROUP BY T2.Transmitter
SELECT DISTINCT T2.Transmitter FROM city_channel_radio AS T1 INNER JOIN radio AS T2 ON T1.Radio_ID = T2.Radio_ID WHERE T1.Is_online = 'F'
SELECT Model FROM vehicle WHERE Top_Speed = ( SELECT MAX(Top_Speed) FROM vehicle ) AND Power > 6000;
SELECT Model FROM vehicle WHERE Power > 6000 ORDER BY Top_Speed DESC LIMIT 1
SELECT Name FROM driver WHERE Citizenship = 'United States'
SELECT Name FROM driver WHERE Citizenship = 'United States'
SELECT COUNT(DISTINCT V1.Driver_ID), ( SELECT MIN(V2.Driver_ID) FROM vehicle_driver AS V1 JOIN vehicle_driver AS V2 ON V1.Vehicle_ID = V2.Vehicle_ID GROUP BY V1.Vehicle_ID )
SELECT T2.Driver_ID, COUNT(*) FROM vehicle_driver AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T2.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT MAX(Power) , AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou'
SELECT MAX(Power), AVG(Power) FROM vehicle WHERE Builder = 'Zhuzhou'
SELECT T2.Vehicle_ID FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T2.Vehicle_ID ORDER BY COUNT(T2.Vehicle_ID) LIMIT 1
SELECT Vehicle_ID FROM vehicle_driver GROUP BY Vehicle_ID ORDER BY COUNT(Vehicle_ID) LIMIT 1
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = '1996'
SELECT Top_Speed, Power FROM vehicle WHERE Build_Year = '1996' ORDER BY Top_Speed DESC LIMIT 1;
SELECT Build_Year, Model, Builder FROM vehicle
SELECT Build_Year, Model, Builder FROM vehicle
SELECT COUNT(DISTINCT T2.Vehicle_ID) FROM vehicle_driver AS T1 INNER JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T2.Build_Year = '2012'
SELECT COUNT(DISTINCT T2.Driver_ID) FROM vehicle AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE T1.Build_Year = '2012'
SELECT COUNT(*) FROM driver WHERE Racing_Series = 'NASCAR'
SELECT COUNT(*) FROM driver WHERE Racing_Series = 'NASCAR'
SELECT AVG(Top_Speed) FROM vehicle
SELECT AVG(Top_Speed) FROM vehicle
SELECT DISTINCT T1.Name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T3.Power > 5000 AND T3.Name IS NOT NULL
SELECT T1.Name FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE T3.Power > 5000
SELECT Model FROM vehicle WHERE Total_Production > "100" OR Top_Speed > "150"
SELECT Model FROM vehicle WHERE Total_Production > '100' OR Top_Speed > '150';
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'
SELECT Model, Build_Year FROM vehicle WHERE Model LIKE '%DJ%'
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN ( SELECT Vehicle_ID FROM vehicle_driver );
SELECT Model FROM vehicle WHERE Vehicle_ID NOT IN ( SELECT Vehicle_ID FROM vehicle_driver );
SELECT T2.Vehicle_ID, T2.Model FROM vehicle_driver AS T1 INNER JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID WHERE (T1.Driver_ID IN ( SELECT Driver_ID FROM driver ) GROUP BY T1.Driver_ID HAVING COUNT(DISTINCT T1.Driver_ID) > 1 ) OR T2.Builder = 'Ziyang'
SELECT T2.Vehicle_ID, T2.Model FROM vehicle_driver AS T1 INNER JOIN vehicle AS T2 ON T1.Vehicle_ID = T2.Vehicle_ID GROUP BY T1.Vehicle_ID HAVING COUNT(DISTINCT T1.Driver_ID) = 2 UNION SELECT Vehicle_ID, Model FROM vehicle WHERE Builder = 'Ziyang'
SELECT T2.Vehicle_ID, T2.Model FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE (T2.Driver_ID IN ( SELECT Driver_ID FROM driver GROUP BY Driver_ID HAVING COUNT(Driver_ID) > 2 ) OR T1.Name = 'Jeff Gordon' )
SELECT T2.Vehicle_ID, T2.Model FROM driver AS T1 INNER JOIN vehicle_driver AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN vehicle AS T3 ON T2.Vehicle_ID = T3.Vehicle_ID WHERE (T1.Name = 'Jeff Gordon' OR COUNT(DISTINCT T1.Driver_ID) > 2)
SELECT COUNT(*) FROM vehicle WHERE Top_Speed = ( SELECT MAX(Top_Speed) FROM vehicle );
SELECT COUNT(*) FROM vehicle WHERE Top_Speed = ( SELECT MAX(Top_Speed) FROM vehicle );
SELECT Name FROM driver ORDER BY Name
SELECT Name FROM driver ORDER BY Name
SELECT COUNT(DISTINCT "Racing_Series") FROM driver
SELECT COUNT(DISTINCT "Racing_Series"), "Racing_Series" FROM driver GROUP BY "Racing_Series";
SELECT T2.Name, T2.Citizenship FROM vehicle_driver AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Vehicle_ID = ( SELECT Vehicle_ID FROM vehicle WHERE Model = 'DJ1' )
SELECT T2.Name, T2.Citizenship FROM vehicle_driver AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Vehicle_ID IN (SELECT Vehicle_ID FROM vehicle WHERE Model = 'DJ1')
SELECT COUNT(DISTINCT T2.Driver_ID) FROM vehicle_driver AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle);
SELECT COUNT(DISTINCT T2.Driver_ID) FROM vehicle_driver AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Vehicle_ID NOT IN (SELECT Vehicle_ID FROM vehicle);
SELECT COUNT(Exam_ID) FROM Exams;
SELECT COUNT(*) FROM Exams;
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code ASC
SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code
SELECT Exam_Name, Exam_Date FROM Exams WHERE Subject_Code != 'Database'
SELECT Exam_Date, Exam_Name FROM Exams WHERE Subject_Code != 'Database'
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC
SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC
SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code
SELECT Type_of_Question_Code, COUNT(*) FROM Questions GROUP BY Type_of_Question_Code
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'
SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal'
SELECT COUNT(DISTINCT Comments) FROM Student_Answers
SELECT COUNT(DISTINCT Comments) FROM Student_Answers
SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(Student_Answer_ID) DESC
SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(Student_Answer_ID) DESC
SELECT T1.First_Name, T2.Date_of_Answer FROM Students AS T1 INNER JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID
SELECT T1.First_Name, T2.Date_of_Answer FROM Students AS T1 INNER JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID
SELECT Student_Answer_Text, Date_of_Answer FROM Student_Answers ORDER BY Date_of_Answer DESC
SELECT Student_Answer_Text, Date_of_Answer FROM Student_Answers ORDER BY Date_of_Answer DESC
SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1;
SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) LIMIT 1
SELECT T1.First_Name FROM Students AS T1 INNER JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(T2.Student_Answer_ID) >= 2
SELECT T1.First_Name FROM Students AS T1 INNER JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(T2.Student_Answer_ID) >= 2
SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(Valid_Answer_ID) DESC LIMIT 1
SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(Valid_Answer_ID) DESC LIMIT 1
SELECT Last_Name FROM Students WHERE Gender_MFU != 'M'
SELECT Last_Name FROM Students WHERE Gender_MFU != 'M'
SELECT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU
SELECT Gender_MFU, COUNT(*) FROM Students GROUP BY Gender_MFU
SELECT Last_Name FROM Students WHERE Gender_MFU = 'F' OR Gender_MFU = 'M';
SELECT Last_Name FROM Students WHERE Gender_MFU IN ('F', 'M')
SELECT T1.First_Name FROM Students AS T1 LEFT JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID WHERE T2.Student_Answer_ID IS NULL
SELECT T1.First_Name FROM Students AS T1 LEFT JOIN Student_Answers AS T2 ON T1.Student_ID = T2.Student_ID WHERE T2.Student_Answer_ID IS NULL
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' AND Satisfactory_YN = 'Absent'
SELECT Student_Answer_Text FROM Student_Answers WHERE Comments = 'Normal' AND Satisfactory_YN = 'Absent';
SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3
SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING COUNT(Question_ID) >= 3
SELECT * FROM Students;
SELECT * FROM Students;
SELECT COUNT(address_id) FROM Addresses;
SELECT COUNT(address_id) FROM Addresses;
SELECT address_id, address_details FROM Addresses;
SELECT address_id, address_details FROM Addresses;
SELECT COUNT(product_id) FROM Products;
SELECT COUNT(product_id) FROM Products;
SELECT product_id, product_type_code, product_name FROM Products
SELECT product_id, product_type_code, product_name FROM Products
SELECT product_price FROM Products WHERE product_name = 'Monitor'
SELECT product_price FROM Products WHERE product_name = 'Monitor'
SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products
SELECT MIN(product_price), AVG(product_price), MAX(product_price) FROM Products
SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes'
SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Clothes';
SELECT COUNT(product_type_code) FROM Products WHERE product_type_code = 'Hardware'
SELECT COUNT(product_id) FROM Products WHERE product_type_code = 'Hardware'
SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)
SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)
SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products WHERE product_type_code = 'Hardware')
SELECT product_name FROM Products WHERE product_price > (SELECT AVG(product_price) FROM Products)
SELECT product_name FROM Products WHERE product_type_code = 'Clothes' ORDER BY product_price DESC LIMIT 1
SELECT product_name FROM Products WHERE product_price = ( SELECT MAX(product_price) FROM Products )
SELECT product_id, product_name FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price LIMIT 1
SELECT product_id, product_name FROM Products WHERE product_price = ( SELECT MIN(product_price) FROM Products );
SELECT product_name FROM Products ORDER BY product_price DESC
SELECT product_name FROM Products ORDER BY product_price DESC
SELECT product_name, product_price FROM Products WHERE product_type_code = 'Hardware' ORDER BY product_price ASC;
SELECT product_name FROM Products ORDER BY product_price ASC
SELECT product_type_code, COUNT(product_id) FROM Products GROUP BY product_type_code
SELECT COUNT(product_type_code), product_type_code FROM Products GROUP BY product_type_code
SELECT product_type_code, AVG(product_price) FROM Products GROUP BY product_type_code
SELECT AVG(product_price) FROM Products GROUP BY product_type_code
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) >= 2
SELECT product_type_code FROM Products GROUP BY product_type_code HAVING COUNT(product_id) > 1
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) DESC LIMIT 1
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_type_code) DESC LIMIT 1
SELECT COUNT(*) FROM Customers;
SELECT COUNT(*) FROM Customers;
SELECT customer_id, customer_name FROM Customers;
SELECT customer_id, customer_name FROM Customers;
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy';
SELECT customer_address, customer_phone, customer_email FROM Customers WHERE customer_name = 'Jeromy';
SELECT payment_method_code, COUNT(customer_id) FROM Customers GROUP BY payment_method_code
SELECT COUNT(payment_method_code), payment_method_code FROM Customers GROUP BY payment_method_code
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1;
SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY COUNT(customer_id) DESC LIMIT 1;
SELECT customer_name FROM Customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) ASC LIMIT 1
SELECT customer_name FROM Customers GROUP BY payment_method_code ORDER BY COUNT(payment_method_code) LIMIT 1
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy'
SELECT payment_method_code, customer_number FROM Customers WHERE customer_name = 'Jeromy';
SELECT DISTINCT payment_method_code FROM Customers;
SELECT DISTINCT payment_method_code FROM Customers;
SELECT product_id, product_type_code FROM Products ORDER BY product_name;
SELECT product_id, product_type_code FROM Products ORDER BY product_name
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) LIMIT 1
SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY COUNT(product_id) LIMIT 1
SELECT COUNT(*) FROM Customer_Orders
SELECT COUNT(*) FROM Customer_Orders
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = ( SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy' )
SELECT order_id, order_date, order_status_code FROM Customer_Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Jeromy')
SELECT T1.customer_name, T1.customer_id, COUNT(T2.order_id) FROM Customers AS T1 INNER JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id
SELECT T1.customer_name, T1.customer_id, COUNT(T2.order_id) FROM Customers AS T1 INNER JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id
SELECT Customers.customer_id, Customers.customer_name, Customers.customer_phone, Customers.customer_email FROM Customers JOIN Customer_Orders ON Customers.customer_id = Customer_Orders.customer_id GROUP BY Customers.customer_id ORDER BY COUNT(Customer_Orders.order_id) DESC LIMIT 1
SELECT T1.customer_id, T1.customer_name, T1.customer_phone, T1.customer_email FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(T2.order_id) DESC LIMIT 1
SELECT order_status_code, COUNT(order_id) FROM Customer_Orders GROUP BY order_status_code
SELECT COUNT(order_status_code), order_status_code FROM Customer_Orders GROUP BY order_status_code
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC LIMIT 1
SELECT order_status_code FROM Customer_Orders GROUP BY order_status_code ORDER BY COUNT(order_status_code) DESC LIMIT 1
SELECT COUNT(customer_id) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Orders );
SELECT COUNT(customer_id) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Orders );
SELECT T1.product_name FROM Products AS T1 LEFT JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T2.order_item_id IS NULL
SELECT T1.product_name FROM Products AS T1 LEFT JOIN Order_Items AS T2 ON T1.product_id = T2.product_id WHERE T2.order_item_id IS NULL
SELECT COUNT(DISTINCT T1.product_id) FROM Order_Items AS T1 INNER JOIN Products AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = 'Monitor'
SELECT COUNT(DISTINCT product_id) FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE product_name = 'Monitor');
SELECT COUNT(DISTINCT T1.customer_id) FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T2.product_id = ( SELECT product_id FROM Products WHERE product_name = 'Monitor' )
SELECT COUNT(DISTINCT T1.customer_id) FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T2.product_id IN ( SELECT product_id FROM Products WHERE product_type_code = 'Monitor' )
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders
SELECT COUNT(DISTINCT customer_id) FROM Customer_Orders
SELECT customer_id FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Orders )
SELECT customer_id FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Orders )
SELECT T1.order_date, T1.order_id FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T2.order_quantity > '6' OR (SELECT COUNT(*) FROM Order_Items AS T3 WHERE T3.product_id = T2.product_id AND T3.order_id = T1.order_id) > 3
SELECT T1.order_id, T1.order_date FROM Customer_Orders AS T1 INNER JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T2.order_quantity > '6' OR (T2.order_quantity LIKE '%,%' AND LENGTH(T2.order_quantity) - LENGTH(REPLACE(T2.order_quantity, ',', ''))) > 3
SELECT COUNT(*) FROM building
SELECT COUNT(*) FROM building
SELECT Name FROM building ORDER BY Number_of_Stories ASC
SELECT Name FROM building ORDER BY Number_of_Stories ASC
SELECT Address FROM building ORDER BY Completed_Year DESC
SELECT Address FROM building ORDER BY Completed_Year DESC
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year != 1980;
SELECT MAX(Number_of_Stories) FROM building WHERE Completed_Year != 1980;
SELECT AVG(Population) FROM region
SELECT AVG(Population) FROM region;
SELECT Name FROM region ORDER BY Name ASC
SELECT Name FROM region ORDER BY Name;
SELECT Capital FROM region WHERE Area > 10000;
SELECT Capital FROM region WHERE Area > 10000;
SELECT Capital FROM region WHERE Population = ( SELECT MAX(Population) FROM region )
SELECT Name, Capital FROM region WHERE Population = ( SELECT MAX(Population) FROM region )
SELECT Name FROM region ORDER BY Area DESC LIMIT 5;
SELECT Name FROM region ORDER BY Area DESC LIMIT 5;
SELECT T1.Name, T2.Name FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT T1.Name, T2.Name FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT T1.Name FROM region AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Name HAVING COUNT(T2.Building_ID) > 1
SELECT T1.Name FROM region AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Name HAVING COUNT(T2.Building_ID) > 1
SELECT T1.Capital FROM region AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T2.Region_ID ORDER BY COUNT(T2.Building_ID) DESC LIMIT 1
SELECT T1.Name, T1.Capital FROM region AS T1 INNER JOIN building AS T2 ON T1.Region_ID = T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(T2.Building_ID) DESC LIMIT 1
SELECT T1.Address, T2.Capital FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT T1.Address, T2.Name FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID
SELECT COUNT(T1.Number_of_Stories) FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID WHERE T2.Name = 'Abruzzo';
SELECT T1.Name, COUNT(T1.Building_ID) FROM building AS T1 INNER JOIN region AS T2 ON T1.Region_ID = T2.Region_ID WHERE T2.Name = 'Abruzzo' GROUP BY T1.Name
SELECT Completed_Year, COUNT(*) FROM building GROUP BY Completed_Year
SELECT Completed_Year, COUNT(*) FROM building GROUP BY Completed_Year
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Name FROM region WHERE Region_ID NOT IN ( SELECT Region_ID FROM building );
SELECT T1.Name FROM region AS T1 LEFT JOIN building AS T2 ON T1.Region_ID = T2.Region_ID WHERE T2.Building_ID IS NULL
SELECT T1.Completed_Year FROM building AS T1 INNER JOIN ( SELECT Building_ID FROM building GROUP BY Building_ID HAVING COUNT(Number_of_Stories) > 20 ) AS T2 ON T1.Building_ID = T2.Building_ID UNION SELECT T1.Completed_Year FROM building AS T1 INNER JOIN ( SELECT Building_ID FROM building GROUP BY Building_ID HAVING COUNT(Number_of_Stories) < 15 ) AS T2 ON T1.Building_ID = T2.Building_ID
SELECT Completed_Year FROM building WHERE Number_of_Stories > 20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories < 15
SELECT DISTINCT Address FROM building
SELECT DISTINCT Address FROM building
SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(Number_of_Stories) DESC
SELECT Name, Completed_Year FROM building ORDER BY Number_of_Stories DESC
SELECT Channel_Details FROM Channels ORDER BY Channel_Details
SELECT Channel_Details FROM Channels ORDER BY Channel_Details
SELECT COUNT(Service_ID) FROM Services
SELECT COUNT(Service_ID) FROM Services
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Analytical_Layer_Type_Code FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Service_Details FROM Customers_and_Services AS T1 INNER JOIN Customers AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Customer_Details = 'Hardy Kutch'
SELECT T2.Service_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Customer_Details = 'Hardy Kutch'
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID GROUP BY T1.Service_ID HAVING COUNT(T2.Customers_and_Services_ID) > 3
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID GROUP BY T1.Service_ID HAVING COUNT(T2.Customers_and_Services_ID) > 3
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN ( SELECT Customer_ID, COUNT(*) as num FROM Customers_and_Services GROUP BY Customer_ID ORDER BY num DESC LIMIT 1 ) AS T2 ON T1.Customer_ID = T2.Customer_ID
SELECT T1.Customer_Details, COUNT(T2.Customers_and_Services_ID) AS Service_Count FROM Customers AS T1 JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID ORDER BY Service_Count DESC LIMIT 1
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN ( SELECT Customer_ID , COUNT(*) as count FROM Customers_and_Services GROUP BY Customer_ID ORDER BY count DESC LIMIT 1 ) AS T2 ON T1.Customer_ID = T2.Customer_ID
SELECT T1.Customer_Details, COUNT(T2.Service_ID) AS num_services FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID ORDER BY num_services DESC LIMIT 1;
SELECT T1.Customer_Details FROM Customers AS T1 LEFT JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Customers_and_Services_ID IS NULL
SELECT T1.Customer_Details FROM Customers AS T1 LEFT JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Service_ID IS NULL
SELECT T1.Customer_Details, T2.Service_ID, T2.Service_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T2.Service_ID ORDER BY COUNT(T2.Service_ID) LIMIT 1
SELECT DISTINCT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T2.Service_ID ORDER BY COUNT(T2.Service_ID) LIMIT 1
SELECT COUNT(DISTINCT Customer_ID) FROM Customers_and_Services UNION SELECT COUNT(DISTINCT Service_ID) FROM Customers_and_Services
SELECT COUNT(*) FROM Customers_and_Services
SELECT Customer_Details FROM Customers WHERE Customer_Details LIKE '%Kutch%'
SELECT * FROM Customers WHERE Customer_Details LIKE '%Kutch%'
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Customer_Interactions AS T3 ON T2.Customer_ID = T3.Customer_ID WHERE T3.Status_Code = 'good' OR T2.Customers_and_Services_Details LIKE '%Hardy Kutch%'
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Customer_Interactions AS T3 ON T2.Customer_ID = T3.Customer_ID WHERE T3.Status_Code = 'good' AND T2.Customers_and_Services_Details = 'Satisfied'
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Customer_Interactions AS T3 ON T2.Customer_ID = T3.Customer_ID WHERE T3.Status_Code = 'bad' AND T2.Customer_ID IN (SELECT Customer_ID FROM Customers WHERE Customer_Details = 'Hardy Kutch')
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID INNER JOIN Customer_Interactions AS T3 ON T2.Customer_ID = T3.Customer_ID WHERE T2.Customer_ID = 78 AND T3.Status_Code = 'bad'
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customer_Interactions AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Channel_ID IN (SELECT Channel_ID FROM Channels WHERE Channel_Details = '15 ij')
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customer_Interactions AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Status_Code = '15 ij'
SELECT T1.Customer_Details, T2.Services_and_Channels_Details FROM Customers AS T1 JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Status_Code = 'Stuck' AND T2.Services_and_Channels_Details = 'bad';
SELECT T1.Customer_Details FROM Customers AS T1 INNER JOIN Customer_Interactions AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T2.Status_Code = 'Stuck' AND T2.Services_and_Channels_Details = 'bad'
SELECT COUNT(Integration_Platform_ID) FROM Integration_Platform WHERE Integration_Platform_Details = 'Success'
SELECT COUNT(*) FROM Integration_Platform WHERE Integration_Platform_Details = 'Success'
SELECT T1.Customer_ID, T2.Customer_Details FROM Customers AS T1 INNER JOIN Integration_Platform AS T2 ON T1.Customer_ID = T2.Customer_Interaction_ID WHERE T2.Integration_Platform_ID NOT IN ( SELECT Integration_Platform_ID FROM Integration_Platform )
SELECT T1.Customer_ID, T1.Customer_Details, T2.Integration_Platform_Details FROM Customers AS T1 JOIN Integration_Platform AS T2 ON T1.Customer_ID = T2.Customer_Interaction_ID JOIN Customer_Interactions AS T3 ON T2.Customer_Interaction_ID = T3.Customer_Interaction_ID WHERE T3.Status_Code = 'Fail'
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Customers_and_Services_ID NOT IN ( SELECT Customers_and_Services_ID FROM Customers_and_Services )
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Customers_and_Services_Details IS NULL
SELECT Analytical_Layer_Type_Code, COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code
SELECT Analytical_Layer_Type_Code, COUNT(*) FROM Analytical_Layer GROUP BY Analytical_Layer_Type_Code
SELECT T1.Service_Details FROM Services AS T1 INNER JOIN Customers_and_Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Customers_and_Services_Details = 'unsatisfied'
SELECT T1.Customers_and_Services_Details FROM Customers_and_Services AS T1 INNER JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T1.Customers_and_Services_Details = 'unsatisfied' AND T2.Service_Details IS NOT NULL
SELECT COUNT(*) FROM Vehicles;
SELECT COUNT(*) FROM Vehicles;
SELECT name FROM Vehicles ORDER BY Model_year DESC
SELECT name FROM Vehicles ORDER BY Model_year DESC;
SELECT DISTINCT "Type_of_powertrain" FROM Vehicles;
SELECT DISTINCT Type_of_powertrain FROM Vehicles
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year = 2013 OR Model_year = 2014;
SELECT name, Type_of_powertrain, Annual_fuel_cost FROM Vehicles WHERE Model_year IN (2013, 2014)
SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014 OR Model_year = 2013
SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year = 2013 INTERSECT SELECT DISTINCT Type_of_powertrain FROM Vehicles WHERE Model_year = 2014
SELECT Type_of_powertrain, COUNT(*) FROM Vehicles GROUP BY Type_of_powertrain
SELECT COUNT(*) , Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(id) DESC LIMIT 1;
SELECT Type_of_powertrain FROM Vehicles GROUP BY Type_of_powertrain ORDER BY COUNT(Type_of_powertrain) DESC LIMIT 1;
SELECT MIN(CASE WHEN Type_of_powertrain = 'Gasoline' THEN Annual_fuel_cost END),          MAX(CASE WHEN Type_of_powertrain = 'Gasoline' THEN Annual_fuel_cost END),         AVG(CASE WHEN Type_of_powertrain = 'Diesel' THEN Annual_fuel_cost END)
SELECT MIN(A2.annual_fuel_cost), MAX(A2.annual_fuel_cost), AVG(A2.annual_fuel_cost) FROM Vehicles AS A1 INNER JOIN Vehicles AS A2 ON A1.id = A2.id
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate
SELECT name, Model_year FROM Vehicles WHERE City_fuel_economy_rate <= Highway_fuel_economy_rate
SELECT Type_of_powertrain, AVG(Annual_fuel_cost) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(id) >= 2
SELECT Type_of_powertrain, AVG(CASE WHEN Annual_fuel_cost IS NOT NULL THEN Annual_fuel_cost ELSE 0 END) FROM Vehicles GROUP BY Type_of_powertrain HAVING COUNT(DISTINCT Annual_fuel_cost) > 1
SELECT name, age, membership_credit FROM Customers;
SELECT name, age, membership_credit FROM Customers;
SELECT name, age FROM Customers WHERE membership_credit = ( SELECT MAX(membership_credit) FROM Customers )
SELECT name, age FROM Customers WHERE membership_credit = ( SELECT MAX(membership_credit) FROM Customers )
SELECT AVG(age) FROM Customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM Customers)
SELECT AVG(CASE WHEN membership_credit > (SELECT AVG(membership_credit) FROM Customers) THEN membership_credit ELSE NULL END) AS average_age
SELECT * FROM "Discount";
SELECT * FROM "Discount";
SELECT T2.name, SUM(T1.total_hours) FROM Renting_history AS T1 INNER JOIN Vehicles AS T2 ON T1.vehicles_id = T2.id GROUP BY T2.name;
SELECT T2.name, SUM(T1.total_hours) FROM Renting_history AS T1 INNER JOIN Vehicles AS T2 ON T1.vehicles_id = T2.id GROUP BY T2.name;
SELECT T2.name FROM Renting_history AS T1 INNER JOIN Vehicles AS T2 ON T1.vehicles_id = T2.id WHERE T1.total_hours = 0;
SELECT T2.name FROM Renting_history AS T1 INNER JOIN Vehicles AS T2 ON T1.vehicles_id = T2.id WHERE T1.total_hours IS NULL
SELECT T1.name FROM Customers AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.customer_id GROUP BY T1.name HAVING COUNT(T2.id) >= 2
SELECT T1.name FROM Customers AS T1 INNER JOIN Renting_history AS T2 ON T1.id = T2.customer_id GROUP BY T1.id HAVING COUNT(T2.id) > 1
SELECT T2.name, T1.total_hours FROM Renting_history AS T1 INNER JOIN Vehicles AS T2 ON T1.vehicles_id = T2.id GROUP BY T1.vehicles_id ORDER BY COUNT(T1.id) DESC LIMIT 1;
SELECT T2.name, T2.Model_year FROM Renting_history AS T1 INNER JOIN Vehicles AS T2 ON T1.vehicles_id = T2.id GROUP BY T1.vehicles_id ORDER BY COUNT(T1.id) DESC LIMIT 1;
SELECT T2.name FROM Renting_history AS T1 INNER JOIN Vehicles AS T2 ON T1.vehicles_id = T2.id ORDER BY T1.total_hours DESC;
SELECT T2.name FROM Renting_history AS T1 INNER JOIN Vehicles AS T2 ON T1.vehicles_id = T2.id ORDER BY T1.total_hours DESC;
SELECT T1.name FROM Discount AS T1 INNER JOIN ( SELECT T2.discount_id, COUNT(*) AS num FROM Renting_history AS T2 GROUP BY T2.discount_id ) AS T3 ON T1.id = T3.discount_id ORDER BY T3.num DESC LIMIT 1;
SELECT T1.name FROM Discount AS T1 INNER JOIN ( SELECT T2.discount_id FROM Renting_history AS T2 GROUP BY T2.discount_id ORDER BY COUNT(T2.id) DESC LIMIT 1 ) AS T3 ON T1.id = T3.discount_id
SELECT T2.name, T2.Type_of_powertrain FROM Renting_history AS T1 INNER JOIN Vehicles AS T2 ON T1.vehicles_id = T2.id WHERE T1.total_hours > 30;
SELECT T2.name, T2.Type_of_powertrain FROM Renting_history AS T1 INNER JOIN Vehicles AS T2 ON T1.vehicles_id = T2.id WHERE T1.total_hours > 30
SELECT AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate) FROM Vehicles WHERE Type_of_powertrain IN ('Electric', 'hybrid')
SELECT AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate) FROM Vehicles WHERE Type_of_powertrain = 'Electric'
SELECT AVG(amount_of_loan) FROM Student_Loans;
SELECT AVG(amount_of_loan) FROM Student_Loans;
SELECT bio_data, student_id FROM Students WHERE student_id IN ( SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2 ) OR student_id IN ( SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) < 2 );
SELECT bio_data, student_id FROM Students WHERE student_id IN ( SELECT student_id FROM Classes GROUP BY student_id HAVING COUNT(*) >= 2 ) OR student_id IN ( SELECT student_id FROM Detention GROUP BY student_id HAVING COUNT(*) < 2 );
SELECT T1.class_details FROM Classes AS T1 INNER JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.class_details LIKE '%data%' AND NOT T1.class_details LIKE 'net%'
SELECT T1.class_details FROM Classes AS T1 INNER JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.class_details LIKE '%data%' EXCEPT SELECT T1.class_details FROM Classes AS T1 INNER JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.class_details LIKE 'net%'
SELECT bio_data FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Detention ) AND student_id NOT IN ( SELECT student_id FROM Student_Loans );
SELECT bio_data, student_details FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Detention UNION ALL SELECT student_id FROM Student_Loans )
SELECT T2.amount_of_loan, T2.date_of_loan FROM Achievements AS T1 INNER JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(T1.achievement_id) >= 2
SELECT T2.amount_of_loan, T2.date_of_loan FROM Achievements AS T1 INNER JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(T1.achievement_id) >= 2
SELECT T1.teacher_id FROM Classes AS T1 INNER JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY COUNT(T1.class_id) DESC LIMIT 1
SELECT T1.class_details, T1.teacher_id FROM Classes AS T1 INNER JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY COUNT(T1.class_id) DESC LIMIT 1
SELECT DISTINCT detention_summary FROM Detention;
SELECT DISTINCT detention_summary FROM Detention;
SELECT bio_data, address_type_description FROM Students JOIN Students_Addresses ON Students.student_id = Students_Addresses.student_id JOIN Ref_Address_Types ON Students_Addresses.address_type_code = Ref_Address_Types.address_type_code
SELECT bio_data, student_details, T3.address_type_description FROM Students AS T1 INNER JOIN Students_Addresses AS T2 ON T1.student_id = T2.student_id INNER JOIN Ref_Address_Types AS T3 ON T2.address_type_code = T3.address_type_code
SELECT T1.address_details, T2.bio_data FROM Addresses AS T1 INNER JOIN Students_Addresses AS T3 ON T1.address_id = T3.address_id INNER JOIN Students AS T2 ON T3.student_id = T2.student_id
SELECT T1.address_details, T2.bio_data FROM Addresses AS T1 INNER JOIN Students_Addresses AS T3 ON T1.address_id = T3.address_id INNER JOIN Students AS T2 ON T3.student_id = T2.student_id
SELECT bio_data, date_of_transcript FROM Students INNER JOIN Transcripts ON Students.student_id = Transcripts.student_id
SELECT bio_data, date_of_transcript FROM Students JOIN Transcripts ON Students.student_id = Transcripts.student_id;
SELECT COUNT(*) , behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1;
SELECT behaviour_monitoring_details, COUNT(*) FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1;
SELECT bio_data, student_details FROM Students WHERE student_id IN ( SELECT T1.student_id FROM Behaviour_Monitoring AS T1 INNER JOIN Behaviour_Monitoring AS T2 ON T1.behaviour_monitoring_id = T2.behaviour_monitoring_id WHERE T1.behaviour_monitoring_details = ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY COUNT(behaviour_monitoring_id) DESC LIMIT 1 ) AND T2.behaviour_monitoring_id IN ( SELECT behaviour_monitoring_id FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_id HAVING COUNT(behaviour_monitoring_id) = 3 )
SELECT bio_data, student_details FROM Students JOIN Behaviour_Monitoring ON Students.student_id = Behaviour_Monitoring.student_id GROUP BY Behaviour_Monitoring.student_id HAVING COUNT(Behaviour_Monitoring.behaviour_monitoring_id) = ( SELECT COUNT(*) FROM Behaviour_Monitoring ) AND COUNT(Behaviour_Monitoring.student_id) = 3
SELECT bio_data, student_details FROM Students WHERE student_id IN ( SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT bio_data FROM Students WHERE student_id IN ( SELECT student_id FROM Behaviour_Monitoring GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT bio_data, event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id
SELECT bio_data, event_date FROM Students JOIN Student_Events ON Students.student_id = Student_Events.student_id
SELECT COUNT(event_id), T2.event_type_code, T2.event_type_description FROM Student_Events AS T1 JOIN Ref_Event_Types AS T2 ON T1.event_type_code = T2.event_type_code GROUP BY T2.event_type_code ORDER BY COUNT(T1.event_id) DESC LIMIT 1;
SELECT T1.event_type_code, T1.event_type_description, COUNT(T3.student_id) FROM Ref_Event_Types AS T1 INNER JOIN Student_Events AS T2 ON T1.event_type_code = T2.event_type_code INNER JOIN Students AS T3 ON T2.student_id = T3.student_id GROUP BY T1.event_type_code ORDER BY COUNT(T3.student_id) DESC LIMIT 1
SELECT T1.achievement_details, T2.achievement_type_description FROM Achievements AS T1 INNER JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code = T2.achievement_type_code
SELECT T1.achievement_details, T2.achievement_type_description FROM Achievements AS T1 INNER JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code = T2.achievement_type_code
SELECT COUNT(T1.teacher_id) FROM Classes AS T1 INNER JOIN Achievements AS T2 ON T1.student_id = T2.student_id WHERE T2.achievement_type_code IS NULL
SELECT COUNT(T1.teacher_id) FROM Classes AS T1 INNER JOIN Achievements AS T2 ON T1.student_id = T2.student_id WHERE T2.achievement_type_code NOT IN ('Athletic', 'Scholastic')
SELECT date_of_transcript, transcript_details FROM Transcripts;
SELECT date_of_transcript, transcript_details FROM Transcripts;
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements
SELECT achievement_type_code, achievement_details, date_achievement FROM Achievements;
SELECT datetime_detention_start, datetime_detention_end FROM Detention;
SELECT datetime_detention_start, datetime_detention_end FROM Detention;
SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'
SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'
SELECT T1.class_details, T2.student_details, T3.teacher_details FROM Classes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id JOIN Teachers AS T3 ON T1.teacher_id = T3.teacher_id;
SELECT T1.student_details, T2.teacher_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id = T2.student_id JOIN Teachers AS T3 ON T2.teacher_id = T3.teacher_id WHERE T2.class_details != '' AND T2.teacher_id = T3.teacher_id
SELECT MAX(T1.teacher_id), ( SELECT T2.teacher_id FROM Classes AS T1 INNER JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.teacher_id ORDER BY COUNT(*) DESC LIMIT 1 ) FROM Classes
SELECT T1.teacher_id, COUNT(*) FROM Classes AS T1 INNER JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT MAX(T1.class_id) ,  ( SELECT student_id FROM Classes GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 ) FROM Classes AS T1
SELECT T1.student_id, COUNT(T2.class_id) FROM Classes AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.student_id, T2.bio_data, T2.student_details FROM Classes AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(T1.class_id) = 2
SELECT T1.student_id, T2.bio_data, T2.student_details FROM Classes AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(T1.class_id) = 2
SELECT detention_type_code, t2.detention_type_description FROM Detention AS t1 INNER JOIN Ref_Detention_Type AS t2 ON t1.detention_type_code = t2.detention_type_code GROUP BY t2.detention_type_code ORDER BY COUNT(t1.detention_id) LIMIT 1
SELECT detention_type_code, detention_type_description FROM Ref_Detention_Type ORDER BY COUNT(detention_type_code) LIMIT 1
SELECT S.bio_data, S.student_details, SL.amount_of_loan FROM Students S JOIN Student_Loans SL ON S.student_id = SL.student_id WHERE SL.amount_of_loan > (SELECT AVG(amount_of_loan) FROM Student_Loans)
SELECT bio_data, student_details FROM Students WHERE student_id IN ( SELECT student_id FROM Student_Loans GROUP BY student_id HAVING AVG(amount_of_loan) > ( SELECT AVG(amount_of_loan) FROM Student_Loans ) );
SELECT MIN(date_of_loan) FROM Student_Loans
SELECT MIN(date_of_loan) FROM Student_Loans
SELECT T1.bio_data, T1.student_details FROM Students AS T1 INNER JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id ORDER BY T2.amount_of_loan LIMIT 1;
SELECT bio_data FROM Students WHERE student_id = ( SELECT student_id FROM Student_Loans ORDER BY amount_of_loan LIMIT 1 )
SELECT T1.date_of_loan FROM Student_Loans AS T1 INNER JOIN Transcripts AS T2 ON T1.student_id = T2.student_id ORDER BY T1.amount_of_loan DESC LIMIT 1
SELECT T1.date_of_transcript FROM Transcripts AS T1 INNER JOIN Student_Loans AS T2 ON T1.student_id = T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1
SELECT T1.teacher_details FROM Teachers AS T1 INNER JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.class_details LIKE '%earliest%' ORDER BY T2.class_id LIMIT 1
SELECT T1.teacher_details, T1.teacher_id, T3.student_id, T3.date_of_transcript FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id = T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id = T3.student_id ORDER BY T3.date_of_transcript LIMIT 1
SELECT student_id, SUM(amount_of_loan) FROM Student_Loans GROUP BY student_id
SELECT student_id, SUM(amount_of_loan) FROM Student_Loans GROUP BY student_id
SELECT T1.student_id, T1.bio_data, COUNT(T2.class_id) FROM Students AS T1 INNER JOIN Classes AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id
SELECT T1.student_id, T2.bio_data, COUNT(T3.class_id) FROM Students AS T1 INNER JOIN Classes AS T3 ON T1.student_id = T3.student_id INNER JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id
SELECT COUNT(*) FROM Detention;
SELECT COUNT(*) FROM Detention
SELECT address_type_description FROM Ref_Address_Types WHERE address_type_code = ( SELECT address_type_code FROM Students_Addresses GROUP BY address_type_code ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT T1.address_type_description, COUNT(*) FROM Ref_Address_Types AS T1 INNER JOIN Students_Addresses AS T2 ON T1.address_type_code = T2.address_type_code GROUP BY T1.address_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT bio_data FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Student_Loans )
SELECT bio_data FROM Students WHERE student_id NOT IN ( SELECT student_id FROM Student_Loans )
SELECT date_from, date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING COUNT(transcript_id) = 2 )
SELECT T1.date_from, T1.date_to FROM Students_Addresses AS T1 INNER JOIN Transcripts AS T2 ON T1.student_id = T2.student_id WHERE T2.transcript_details = 'Good' GROUP BY T1.student_address_id HAVING COUNT(T2.transcript_id) = 2
SELECT datetime_detention_start FROM Detention;
SELECT datetime_detention_start FROM Detention
SELECT Name FROM Author
SELECT Name FROM Author
SELECT Name, Address FROM Client
SELECT Name, Address FROM Client
SELECT Title, ISBN, SalePrice FROM Book
SELECT Title, ISBN, SalePrice FROM Book
SELECT COUNT(*) FROM Book
SELECT COUNT(*) FROM Book;
SELECT COUNT(idAuthor) FROM Author
SELECT COUNT(idAuthor) FROM Author
SELECT COUNT(IdClient) FROM Client
SELECT COUNT(IdClient) FROM Client
SELECT Name, Address FROM Client ORDER BY Name
SELECT Name, Address FROM Client ORDER BY Name
SELECT T1.Title, T3.Name FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor
SELECT T1.Title, T3.Name FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor
SELECT IdOrder, Name FROM Orders JOIN Client ON IdClient = IdClient
SELECT IdOrder, C.Name FROM Orders O JOIN Client C ON O.IdClient = C.IdClient
SELECT T1.Name ,  COUNT(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author GROUP BY T1.Name
SELECT T1.Name ,  COUNT(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author GROUP BY T1.idAuthor
SELECT ISBN , COUNT(*) FROM Books_Order GROUP BY ISBN
SELECT ISBN ,  SUM(amount) FROM Books_Order GROUP BY ISBN
SELECT ISBN ,  SUM(amount) FROM Books_Order GROUP BY ISBN
SELECT ISBN, SUM(amount) FROM Books_Order GROUP BY ISBN
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T2.ISBN ORDER BY SUM(T2.amount) DESC LIMIT 1
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T2.ISBN ORDER BY SUM(T2.amount) DESC LIMIT 1
SELECT T1.Title, T2.PurchasePrice FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T2.amount = (SELECT MAX(amount) FROM Books_Order) AND T2.PurchasePrice IS NOT NULL;
SELECT T1.Title, T1.PurchasePrice FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN GROUP BY T1.ISBN ORDER BY SUM(T2.amount) DESC LIMIT 1
SELECT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN
SELECT DISTINCT T1.Title FROM Book AS T1 JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN
SELECT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient
SELECT DISTINCT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient
SELECT T1.Name, COUNT(T2.IdOrder) FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.Name
SELECT T1.Name, COUNT(T2.IdOrder) FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient
SELECT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T1.IdClient ORDER BY COUNT(T2.IdOrder) DESC LIMIT 1
SELECT T1.Name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.IdClient = T2.IdClient GROUP BY T2.IdClient ORDER BY COUNT(T2.IdOrder) DESC LIMIT 1
SELECT T2.Name ,  SUM(T1.amount) FROM Books_Order AS T1 JOIN Client AS T2 ON T1.IdOrder = T2.IdClient GROUP BY T2.Name
SELECT T1.Name ,  SUM(T2.amount) FROM Client AS T1 JOIN Books_Order AS T2 ON T1.IdClient = T2.IdOrder GROUP BY T1.IdClient;
SELECT T2.Name FROM Books_Order AS T1 INNER JOIN Client AS T2 ON T1.IdOrder = T2.IdClient GROUP BY T2.Name ORDER BY SUM(T1.amount) DESC LIMIT 1
SELECT T2.Name FROM Books_Order AS T1 INNER JOIN Client AS T2 ON T1.IdOrder = T2.IdClient GROUP BY T1.IdOrder ORDER BY SUM(T1.amount) DESC LIMIT 1
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)
SELECT Title FROM Book WHERE ISBN NOT IN (SELECT ISBN FROM Books_Order)
SELECT T1.Name FROM Client AS T1 LEFT JOIN Orders AS T2 ON T1.IdClient = T2.IdClient WHERE T2.IdOrder IS NULL
SELECT Name FROM Client WHERE IdClient NOT IN (SELECT IdClient FROM Orders)
SELECT MAX(SalePrice) , MIN(SalePrice) FROM Book
SELECT MAX(SalePrice) , MIN(SalePrice) FROM Book
SELECT AVG(PurchasePrice) ,  AVG(SalePrice) FROM Book
SELECT AVG(PurchasePrice) ,  AVG(SalePrice) FROM Book
SELECT MAX(SalePrice) - MIN(PurchasePrice) FROM Book
SELECT MAX(SalePrice) - MAX(PurchasePrice) FROM Book
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book)
SELECT Title FROM Book WHERE SalePrice > (SELECT AVG(SalePrice) FROM Book)
SELECT Title FROM Book WHERE SalePrice = ( SELECT MIN(SalePrice) FROM Book );
SELECT Title FROM Book WHERE SalePrice = (SELECT MIN(SalePrice) FROM Book)
SELECT Title FROM Book ORDER BY PurchasePrice DESC LIMIT 1
SELECT Title FROM Book ORDER BY PurchasePrice DESC LIMIT 1
SELECT AVG(SalePrice) FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell')
SELECT AVG(SalePrice) FROM Book WHERE Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell')
SELECT T1.SalePrice FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = 'Plato'
SELECT T1.SalePrice FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name = 'Plato'
SELECT T1.Title FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T2.Author = (SELECT idAuthor FROM Author WHERE Name = 'George Orwell') ORDER BY T1.SalePrice LIMIT 1
SELECT T1.Title FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T1.SalePrice = ( SELECT MIN(SalePrice) FROM Book ) AND T3.Name = 'George Orwell'
SELECT T1.Title FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T1.SalePrice < (SELECT AVG(SalePrice) FROM Book) AND T3.Name = 'Plato'
SELECT T1.Title FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T1.SalePrice < (SELECT AVG(SalePrice) FROM Book)
SELECT T1.Name FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author WHERE T2.ISBN = '8233771378567'
SELECT T1.Name FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor = T2.Author WHERE T2.ISBN = '8233771378567'
SELECT T1.Title FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN WHERE T2.Author LIKE '%Plato%'
SELECT DISTINCT T1.Title FROM Book AS T1 JOIN Author_Book AS T2 ON T1.ISBN = T2.ISBN JOIN Author AS T3 ON T2.Author = T3.idAuthor WHERE T3.Name LIKE '%Plato%'
SELECT COUNT(*) FROM Books_Order WHERE ISBN = '8233771378567'
SELECT COUNT(*) FROM Books_Order WHERE ISBN = '8233771378567'
SELECT IdOrder FROM Books_Order WHERE ISBN IN ('8233771378567', '4554672899910')
SELECT IdOrder FROM Books_Order WHERE ISBN IN ('8233771378567', '4554672899910')
SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = '0000001' AND DateExped IS NULL) INTERSECT SELECT ISBN FROM Books_Order WHERE IdOrder IN (SELECT IdOrder FROM Orders WHERE IdClient = '0000002' AND DateExped IS NULL)
SELECT ISBN FROM Books_Order WHERE IdClient IN (SELECT IdClient FROM Client WHERE Name = 'Peter Doe' OR Name = 'James Smith') ORDER BY IdOrder
SELECT T1.Title FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T2.IdOrder IN ( SELECT IdOrder FROM Orders WHERE IdClient = '0000003' ) EXCEPT SELECT T1.Title FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T2.IdOrder IN ( SELECT IdOrder FROM Orders WHERE IdClient = '0000001' );
SELECT T1.Title FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T2.IdOrder IN ( SELECT IdOrder FROM Orders WHERE IdClient = '0000003' ) EXCEPT SELECT T1.Title FROM Book AS T1 INNER JOIN Books_Order AS T2 ON T1.ISBN = T2.ISBN WHERE T2.IdOrder IN ( SELECT IdOrder FROM Orders WHERE IdClient = '0000001' );
SELECT T1.Name FROM Client AS T1 JOIN Books_Order AS T2 ON T1.IdClient = T2.IdOrder WHERE T2.ISBN IN ( SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice' )
SELECT T1.Name FROM Client AS T1 JOIN Books_Order AS T2 ON T1.IdClient = T2.IdOrder WHERE T2.ISBN IN ( SELECT ISBN FROM Book WHERE Title = 'Pride and Prejudice' )
SELECT COUNT(*) FROM book;
SELECT Title FROM book ORDER BY Title ASC
SELECT Title FROM book ORDER BY Pages DESC
SELECT Type, Release FROM book
SELECT MAX(Chapters), MIN(Chapters) FROM book
SELECT Title FROM book WHERE Type != 'Poet'
SELECT AVG(Rating) FROM review;
SELECT T1.Title, T2.Rating FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID
SELECT T1.Chapters, MAX(T2.Rating) FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T1.Chapters DESC LIMIT 1
SELECT MIN(T1.Pages) AS rank FROM book AS T1 INNER JOIN review AS T2 ON T1.Book_ID = T2.Book_ID
SELECT T2.Title FROM review AS T1 INNER JOIN book AS T2 ON T1.Book_ID = T2.Book_ID WHERE T1.Rank = ( SELECT MAX(Rank) FROM review );
SELECT AVG(T1.Readers_in_Million) FROM review AS T1 INNER JOIN book AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Type = 'Novel'
SELECT Type, COUNT(*) FROM book GROUP BY Type
SELECT Type FROM book GROUP BY Type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT Type FROM book GROUP BY Type HAVING COUNT(Book_ID) >= 3;
SELECT Title FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY Rating ASC;
SELECT Title, Audio FROM book JOIN review ON book.Book_ID = review.Book_ID ORDER BY Readers_in_Million DESC
SELECT COUNT(*) FROM book WHERE Book_ID NOT IN ( SELECT Book_ID FROM review );
SELECT Type FROM book WHERE Chapters > 75 INTERSECT SELECT Type FROM book WHERE Chapters < 50
SELECT COUNT(DISTINCT Type) FROM book
SELECT Type, Title FROM book WHERE Book_ID NOT IN ( SELECT Book_ID FROM review );
SELECT COUNT(*) FROM customer
SELECT COUNT(*) FROM customer;
SELECT Name FROM customer ORDER BY Level_of_Membership ASC
SELECT Name FROM customer ORDER BY Level_of_Membership ASC
SELECT Nationality, Card_Credit FROM customer
SELECT Nationality, Card_Credit FROM customer
SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia')
SELECT Name FROM customer WHERE Nationality IN ('England', 'Australia')
SELECT AVG(Card_Credit) FROM customer WHERE Level_of_Membership > 1;
SELECT AVG(CASE WHEN Level_of_Membership > 1 THEN Card_Credit ELSE NULL END) FROM customer
SELECT Card_Credit FROM customer WHERE Level_of_Membership = ( SELECT MAX(Level_of_Membership) FROM customer )
SELECT Name, Card_Credit FROM customer WHERE Level_of_Membership = ( SELECT MAX(Level_of_Membership) FROM customer );
SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality
SELECT Nationality, COUNT(*) FROM customer GROUP BY Nationality
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(Customer_ID) DESC LIMIT 1
SELECT T1.Nationality FROM customer AS T1 INNER JOIN customer AS T2 ON T1.Customer_ID = T2.Customer_ID WHERE T1.Card_Credit < 50 AND T2.Card_Credit > 75
SELECT T1.Nationality FROM customer AS T1 INNER JOIN customer AS T2 ON T1.Customer_ID > T2.Customer_ID WHERE T1.Card_Credit BETWEEN 50 AND 74
SELECT T1.Name, T2.Dish_Name FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID
SELECT T1.Name, T2.Dish_Name FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID
SELECT T1.Name, T2.Dish_Name FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T2.Quantity DESC
SELECT T2.Name, T2.Dish_Name, SUM(T1.Quantity) FROM customer_order AS T1 INNER JOIN customer AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Customer_ID ORDER BY SUM(T1.Quantity) DESC
SELECT T1.Name, COUNT(T2.Dish_Name) FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Name
SELECT T1.Name ,  SUM(T2.Quantity) FROM customer AS T1 INNER JOIN customer_order AS T2 ON T1.Customer_ID = T2.Customer_ID GROUP BY T1.Name
SELECT Name FROM customer WHERE Customer_ID IN ( SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1 )
SELECT Name FROM customer WHERE Customer_ID IN ( SELECT Customer_ID FROM customer_order GROUP BY Customer_ID HAVING SUM(Quantity) > 1 )
SELECT DISTINCT Manager FROM branch
SELECT DISTINCT Manager FROM branch
SELECT Name FROM customer WHERE Customer_ID NOT IN ( SELECT Customer_ID FROM customer_order )
SELECT Name FROM customer WHERE Customer_ID NOT IN ( SELECT Customer_ID FROM customer_order )
SELECT COUNT(*) FROM member
SELECT Name FROM member ORDER BY Age ASC
SELECT Name, Nationality FROM member
SELECT Name FROM member WHERE Nationality != 'England'
SELECT Name FROM member WHERE Age = 19 OR Age = 20;
SELECT Name FROM member ORDER BY Age LIMIT 1;
SELECT Nationality, COUNT(*) FROM member GROUP BY Nationality
SELECT Nationality FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(Member_ID) >= 2
SELECT T1.Club_Name, T2.Year_Join FROM club AS T1 INNER JOIN club_leader AS T2 ON T1.Club_ID = T2.Club_ID
SELECT T1.Team_Leader FROM club AS T1 INNER JOIN club_leader AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Overall_Ranking > 100
SELECT T1.Team_Leader FROM club AS T1 INNER JOIN club_leader AS T2 ON T1.Club_ID = T2.Club_ID WHERE STRFTIME('%Y', T2.Year_Join) < '2018'
SELECT T1.Team_Leader FROM club AS T1 INNER JOIN club_leader AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.Club_Name = 'Houston'
SELECT Name FROM member WHERE Member_ID NOT IN ( SELECT Member_ID FROM club_leader )
SELECT Nationality FROM member WHERE Age > 22 INTERSECT SELECT Nationality FROM member WHERE Age < 19
SELECT AVG(T1.Age) FROM member AS T1 INNER JOIN club_leader AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Year_Join = '2018'
SELECT Club_Name FROM club WHERE Club_Name LIKE '%state%'
SELECT Collection_Subset_Name FROM Collection_Subsets
SELECT Collection_Subset_Name FROM Collection_Subsets
SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'
SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = 'Top collection'
SELECT Document_Subset_Name FROM Document_Subsets
SELECT Document_Subset_Name FROM Document_Subsets
SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'
SELECT Document_Subset_Name, Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000'
SELECT Document_Object_ID FROM Document_Objects
SELECT Document_Object_ID FROM Document_Objects
SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'
SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin'
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'
SELECT Owner FROM Document_Objects WHERE Description = 'Braeden Collection'
SELECT T1.Owner FROM Document_Objects AS T1 INNER JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Document_Object_ID = 8
SELECT T1.Owner FROM Document_Objects AS T1 INNER JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner = 'Marlin'
SELECT DISTINCT Description FROM Document_Objects
SELECT DISTINCT Description FROM Document_Objects WHERE Parent_Document_Object_ID IS NOT NULL
SELECT COUNT(DISTINCT Owner) FROM Document_Objects WHERE Parent_Document_Object_ID = (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')
SELECT COUNT(DISTINCT Owner) FROM Document_Objects WHERE Parent_Document_Object_ID = (SELECT Parent_Document_Object_ID FROM Document_Objects WHERE Owner = 'Marlin')
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IS NULL
SELECT Parent_Document_Object_ID, COUNT(*) FROM Document_Objects GROUP BY Parent_Document_Object_ID
SELECT COUNT(DISTINCT Parent_Document_Object_ID), Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID
SELECT Collection_Name FROM Collections WHERE Parent_Collection_ID IS NULL
SELECT Collection_Name FROM Collections WHERE Parent_Collection_ID IS NULL
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'
SELECT Collection_Description FROM Collections WHERE Collection_Name = 'Best'
SELECT Collection_Name FROM Collections WHERE Parent_Collection_ID = 6
SELECT Collection_Name FROM Collections WHERE Parent_Collection_ID = 6
SELECT Collection_Name FROM Collections WHERE Parent_Collection_ID IS NULL
SELECT Collection_Name FROM Collections WHERE Parent_Collection_ID IS NULL
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(Document_Object_ID) > 1)
SELECT Document_Object_ID FROM Document_Objects WHERE Parent_Document_Object_ID IN (SELECT Parent_Document_Object_ID FROM Document_Objects GROUP BY Parent_Document_Object_ID HAVING COUNT(Document_Object_ID) > 1)
SELECT COUNT(Collection_ID) FROM Collections WHERE Parent_Collection_ID = 6
SELECT COUNT(Collection_ID) FROM Collections WHERE Parent_Collection_ID = 6
SELECT T1.Document_Object_ID FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner = 'Ransom'
SELECT T2.Related_Document_Object_ID FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner = 'Ransom'
SELECT DISTINCT T1.Collection_Subset_ID, T2.Collection_Subset_Name, COUNT(T3.Collection_ID) FROM Collection_Subsets AS T2 INNER JOIN Collection_Subset_Members AS T3 ON T2.Collection_Subset_ID = T3.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID
SELECT T1.Collection_Subset_ID, T1.Collection_Subset_Name, COUNT(*) FROM Collection_Subsets AS T1 INNER JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID GROUP BY T1.Collection_Subset_ID
SELECT Document_Object_ID, COUNT(DISTINCT Parent_Document_Object_ID) FROM Document_Objects GROUP BY Document_Object_ID ORDER BY COUNT(DISTINCT Parent_Document_Object_ID) DESC LIMIT 1
SELECT COUNT(DISTINCT Parent_Document_Object_ID) FROM Document_Objects
SELECT D1.Document_Object_ID, COUNT(D2.Document_Object_ID) FROM Document_Subset_Members AS D1JOIN Document_Subset_Members AS D2 ON D1.Related_Document_Object_ID = D2.Document_Object_ID GROUP BY D1.Document_Object_ID ORDER BY COUNT(D2.Document_Object_ID) ASC LIMIT 1
SELECT MIN(Document_Object_ID) FROM Document_Subset_Members
SELECT DS.Document_Object_ID, COUNT(DS2.Related_Document_Object_ID) FROM Document_Subset_Members DS JOIN Document_Subset_Members DS2 ON DS.Document_Subset_ID = DS2.Document_Subset_ID WHERE DS.Document_Object_ID != DS2.Document_Object_ID GROUP BY DS.Document_Object_ID HAVING COUNT(DS2.Related_Document_Object_ID) BETWEEN 2 AND 4
SELECT T1.Document_Object_ID, COUNT(T2.Related_Document_Object_ID) FROM Document_Subset_Members AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Related_Document_Object_ID WHERE T1.Document_Subset_ID BETWEEN 2 AND 4 GROUP BY T1.Document_Object_ID
SELECT DISTINCT T1.Owner FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID WHERE T2.Related_Document_Object_ID IN (9)
SELECT DISTINCT T2.Owner FROM Document_Subset_Members AS T1 INNER JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID = T2.Document_Object_ID WHERE T2.Owner != 'Braeden'
SELECT T3.Document_Subset_Name FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID INNER JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID = T3.Document_Subset_ID WHERE T1.Owner = 'Braeden'
SELECT T3.Document_Subset_Name FROM Document_Objects AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID INNER JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID = T3.Document_Subset_ID WHERE T1.Owner = 'Braeden'
SELECT DISTINCT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DISTINCT DSM.Related_Document_Object_ID) FROM Document_Subsets DS INNER JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID
SELECT DISTINCT T1.Document_Subset_ID, T1.Document_Subset_Name, COUNT(T3.Document_Object_ID) FROM Document_Subsets AS T1 INNER JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID INNER JOIN Document_Objects AS T3 ON T2.Document_Object_ID = T3.Document_Object_ID GROUP BY T1.Document_Subset_ID, T1.Document_Subset_Name
SELECT DS.Document_Subset_ID, DS.Document_Subset_Name, COUNT(DSM.Document_Object_ID) FROM Document_Subsets DS INNER JOIN Document_Subset_Members DSM ON DS.Document_Subset_ID = DSM.Document_Subset_ID GROUP BY DS.Document_Subset_ID ORDER BY COUNT(DSM.Document_Object_ID) DESC LIMIT 1
SELECT T3.Document_Subset_ID, T3.Document_Subset_Name, COUNT(T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID = T2.Document_Subset_ID JOIN Document_Subsets AS T3 ON T1.Document_Subset_ID = T3.Document_Subset_ID GROUP BY T3.Document_Subset_ID, T3.Document_Subset_Name ORDER BY COUNT(T1.Document_Object_ID) DESC LIMIT 1
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = 547
SELECT T2.Document_Object_ID FROM Document_Subset_Members AS T1 INNER JOIN Document_Objects AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID WHERE T1.Document_Subset_ID = 547
SELECT T3.Document_Subset_Name, T1.Document_Object_ID FROM Document_Subsets AS T2 INNER JOIN Document_Subset_Members AS T1 ON T2.Document_Subset_ID = T1.Document_Subset_ID INNER JOIN Document_Subsets AS T3 ON T1.Document_Subset_ID = T3.Document_Subset_ID
SELECT T3.Document_Subset_Name, T1.Document_Object_ID FROM Document_Subsets AS T2 INNER JOIN Document_Subset_Members AS T1 ON T2.Document_Subset_ID = T1.Document_Subset_ID INNER JOIN Document_Subsets AS T3 ON T1.Document_Subset_ID = T3.Document_Subset_ID
SELECT T1.Collection_Name FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Document_Object_ID = ( SELECT Document_Object_ID FROM Document_Objects WHERE Owner = 'Ransom' )
SELECT T1.Collection_Name FROM Document_Objects AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner = 'Ransom' AND T2.Collection_ID IN ( SELECT Collection_ID FROM Collections WHERE Parent_Collection_ID IS NULL )
SELECT COUNT(DISTINCT Collection_ID) , Document_Object_ID FROM Documents_in_Collections GROUP BY Document_Object_ID
SELECT COUNT(DISTINCT Collection_ID) FROM Documents_in_Collections GROUP BY Document_Object_ID
SELECT COUNT(DISTINCT Collection_ID) FROM Documents_in_Collections WHERE Collection_ID = 6
SELECT COUNT(DISTINCT Collection_ID) FROM Documents_in_Collections WHERE Collection_ID = 6
SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = 6
SELECT COUNT(DISTINCT Document_Object_ID) FROM Documents_in_Collections WHERE Collection_ID = 6;
SELECT T1.Collection_Name, T1.Collection_ID, COUNT(T2.Document_Object_ID) FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T1.Collection_ID ORDER BY COUNT(T2.Document_Object_ID) DESC LIMIT 1
SELECT T1.Collection_Name, T1.Collection_ID, COUNT(T2.Document_Object_ID) FROM Collections AS T1 INNER JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = 'Best' GROUP BY T1.Collection_ID ORDER BY COUNT(T2.Document_Object_ID) DESC LIMIT 1
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = (SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000') AND Related_Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = 6)
SELECT DISTINCT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = ( SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000' ) UNION SELECT DISTINCT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = ( SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best' );
SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best') EXCEPT SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID IN (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best for 2000')
SELECT DISTINCT DSM2.Document_Object_ID FROM Document_Subset_Members AS DSM2 JOIN Document_Subsets AS DS ON DSM2.Document_Subset_ID = DS.Document_Subset_ID JOIN Collections AS C ON DS.Document_Subset_Name = C.Collection_Name WHERE DS.Document_Subset_Name != 'Best for 2000' AND DSM2.Document_Object_ID IN (SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = 6)
SELECT Document_Object_ID FROM Document_Subset_Members WHERE Document_Subset_ID = ( SELECT Document_Subset_ID FROM Document_Subsets WHERE Document_Subset_Name = 'Best for 2000' ) OR Document_Object_ID IN ( SELECT Document_Object_ID FROM Documents_in_Collections WHERE Collection_ID = 6 )
SELECT DISTINCT D.Document_Object_ID FROM Document_Subset_Members AS D INNER JOIN Document_Subsets AS DS ON D.Document_Subset_ID = DS.Document_Subset_ID WHERE DS.Document_Subset_Name IN ('Best for 2000', 'Best')
SELECT DISTINCT T1.Collection_Name FROM Collections AS T1 INNER JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T2.Related_Collection_ID = ( SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best' )
SELECT T1.Collection_Name FROM Collections AS T1 INNER JOIN Collection_Subset_Members AS T2 ON T1.Collection_ID = T2.Related_Collection_ID WHERE T2.Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')
SELECT COUNT(*) FROM Collection_Subset_Members WHERE Related_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')
SELECT COUNT(DISTINCT Related_Collection_ID) FROM Collection_Subset_Members WHERE Related_Collection_ID = (SELECT Collection_ID FROM Collections WHERE Collection_Name = 'Best')
SELECT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 INNER JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID WHERE T2.Collection_ID = 6;
SELECT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 INNER JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID = T2.Collection_Subset_ID WHERE T2.Collection_ID = 6
SELECT COUNT(*) FROM songs WHERE name LIKE '%Love%'
SELECT name FROM songs ORDER BY name ASC
SELECT name, language FROM songs;
SELECT MAX(voice_sound_quality) , MIN(voice_sound_quality) FROM performance_score;
SELECT voice_sound_quality, rhythm_tempo, stage_presence FROM performance_score WHERE participant_id = (SELECT id FROM participants WHERE name = 'Freeway')
SELECT id, language, original_artist FROM songs WHERE name != 'Love'
SELECT name, original_artist FROM songs WHERE english_translation = 'All the streets of love';
SELECT DISTINCT T2.stage_presence FROM songs AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.songs_id WHERE T1.language = 'English'
SELECT T1.id, T1.name FROM participants AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.participant_id GROUP BY T1.id HAVING COUNT(T2.songs_id) >= 2
SELECT T1.id, T1.name, COUNT(T2.songs_id) AS popularity FROM participants AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.participant_id GROUP BY T1.id ORDER BY popularity DESC;
SELECT T1.id, T1.name FROM participants AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.participant_id WHERE T2.`voice_sound_quality` = 5 OR T2.`rhythm_tempo` = 5
SELECT T2.voice_sound_quality FROM songs AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.songs_id WHERE T1.name = 'The Balkan Girls' AND T1.language = 'English'
SELECT T2.id, T2.name FROM performance_score AS T1 INNER JOIN songs AS T2 ON T1.songs_id = T2.id GROUP BY T1.songs_id ORDER BY COUNT(T1.participant_id) DESC LIMIT 1
SELECT COUNT(*) FROM performance_score WHERE stage_presence < 7 OR stage_presence > 9;
SELECT COUNT(*) FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score );
SELECT AVG(rhythm_tempo) FROM performance_score GROUP BY songs_id
SELECT DISTINCT T1.name FROM participants AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.participant_id INNER JOIN songs AS T3 ON T2.songs_id = T3.id WHERE T3.language = 'English'
SELECT T1.name, T2.popularity FROM participants AS T1 INNER JOIN performance_score AS T2 ON T1.id = T2.participant_id INNER JOIN songs AS T3 ON T2.songs_id = T3.id WHERE T3.language IN ('Croatian', 'English') AND T3.id IN (SELECT songs_id FROM performance_score GROUP BY songs_id HAVING COUNT(DISTINCT participant_id) = 2)
SELECT name FROM songs WHERE name LIKE '%Is%'
SELECT T2.original_artist FROM performance_score AS T1 INNER JOIN songs AS T2 ON T1.songs_id = T2.id WHERE T1.rhythm_tempo > 5 ORDER BY T1.voice_sound_quality DESC
SELECT COUNT(city_name) FROM City;
SELECT COUNT(city_name) FROM City;
SELECT DISTINCT state FROM City;
SELECT DISTINCT state FROM City;
SELECT COUNT(DISTINCT country) FROM City;
SELECT COUNT(DISTINCT country) FROM City;
SELECT city_name, city_code, state, country FROM City;
SELECT city_name, city_code, state, country FROM City;
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore';
SELECT latitude, longitude FROM City WHERE city_name = 'Baltimore';
SELECT city_name FROM City WHERE state = 'PA';
SELECT city_name FROM City WHERE state = 'PA'
SELECT COUNT(*) FROM City WHERE country = 'Canada';
SELECT COUNT(*) FROM City WHERE country = 'Canada';
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude;
SELECT city_name FROM City WHERE country = 'USA' ORDER BY latitude;
SELECT state, COUNT(city_code) FROM City GROUP BY state
SELECT COUNT(city_name) , state FROM City GROUP BY state
SELECT country, COUNT(city_code) FROM City GROUP BY country
SELECT COUNT(country) FROM City GROUP BY country
SELECT state FROM City GROUP BY state HAVING COUNT(city_name) >= 2
SELECT state FROM City GROUP BY state HAVING COUNT(city_code) > 1
SELECT state FROM City GROUP BY state ORDER BY COUNT(city_code) DESC LIMIT 1;
SELECT state FROM City GROUP BY state ORDER BY COUNT(city_code) DESC LIMIT 1;
SELECT country FROM City GROUP BY country ORDER BY COUNT(city_code) LIMIT 1;
SELECT country FROM City GROUP BY country ORDER BY COUNT(city_code) LIMIT 1;
SELECT Fname, LName FROM Student WHERE city_code IN (SELECT city_code FROM City WHERE state = 'MD') LIMIT 1
SELECT Fname, LName FROM Student WHERE city_code = 'BAL'
SELECT COUNT(*) FROM Student WHERE city_code = 'BAL'
SELECT COUNT(*) FROM Student WHERE city_code IN ( SELECT city_code FROM City WHERE country = 'China' )
SELECT T1.Fname, T1.Major FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.city_name = 'Baltimore'
SELECT T1.Fname, T1.Major FROM Student AS T1 INNER JOIN City AS T2 ON T1.city_code = T2.city_code WHERE T2.city_name = 'Baltimore'
SELECT COUNT(*) , country FROM City GROUP BY country
SELECT T1.country, COUNT(T1.city_code) FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.country
SELECT COUNT(*) , city_name FROM City GROUP BY city_code
SELECT city_name FROM City GROUP BY city_code
SELECT city_name FROM City GROUP BY state ORDER BY COUNT(city_code) DESC LIMIT 1;
SELECT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state ORDER BY COUNT(T2.StuID) DESC LIMIT 1
SELECT country FROM City GROUP BY country ORDER BY COUNT(city_code) LIMIT 1;
SELECT T1.country FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.country ORDER BY COUNT(T2.StuID) LIMIT 1
SELECT T1.city_name FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.city_code HAVING COUNT(T2.StuID) >= 3
SELECT T1.city_name FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.city_code HAVING COUNT(T2.StuID) >= 3
SELECT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state HAVING COUNT(T2.StuID) > 5
SELECT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code GROUP BY T1.state HAVING COUNT(T2.StuID) > 5
SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA')
SELECT StuID FROM Student WHERE city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA')
SELECT StuID FROM Student WHERE Sex = 'F' AND city_code IN ('PIT', 'PHL')
SELECT StuID FROM Student WHERE Sex = 'F' AND city_code IN (SELECT city_code FROM City WHERE state = 'PA')
SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN ( SELECT city_code FROM City WHERE country = 'USA' )
SELECT StuID FROM Student WHERE Sex = 'M' AND city_code NOT IN (SELECT city_code FROM City WHERE country = 'USA')
SELECT distance FROM Direct_distance WHERE city2_code = 'CHI' AND city1_code = 'BAL';
SELECT distance FROM Direct_distance WHERE city2_code = 'CHI' AND city1_code = 'BAL';
SELECT distance FROM Direct_distance WHERE city2_code = 'BAL' AND city1_code = 'NEW';
SELECT distance FROM Direct_distance WHERE city2_code = 'BAL' AND city1_code = 'NWK';
SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance;
SELECT AVG(distance), MIN(distance), MAX(distance) FROM Direct_distance;
SELECT city2_code FROM Direct_distance WHERE distance = ( SELECT MAX(distance) FROM Direct_distance );
SELECT city2_code FROM Direct_distance WHERE distance = ( SELECT MAX(distance) FROM Direct_distance );
SELECT T2.city_code FROM Direct_distance AS T1 INNER JOIN City AS T2 ON T1.city1_code = T2.city_code OR T1.city2_code = T2.city_code GROUP BY T1.city1_code, T1.city2_code HAVING AVG(T1.distance) > ( SELECT AVG(distance) FROM Direct_distance );
SELECT city2_code FROM Direct_distance WHERE distance > ( SELECT AVG(distance) FROM Direct_distance );
SELECT city2_code FROM Direct_distance WHERE distance < 1000 LIMIT 2;
SELECT city2_code FROM Direct_distance WHERE distance < 1000;
SELECT SUM(distance) FROM Direct_distance WHERE city2_code = 'BAL';
SELECT SUM(distance) FROM Direct_distance WHERE city2_code != 'BAL';
SELECT AVG(distance) FROM Direct_distance WHERE city2_code IN ('BAL')
SELECT AVG(distance) FROM Direct_distance WHERE city2_code IN ('BOS', 'BAL')
SELECT T2.city_name FROM Direct_distance AS T1 INNER JOIN City AS T2 ON T1.city1_code = T2.city_code WHERE T1.city2_code = 'CHI' ORDER BY T1.distance LIMIT 1;
SELECT T2.city_name FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T1.latitude = ( SELECT MAX(latitude) FROM City ) AND T1.longitude = ( SELECT MIN(longitude) FROM City );
SELECT T2.city_name FROM Direct_distance AS T1 INNER JOIN City AS T2 ON T1.city1_code = T2.city_code WHERE T1.city2_code IN ('BAL') ORDER BY T1.distance LIMIT 1;
SELECT T2.city_name FROM Direct_distance AS T1 INNER JOIN City AS T2 ON T1.city1_code = T2.city_code WHERE T1.city2_code = ( SELECT city_code FROM City ORDER BY sqrt(POWER(T2.latitude - 42.3585, 2) + POWER(T2.longitude - 71.0596, 2)) LIMIT 1 )
SELECT city2_code ,  SUM(distance) FROM Direct_distance GROUP BY city2_code
SELECT T1.city_code ,  SUM(T2.distance) FROM City AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code GROUP BY T1.city_code
SELECT T2.city_name ,  AVG(T1.distance) FROM Direct_distance AS T1 INNER JOIN City AS T2 ON T1.city1_code = T2.city_code OR T1.city2_code = T2.city_code GROUP BY T2.city_name
SELECT T2.city_name ,  AVG(T1.distance) FROM Direct_distance AS T1 INNER JOIN City AS T2 ON T1.city1_code = T2.city_code OR T1.city2_code = T2.city_code GROUP BY T1.city1_code ,  T1.city2_code
SELECT T1.distance FROM Direct_distance AS T1 INNER JOIN Student AS T2 ON T1.city1_code = T2.city_code AND T1.city2_code = T2.city_code WHERE T2.Fname = 'Linda' AND T2.LName = 'Smith' OR T2.Fname = 'Tracy' AND T2.LName = 'Kim';
SELECT distance FROM Direct_distance WHERE city1_code IN ('BAL', 'HKG') AND city2_code IN ('HKG', 'BAL');
SELECT T1.Fname, T1.LName FROM Student AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city2_code WHERE T2.distance = ( SELECT MAX(distance) FROM Direct_distance ) AND T1.LName = 'Smith'
SELECT T1.Fname, T1.LName FROM Student AS T1 INNER JOIN Direct_distance AS T2 ON T1.city_code = T2.city1_code WHERE T2.distance = ( SELECT MAX(distance) FROM Direct_distance ) AND T1.LName = 'Smith'
SELECT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code WHERE T2.Fname = 'Linda'
SELECT T1.state FROM City AS T1 INNER JOIN Student AS T2 ON T1.city_code = T2.city_code WHERE T2.Fname = 'Linda'
SELECT * FROM Sailors WHERE age > 30;
SELECT name FROM Sailors WHERE age > 30;
SELECT name, age FROM Sailors WHERE age < 30;
SELECT name, age FROM Sailors WHERE age < 30;
SELECT day FROM Reserves WHERE sid = 1;
SELECT bid FROM Reserves WHERE sid = 1
SELECT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.bid = 102;
SELECT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.bid = 102
SELECT DISTINCT bid FROM Reserves;
SELECT bid FROM Reserves;
SELECT name FROM Sailors WHERE name LIKE '%e%'
SELECT name FROM Sailors WHERE name LIKE '%e%'
SELECT sid FROM Sailors WHERE sid NOT IN ( SELECT sid FROM Sailors ) AND age > ( SELECT MAX(age) FROM Sailors );
SELECT sid FROM Sailors WHERE age != (SELECT MIN(age) FROM Sailors)
SELECT DISTINCT name FROM Sailors WHERE age > ( SELECT MAX(age) FROM Sailors WHERE rating < 7 )
SELECT DISTINCT T1.name FROM Sailors AS T1 INNER JOIN Sailors AS T2 ON T1.sid > T2.sid WHERE T2.rating < 7
SELECT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid GROUP BY T2.sid HAVING COUNT(T2.bid) > 0
SELECT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid GROUP BY T2.sid HAVING COUNT(T2.bid) > 0
SELECT T1.sid, T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid GROUP BY T1.sid HAVING COUNT(T2.bid) > 1
SELECT T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid GROUP BY T1.sid HAVING COUNT(T2.bid) >= 2
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red' OR color = 'blue')
SELECT T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid IN (SELECT bid FROM Boats WHERE color IN ('red', 'blue')) AND T1.sid IN (SELECT sid FROM Sailors WHERE sid IN (SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color IN ('red', 'blue'))))
SELECT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color IN ('red', 'blue')
SELECT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color IN ('red', 'blue')
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red' OR color = 'blue')
SELECT sid FROM Reserves WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red' OR color = 'blue')
SELECT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid IN (SELECT bid FROM Boats WHERE color = 'red' OR color = 'blue')
SELECT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid IN (101, 102)
SELECT sid FROM Sailors WHERE sid NOT IN ( SELECT sid FROM Reserves );
SELECT sid FROM Sailors WHERE sid NOT IN ( SELECT sid FROM Reserves )
SELECT name, sid FROM Sailors WHERE sid NOT IN ( SELECT sid FROM Reserves );
SELECT name, sid FROM Sailors WHERE sid NOT IN ( SELECT sid FROM Reserves )
SELECT sid FROM Sailors WHERE sid NOT IN ( SELECT sid FROM Reserves )
SELECT T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid IS NULL
SELECT T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid = 103
SELECT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.bid = 103
SELECT name FROM Sailors WHERE rating > ( SELECT rating FROM Sailors WHERE name = 'Luis' )
SELECT name FROM Sailors WHERE rating > ( SELECT rating FROM Sailors WHERE name = 'Luis' )
SELECT name FROM Sailors WHERE rating > ( SELECT rating FROM Sailors WHERE name = 'Luis' )
SELECT name FROM Sailors WHERE rating > ( SELECT rating FROM Sailors WHERE name = 'Luis' )
SELECT name, sid FROM Sailors WHERE rating > 2 AND sid IN ( SELECT sid FROM Reserves );
SELECT T1.name, T1.sid FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid IN ( SELECT bid FROM Boats WHERE rating >= 3 ) AND T2.day IS NOT NULL
SELECT name, age FROM Sailors WHERE age = ( SELECT MAX(age) FROM Sailors )
SELECT name, age FROM Sailors WHERE age = ( SELECT MAX(age) FROM Sailors )
SELECT COUNT(sid) FROM Sailors
SELECT COUNT(*) FROM Sailors;
SELECT AVG(age) FROM Sailors WHERE rating = 7;
SELECT AVG(age) FROM Sailors WHERE rating = 7;
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'
SELECT COUNT(*) FROM Sailors WHERE name LIKE 'D%'
SELECT AVG(rating), MAX(age) FROM Sailors
SELECT AVG(rating), MAX(age) FROM Sailors
SELECT COUNT(sid) FROM Reserves GROUP BY bid
SELECT COUNT(*) , b.bid FROM Reserves r JOIN Boats b ON r.bid = b.bid GROUP BY b.bid
SELECT COUNT(*) FROM Reserves WHERE bid > 50
SELECT COUNT(*) FROM Reserves WHERE bid > 50
SELECT COUNT(*) FROM Reserves WHERE bid IN ( SELECT bid FROM Reserves GROUP BY bid HAVING COUNT(sid) > 1 )
SELECT COUNT(*) FROM Boats WHERE bid IN ( SELECT bid FROM Reserves GROUP BY bid HAVING COUNT(sid) > 1 )
SELECT COUNT(*) , b.bid FROM Reserves AS R JOIN Boats AS B ON R.bid = B.bid WHERE R.sid > 1 GROUP BY B.bid
SELECT COUNT(*) , T1.bid FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.id > 1 GROUP BY T1.bid
SELECT T1.rating, AVG(T2.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid IN (SELECT bid FROM Boats WHERE color = 'red') GROUP BY T1.rating
SELECT T1.rating, AVG(T2.age) FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid IN (SELECT bid FROM Boats WHERE color = 'red') AND T2.day IS NOT NULL GROUP BY T1.rating
SELECT name, rating, age FROM Sailors ORDER BY rating, age
SELECT name, rating, age FROM Sailors ORDER BY rating, age;
SELECT COUNT(*) FROM Boats;
SELECT COUNT(*) FROM Boats;
SELECT COUNT(*) FROM Boats WHERE color = 'red'
SELECT COUNT(*) FROM Boats WHERE color = 'red'
SELECT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T2.age BETWEEN 20 AND 30;
SELECT T1.name FROM Boats AS T1 INNER JOIN Reserves AS T2 ON T1.bid = T2.bid INNER JOIN Sailors AS T3 ON T2.sid = T3.sid WHERE T3.age BETWEEN 20 AND 30
SELECT T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid INNER JOIN Boats AS T3 ON T2.bid = T3.bid WHERE T3.color = 'red' AND T1.rating > ( SELECT rating FROM Sailors WHERE sid IN ( SELECT sid FROM Reserves WHERE bid = 102 ) )
SELECT T1.name FROM Sailors AS T1 INNER JOIN Reserves AS T2 ON T1.sid = T2.sid WHERE T2.bid IN (SELECT bid FROM Boats WHERE color = 'red') AND T1.rating > (SELECT MAX(rating) FROM Sailors);
SELECT sid FROM Sailors WHERE rating = ( SELECT MAX rating FROM Sailors )
SELECT MAX rating FROM Sailors
SELECT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.bid = 102
SELECT T2.name FROM Reserves AS T1 INNER JOIN Sailors AS T2 ON T1.sid = T2.sid WHERE T1.bid = 102
SELECT name, age FROM Sailors ORDER BY rating DESC
SELECT name, age FROM Sailors ORDER BY rating DESC
SELECT Model FROM headphone ORDER BY Price DESC LIMIT 1
SELECT Model FROM headphone WHERE Price = ( SELECT MAX(Price) FROM headphone )
SELECT Model FROM headphone ORDER BY Model
SELECT DISTINCT Model FROM headphone ORDER BY Model
SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Class FROM headphone GROUP BY Class ORDER BY COUNT(*) DESC LIMIT 1
SELECT Class FROM headphone WHERE Price > 2
SELECT Class FROM headphone GROUP BY Class HAVING COUNT(DISTINCT Class) <= 2
SELECT COUNT(*) , Class FROM headphone WHERE Price > 200 GROUP BY Class
SELECT COUNT(*) FROM headphone WHERE Price > 200 AND Class = 'Prestige'
SELECT COUNT(DISTINCT Earpads) FROM headphone
SELECT COUNT(DISTINCT Earpads) FROM headphone
SELECT Model FROM headphone GROUP BY Model ORDER BY COUNT(Earpads) DESC LIMIT 2;
SELECT Model FROM headphone ORDER BY Earpads DESC LIMIT 2;
SELECT Model, Class, Construction FROM headphone WHERE Price = ( SELECT MIN(Price) FROM headphone );
SELECT Model, Class, Construction FROM headphone WHERE Price = ( SELECT MIN(Price) FROM headphone );
SELECT AVG(Price) FROM headphone GROUP BY Construction
SELECT Construction, AVG(Price) FROM headphone GROUP BY Construction
SELECT Class FROM headphone WHERE Earpads = 'Comfort Pads' INTERSECT SELECT Class FROM headphone WHERE Earpads = 'Bowls'
SELECT Class FROM headphone WHERE Earpads = 'Comfort Pads' INTERSECT SELECT Class FROM headphone WHERE Earpads = 'Bowls'
SELECT Model FROM headphone WHERE Construction != 'Plastic'
SELECT * FROM headphone WHERE Construction != 'Plastic'
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone)
SELECT Model FROM headphone WHERE Price < (SELECT AVG(Price) FROM headphone)
SELECT Name FROM store ORDER BY Date_Opened
SELECT Name FROM store ORDER BY Date_Opened
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'
SELECT Name, Parking FROM store WHERE Neighborhood = 'Tarzana'
SELECT COUNT(DISTINCT Neighborhood) FROM store
SELECT COUNT(DISTINCT Neighborhood) FROM store
SELECT Neighborhood, COUNT(*) FROM store GROUP BY Neighborhood
SELECT Neighborhood, COUNT(*) FROM store GROUP BY Neighborhood
SELECT T2.Name, SUM(T1.Quantity) FROM stock AS T1 INNER JOIN store AS T2 ON T1.Store_ID = T2.Store_ID GROUP BY T2.Name ORDER BY SUM(T1.Quantity) DESC LIMIT 1;
SELECT T2.Name, T1.Quantity FROM stock AS T1 INNER JOIN store AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Quantity > 0;
SELECT T2.Name FROM stock AS T1 INNER JOIN store AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Quantity = 0;
SELECT T2.Name FROM stock AS T1 INNER JOIN store AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Quantity = 0
SELECT Model FROM headphone WHERE Headphone_ID NOT IN ( SELECT Headphone_ID FROM stock );
SELECT Model FROM headphone WHERE Headphone_ID NOT IN ( SELECT Headphone_ID FROM stock );
SELECT T2.Model FROM stock AS T1 INNER JOIN headphone AS T2 ON T1.Headphone_ID = T2.Headphone_ID GROUP BY T2.Model ORDER BY SUM(T1.Quantity) DESC LIMIT 1;
SELECT Model FROM headphone WHERE Headphone_ID IN ( SELECT Headphone_ID FROM stock GROUP BY Headphone_ID ORDER BY SUM(Quantity) DESC LIMIT 1 )
SELECT Quantity FROM stock WHERE Store_ID = ( SELECT Store_ID FROM store WHERE Name = 'Woodman' )
SELECT SUM(T2.Quantity) FROM store AS T1 INNER JOIN stock AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Name = 'Woodman';
SELECT T2.Neighborhood FROM stock AS T1 INNER JOIN store AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Quantity = 0
SELECT T2.Neighborhood FROM stock AS T1 INNER JOIN store AS T2 ON T1.Store_ID = T2.Store_ID WHERE T1.Quantity = 0
SELECT COUNT(*) FROM Author;
SELECT COUNT(*) FROM Author;
SELECT COUNT(*) FROM Paper;
SELECT COUNT(*) FROM Paper;
SELECT COUNT(*) FROM Affiliation
SELECT COUNT(*) FROM Affiliation;
SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000;
SELECT COUNT(*) FROM Paper WHERE venue = 'NAACL' AND year = 2000;
SELECT COUNT(T1.paper_id) FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T1.year = 2009 AND T2.affiliation_id IN ( SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University' )
SELECT COUNT(DISTINCT T1.paper_id) FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T1.year = 2009 AND T2.affiliation_id IS NOT NULL
SELECT name, address FROM Affiliation;
SELECT name, address FROM Affiliation;
SELECT venue, year FROM Paper ORDER BY year;
SELECT DISTINCT venue FROM Paper ORDER BY year
SELECT T1.title, T2.paper_id FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = 'Harvard University'
SELECT T1.title, T2.paper_id FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name = 'Harvard University'
SELECT T1.title, T1.paper_id FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown'
SELECT T1.title, T2.paper_id FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id = 9573;
SELECT T1.title FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name IN ('Stanford University', 'Columbia University')
SELECT T1.title, T2.paper_id FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Affiliation AS T3 ON T2.affiliation_id = T3.affiliation_id WHERE T3.name IN ('Stanford University', 'Columbia University')
SELECT T1.title FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name = 'Mckeown, Kathleen' AND T3.name = 'Rambow, Owen'
SELECT T1.title, T2.paper_id FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id IN (SELECT author_id FROM Author WHERE name = 'Mckeown, Kathleen') AND T2.author_id IN (SELECT author_id FROM Author WHERE email = 'mckeownk@cs.cornell.edu')
SELECT T1.title, T2.paper_id FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id IN ( SELECT author_id FROM Author WHERE name = 'Mckeown' EXCEPT SELECT author_id FROM Author WHERE name = 'Rambow' )
SELECT T1.title, T2.paper_id FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id IN ( SELECT author_id FROM Author WHERE name = 'Mckeown' EXCEPT SELECT author_id FROM Author WHERE name = 'Rambow' )
SELECT T1.title, T2.paper_id FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id IN (1233, 9573, 12785)
SELECT T1.title, T2.paper_id FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id INNER JOIN Author AS T3 ON T2.author_id = T3.author_id WHERE T3.name IN ('McKeown, Kathleen', 'Rambow, Owen')
SELECT T2.name, COUNT(T1.paper_id) FROM Author_list AS T1 INNER JOIN Author AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id ORDER BY COUNT(T1.paper_id) DESC;
SELECT COUNT(DISTINCT T2.paper_id) ,  T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id GROUP BY T1.name ORDER BY COUNT(T2.paper_id) DESC;
SELECT affiliation_id FROM Affiliation WHERE affiliation_id IN ( SELECT affiliation_id FROM Author_list GROUP BY affiliation_id ORDER BY COUNT(DISTINCT paper_id) ASC )
SELECT T2.name FROM Author_list AS T1 INNER JOIN Affiliation AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY COUNT(T1.paper_id) DESC
SELECT T2.name FROM Author_list AS T1 INNER JOIN Author AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id HAVING COUNT(T1.paper_id) > 50
SELECT T2.name FROM Author_list AS T1 INNER JOIN Author AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id HAVING COUNT(T1.paper_id) > 50
SELECT T2.name FROM Author_list AS T1 INNER JOIN Author AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id HAVING COUNT(T1.paper_id) = 1
SELECT T2.name FROM Author_list AS T1 INNER JOIN Author AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id HAVING COUNT(T1.paper_id) = 1
SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(paper_id) DESC LIMIT 1
SELECT venue, year FROM Paper GROUP BY venue, year ORDER BY COUNT(paper_id) DESC LIMIT 1;
SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(paper_id) LIMIT 1;
SELECT venue FROM Paper GROUP BY venue ORDER BY COUNT(paper_id) LIMIT 1;
SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002';
SELECT COUNT(*) FROM Citation WHERE cited_paper_id IN ('A00-1002')
SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002' AND paper_id = 'D12-1027';
SELECT COUNT(*) FROM Citation WHERE cited_paper_id = 'A00-1002' AND paper_id = 'D12-1027';
SELECT T1.paper_id, COUNT(T2.cited_paper_id) FROM Paper AS T1 INNER JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(T2.cited_paper_id) DESC LIMIT 1
SELECT T1.id, COUNT(T2.paper_id) FROM Paper AS T1 INNER JOIN Citation AS T2 ON T1.paper_id = T2.cited_paper_id GROUP BY T2.paper_id ORDER BY COUNT(T2.paper_id) DESC LIMIT 1
SELECT T1.title FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.cited_paper_id GROUP BY T1.paper_id ORDER BY COUNT(T2.paper_id) DESC LIMIT 1;
SELECT T1.title FROM Paper AS T1 INNER JOIN Citation AS T2 ON T1.paper_id = T2.cited_paper_id GROUP BY T1.paper_id ORDER BY COUNT(T2.paper_id) DESC LIMIT 1
SELECT T1.paper_id, COUNT(*) FROM Citation AS T1 INNER JOIN Paper AS T2 ON T1.cited_paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(*) DESC LIMIT 10;
SELECT T1.paper_id, COUNT(T2.cited_paper_id) FROM Paper AS T1 INNER JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(T2.cited_paper_id) DESC LIMIT 10;
SELECT COUNT(T1.paper_id) FROM Citation AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id = 9573;
SELECT COUNT(T1.paper_id) FROM Citation AS T1 INNER JOIN Author_list AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T2.author_id = 9573;
SELECT COUNT(T1.paper_id) FROM Citation AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id IN ( SELECT author_id FROM Author WHERE name = 'Mckeown , Kathleen' )
SELECT COUNT(T1.paper_id) FROM Citation AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id IN ( SELECT author_id FROM Author WHERE name = 'Mckeown , Kathleen' )
SELECT T1.name, COUNT(T3.cited_paper_id) FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id INNER JOIN Citation AS T3 ON T2.paper_id = T3.paper_id GROUP BY T1.author_id ORDER BY COUNT(T3.cited_paper_id) DESC LIMIT 1
SELECT T1.name, COUNT(T3.cited_paper_id) FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id INNER JOIN Citation AS T3 ON T2.paper_id = T3.paper_id GROUP BY T1.author_id ORDER BY COUNT(T3.cited_paper_id) DESC LIMIT 1
SELECT venue, year FROM Paper WHERE paper_id IN ( SELECT paper_id FROM Author_list WHERE author_id = 9573 );
SELECT T1.venue, T1.year FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.author_id IN (1233, 9573, 12785) AND T2.author_id = ( SELECT author_id FROM Author WHERE name = 'Mckeown , Kathleen' )
SELECT venue, year FROM Paper WHERE venue != 'NAACL'
SELECT T1.venue, T1.year FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T2.affiliation_id IS NOT NULL AND T2.affiliation_id = ( SELECT affiliation_id FROM Affiliation WHERE name = 'Columbia University' )
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.paper_id IN ( SELECT paper_id FROM Paper WHERE year = 2009 ) GROUP BY T1.name ORDER BY COUNT(T2.paper_id) DESC LIMIT 1;
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.paper_id IN ( SELECT paper_id FROM Paper WHERE year = 2009 ) GROUP BY T1.name ORDER BY COUNT(T2.paper_id) DESC LIMIT 1
SELECT T1.name FROM Affiliation AS T1 INNER JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY COUNT(T2.paper_id) DESC LIMIT 3
SELECT T1.name FROM Affiliation AS T1 INNER JOIN Author_list AS T2 ON T1.affiliation_id = T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY COUNT(T2.paper_id) DESC LIMIT 3;
SELECT COUNT(DISTINCT T1.paper_id) FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T1.year <= 2009;
SELECT COUNT(DISTINCT T1.paper_id) FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T1.year <= 2009;
SELECT COUNT(DISTINCT T1.paper_id) FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T1.year BETWEEN 2000 AND 2009
SELECT COUNT(DISTINCT T1.paper_id) FROM Paper AS T1 INNER JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id WHERE T1.year BETWEEN 2000 AND 2009;
SELECT T1.title FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(T2.author_id) DESC LIMIT 1;
SELECT T1.title FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id ORDER BY COUNT(T2.author_id) DESC LIMIT 1;
SELECT COUNT(T2.author_id) FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id WHERE T1.name = 'Mckeown , Kathleen'
SELECT COUNT(T2.author_id) FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id WHERE T1.name = 'Mckeown , Kathleen'
SELECT T2.name FROM Author_list AS T1 INNER JOIN Author AS T2 ON T1.author_id = T2.author_id WHERE T1.paper_id IN ('D15-1001') GROUP BY T2.name ORDER BY COUNT(T2.name) DESC LIMIT 1;
SELECT T2.name FROM Author_list AS T1 INNER JOIN Author AS T2 ON T1.author_id = T2.author_id WHERE T1.paper_id IN ( SELECT paper_id FROM Author_list GROUP BY paper_id ORDER BY COUNT(DISTINCT author_id) DESC LIMIT 1 ) AND T1.paper_id = 'D15-1001';
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'
SELECT paper_id FROM Paper WHERE title LIKE '%translation%'
SELECT T1.paper_id, T1.title FROM Paper AS T1 LEFT JOIN Citation AS T2 ON T1.paper_id = T2.cited_paper_id WHERE T2.cited_paper_id IS NULL
SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN ( SELECT cited_paper_id FROM Citation );
SELECT T2.name FROM Author_list AS T1 INNER JOIN Affiliation AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE T2.address LIKE '%China%' GROUP BY T2.affiliation_id ORDER BY COUNT(T1.paper_id) DESC LIMIT 1;
SELECT T2.name FROM Author_list AS T1 INNER JOIN Affiliation AS T2 ON T1.affiliation_id = T2.affiliation_id WHERE T1.paper_id IN ( SELECT paper_id FROM Paper WHERE address LIKE '%China%' ) GROUP BY T2.name ORDER BY COUNT(T1.paper_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT year), venue FROM Paper GROUP BY year;
SELECT venue, year, COUNT(*) FROM Paper GROUP BY venue, year;
SELECT COUNT(DISTINCT affiliation_id) ,  affiliation_id FROM Affiliation GROUP BY affiliation_id
SELECT COUNT(DISTINCT affiliation_id) FROM Affiliation;
SELECT T1.title FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id HAVING COUNT(T2.paper_id) > 50;
SELECT T1.title FROM Paper AS T1 JOIN Citation AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id HAVING COUNT(T2.paper_id) > 50
SELECT COUNT(DISTINCT T1.author_id) FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.paper_id NOT IN ( SELECT paper_id FROM Citation GROUP BY paper_id HAVING COUNT(cited_paper_id) > 50 )
SELECT COUNT(DISTINCT T1.author_id) FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.paper_id NOT IN ( SELECT paper_id FROM Citation WHERE cited_paper_id IN ( SELECT paper_id FROM Citation WHERE cited_paper_id IN ( SELECT paper_id FROM Citation WHERE cited_paper_id IN ( SELECT paper_id FROM Citation ) ) ) )
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id INNER JOIN Paper AS T3 ON T2.paper_id = T3.paper_id WHERE T3.year = 2009 AND T3.venue IN ('NAACL', 'ACL')
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'NAACL' AND year = 2009) OR T2.paper_id IN (SELECT paper_id FROM Paper WHERE venue = 'ACL' AND year = 2009);
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.paper_id NOT IN ( SELECT paper_id FROM Paper WHERE venue = 'ACL' )
SELECT T1.name FROM Author AS T1 INNER JOIN Author_list AS T2 ON T1.author_id = T2.author_id WHERE T2.paper_id NOT IN ( SELECT paper_id FROM Paper WHERE venue = 'ACL' )
SELECT COUNT(*) FROM conference;
SELECT COUNT(*) FROM conference
SELECT DISTINCT Conference_Name FROM conference;
SELECT DISTINCT Conference_Name FROM conference
SELECT Conference_Name, Year, Location FROM conference
SELECT Conference_Name, Year, Location FROM conference
SELECT Conference_Name, COUNT(*) FROM conference GROUP BY Conference_Name
SELECT COUNT(*) , Conference_Name FROM conference GROUP BY Conference_Name
SELECT Year, COUNT(*) FROM conference GROUP BY Year
SELECT COUNT(*) FROM conference WHERE YEAR = (SELECT MIN(YEAR) FROM conference);
SELECT Year FROM conference GROUP BY Year ORDER BY COUNT(*) LIMIT 1;
SELECT MIN(YEAR) FROM conference
SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) >= 2
SELECT Location FROM conference GROUP BY Location HAVING COUNT(*) >= 2
SELECT Institution_Name, Location, Founded FROM institution
SELECT Institution_Name, Location, Founded FROM institution
SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900;
SELECT COUNT(*) FROM institution WHERE Founded BETWEEN 1850 AND 1900;
SELECT Institution_Name, Location FROM institution ORDER BY Founded DESC LIMIT 1
SELECT Institution_Name, Location FROM institution ORDER BY Founded LIMIT 1
SELECT T1.Institution_Name, COUNT(T2.staff_ID) FROM institution AS T1 INNER JOIN staff AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Founded > 1800 GROUP BY T1.Institution_Name
SELECT T1.Institution_Name, COUNT(T2.staff_ID) AS staff_count FROM institution AS T1 JOIN staff AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Founded > 1800 GROUP BY T1.Institution_Name
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN ( SELECT Institution_ID FROM staff )
SELECT Institution_Name FROM institution WHERE Institution_ID NOT IN ( SELECT Institution_ID FROM staff );
SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff)
SELECT name FROM staff WHERE Age > (SELECT AVG(Age) FROM staff)
SELECT MAX(Age) , MIN(Age) FROM staff WHERE Nationality = 'United States'
SELECT MAX(Age) , MIN(Age) FROM staff
SELECT T1.Conference_Name FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID WHERE T2.staff_ID IN ( SELECT staff_ID FROM staff WHERE Nationality = 'Canada' )
SELECT T2.Conference_Name FROM conference_participation AS T1 INNER JOIN conference AS T2 ON T1.Conference_ID = T2.Conference_ID INNER JOIN staff AS T3 ON T1.staff_ID = T3.staff_ID WHERE T3.Nationality = 'Canada'
SELECT T1.name FROM staff AS T1 INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID WHERE T2.role IN ('Speaker', 'Sponsor') GROUP BY T1.name HAVING COUNT(DISTINCT T2.Conference_ID) > 1
SELECT T1.name FROM staff AS T1 INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID WHERE T2.role IN ('Speaker', 'Sponsor') GROUP BY T1.name HAVING COUNT(DISTINCT T2.Conference_ID) > 1
SELECT T1.name FROM conference_participation AS T1 INNER JOIN staff AS T2 ON T1.staff_ID = T2.staff_ID WHERE T1.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'ACL') AND T1.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Conference_Name = 'Naccl')
SELECT T1.name FROM staff AS T1 INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID INNER JOIN conference AS T3 ON T2.Conference_ID = T3.Conference_ID WHERE T3.Conference_Name IN ('ACL', 'NACCL') GROUP BY T1.name
SELECT T1.name FROM staff AS T1 INNER JOIN conference_participation AS T2 ON T1.staff_ID = T2.staff_ID INNER JOIN conference AS T3 ON T2.Conference_ID = T3.Conference_ID WHERE T3.Year IN (2003, 2004)
SELECT T2.name FROM conference_participation AS T1 INNER JOIN staff AS T2 ON T1.staff_ID = T2.staff_ID WHERE T1.Conference_ID IN (SELECT Conference_ID FROM conference WHERE Year BETWEEN 2003 AND 2004)
SELECT T1.Conference_Name, T1.Year, COUNT(T2.role) FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID
SELECT T1.Conference_Name, T1.Year, COUNT(T2.participant_count) FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID
SELECT T1.Conference_Name FROM conference AS T1 INNER JOIN ( SELECT Conference_ID , COUNT(*) as num FROM conference_participation GROUP BY Conference_ID ORDER BY num DESC LIMIT 2 ) AS T2 ON T1.Conference_ID = T2.Conference_ID
SELECT T1.Conference_Name FROM conference AS T1 INNER JOIN conference_participation AS T2 ON T1.Conference_ID = T2.Conference_ID GROUP BY T1.Conference_ID ORDER BY COUNT(T2.staff_ID) DESC LIMIT 2
SELECT name, Nationality FROM staff WHERE staff_ID NOT IN ( SELECT staff_ID FROM conference_participation );
SELECT name, Nationality FROM staff WHERE staff_ID NOT IN ( SELECT staff_ID FROM conference_participation );
SELECT T1.Institution_Name, T1.Location FROM institution AS T1 INNER JOIN conference AS T2 ON T1.Institution_ID = T2.`Location` WHERE T2.Year != 2004
SELECT T1.Institution_Name, T1.Location FROM institution AS T1 INNER JOIN conference AS T2 ON T1.Institution_ID = T2.`Location` WHERE T2.Year != 2004
SELECT pilot_name FROM PilotSkills ORDER BY age LIMIT 1;
SELECT pilot_name FROM PilotSkills ORDER BY age LIMIT 1;
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age;
SELECT pilot_name FROM PilotSkills WHERE age < (SELECT AVG(age) FROM PilotSkills) ORDER BY age ASC
SELECT pilot_name FROM PilotSkills WHERE age < 30;
SELECT pilot_name, age FROM PilotSkills WHERE age < 30;
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age < 35;
SELECT pilot_name FROM PilotSkills WHERE age < 35 AND plane_name = 'Piper Cub'
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter';
SELECT location FROM Hangar WHERE plane_name = 'F-14 Fighter';
SELECT COUNT(DISTINCT location) FROM Hangar
SELECT COUNT(DISTINCT location) FROM Hangar
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32;
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Jones' AND age = 32;
SELECT COUNT(*) FROM PilotSkills WHERE age > 40;
SELECT COUNT(*) FROM PilotSkills WHERE age > 40;
SELECT COUNT(*) FROM PilotSkills WHERE age < 35 AND plane_name = 'B-52 Bomber'
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age < 35 AND plane_name = 'B-52 Bomber'
SELECT pilot_name FROM PilotSkills WHERE age = ( SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub' )
SELECT pilot_name FROM PilotSkills WHERE age = ( SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub' )
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(pilot_name) DESC LIMIT 1;
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(pilot_name) DESC LIMIT 1;
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(pilot_name) LIMIT 1;
SELECT plane_name FROM PilotSkills GROUP BY plane_name ORDER BY COUNT(pilot_name) LIMIT 1;
SELECT COUNT(*) FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T1.location = 'Chicago'
SELECT COUNT(DISTINCT T2.pilot_name) FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1.plane_name = T2.plane_name WHERE T1.location = 'Chicago'
SELECT plane_name FROM PilotSkills WHERE age = 41 AND pilot_name = 'Smith'
SELECT plane_name FROM PilotSkills WHERE pilot_name = 'Smith' AND age = 41;
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills
SELECT COUNT(DISTINCT plane_name) FROM PilotSkills
SELECT COUNT(plane_name) FROM PilotSkills WHERE pilot_name = 'Smith'
SELECT COUNT(plane_name) FROM PilotSkills WHERE pilot_name = 'Smith'
SELECT COUNT(DISTINCT T1.pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age > 40;
SELECT COUNT(*) FROM PilotSkills WHERE age > 40;
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC
SELECT pilot_name FROM PilotSkills WHERE age BETWEEN 30 AND 40 ORDER BY age ASC
SELECT pilot_name FROM PilotSkills ORDER BY age DESC
SELECT pilot_name FROM PilotSkills ORDER BY age DESC
SELECT location FROM Hangar ORDER BY plane_name;
SELECT location FROM Hangar ORDER BY plane_name;
SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name
SELECT DISTINCT plane_name FROM PilotSkills ORDER BY plane_name
SELECT COUNT(*) FROM PilotSkills WHERE age > 40 OR age < 30;
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > 40 OR age < 30;
SELECT pilot_name, age FROM PilotSkills WHERE plane_name = 'Piper Cub' AND age > 35 OR plane_name = 'F-14 Fighter' AND age < 30
SELECT pilot_name, age FROM PilotSkills WHERE (plane_name = 'Piper Cub' AND age > 35) OR (plane_name = 'F-14 Fighter' AND age < 30)
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' EXCEPT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber';
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' EXCEPT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber'
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'B-52 Bomber')
SELECT pilot_name FROM PilotSkills WHERE plane_name = 'Piper Cub' INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name = 'B-52 Bomber';
SELECT AVG(age), MIN(age) FROM PilotSkills
SELECT AVG(age), MIN(age) FROM PilotSkills
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ( SELECT plane_name FROM Hangar WHERE location = 'Austin' ) INTERSECT SELECT pilot_name FROM PilotSkills WHERE plane_name IN ( SELECT plane_name FROM Hangar WHERE location = 'Boston' );
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('B-52 Bomber', 'F-14 Fighter')
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')
SELECT pilot_name FROM PilotSkills WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')
SELECT AVG(age) FROM PilotSkills GROUP BY plane_name
SELECT AVG(age) FROM PilotSkills GROUP BY plane_name
SELECT COUNT(plane_name) , plane_name FROM PilotSkills GROUP BY plane_name
SELECT COUNT(plane_name) , plane_name FROM PilotSkills GROUP BY plane_name
SELECT T1.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name ORDER BY T2.plane_name
SELECT plane_name, MAX(age) FROM PilotSkills GROUP BY plane_name
SELECT T1.pilot_name FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name GROUP BY T1.pilot_name ORDER BY age LIMIT 1
SELECT T1.plane_name, T2.pilot_name FROM Hangar AS T1 INNER JOIN PilotSkills AS T2 ON T1(plane_name) = T2(plane_name) GROUP BY T2.pilot_name ORDER BY MAX(T2.age), T1.plane_name
SELECT MAX(age) FROM PilotSkills GROUP BY pilot_name
SELECT pilot_name, MAX(age) FROM PilotSkills GROUP BY pilot_name
SELECT T2.location, COUNT(T1.pilot_name), AVG(T1.age) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name GROUP BY T2.location
SELECT T2.location, COUNT(T1.pilot_name) AS num_pilots, AVG(T1.age) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name GROUP BY T2.location
SELECT COUNT(DISTINCT T1.pilot_name) FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T1.age < 35
SELECT plane_name, COUNT(*) FROM PilotSkills WHERE age < 35 GROUP BY plane_name
SELECT T2.location FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name ORDER BY T1.age LIMIT 1
SELECT T2.location FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name ORDER BY T1.age LIMIT 1
SELECT T1.pilot_name, T1.age FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin'
SELECT T1.pilot_name, T1.age FROM PilotSkills AS T1 INNER JOIN Hangar AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin'
SELECT pilot_name FROM PilotSkills WHERE age > ( SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub' ) ORDER BY pilot_name;
SELECT pilot_name FROM PilotSkills WHERE age > ( SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub' ) ORDER BY pilot_name
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age < ( SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter' )
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age < ( SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'F-14 Fighter' )
SELECT DISTINCT plane_name FROM PilotSkills WHERE plane_name LIKE '%Bomber%'
SELECT plane_name FROM PilotSkills WHERE plane_name LIKE '%Bomber%'
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > (SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub')
SELECT COUNT(pilot_name) FROM PilotSkills WHERE age > ( SELECT MIN(age) FROM PilotSkills WHERE plane_name = 'Piper Cub' )
SELECT Name FROM district ORDER BY Area_km DESC LIMIT 1;
SELECT Government_website, Area_km FROM district WHERE Population = ( SELECT MIN(Population) FROM district )
SELECT Name, Population FROM district WHERE Area_km > (SELECT AVG(Area_km) FROM district)
SELECT MAX(Area_km) AS max_area, AVG(Area_km) AS avg_area FROM district
SELECT SUM(Population) FROM district ORDER BY Area_km DESC LIMIT 3;
SELECT District_ID, Name, Government_website FROM district ORDER BY Population DESC;
SELECT Name FROM district WHERE Government_website LIKE '%gov%'
SELECT District_ID, Name FROM district WHERE Population > 4000 OR Area_km > 3000
SELECT Name, Speach_title FROM spokesman
SELECT AVG(Points) , AVG(Age) FROM spokesman WHERE Rank_position = 1
SELECT Name, Points FROM spokesman WHERE Age < 40;
SELECT Name FROM spokesman WHERE Age = ( SELECT MAX(Age) FROM spokesman );
SELECT Name FROM spokesman WHERE Points < (SELECT AVG(Points) FROM spokesman)
SELECT T2.Name FROM spokesman_district AS T1 INNER JOIN district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T1.District_ID ORDER BY COUNT(T1.District_ID) DESC LIMIT 1;
SELECT T2.Name FROM spokesman_district AS T1 INNER JOIN spokesman AS T2 ON T1.Spokesman_ID = T2.Spokesman_ID WHERE T1.Start_year < '2004'
SELECT T1.Name, COUNT(T2.District_ID) FROM district AS T1 INNER JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T1.Name
SELECT T1.Name FROM spokesman_district AS T1 INNER JOIN spokesman AS T2 ON T1.District_ID = T2.District_ID WHERE T2.Rank_position IN ( SELECT Rank_position FROM spokesman GROUP BY Rank_position HAVING COUNT(DISTINCT CASE WHEN T2.Rank_position = 1 THEN T2.District_ID END) > 0 OR COUNT(DISTINCT CASE WHEN T2.Rank_position = 2 THEN T2.District_ID END) > 0 )
SELECT T1.Name FROM district AS T1 INNER JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID GROUP BY T1.Name HAVING COUNT(T1.Name) > 1
SELECT COUNT(DISTRICT_ID) FROM district WHERE District_ID NOT IN ( SELECT District_ID FROM spokesman_district );
SELECT T1.Name FROM spokesman AS T1 INNER JOIN spokesman_district AS T2 ON T1.Speach_title = T2.District_ID WHERE T2.District_ID IS NULL
SELECT SUM(T1.Population), AVG(T1.Population) FROM district AS T1 INNER JOIN spokesman_district AS T2 ON T1.District_ID = T2.District_ID WHERE T2.Spokesman_ID IS NOT NULL;
SELECT title FROM Sculptures WHERE year = ( SELECT MAX(year) FROM Sculptures );
SELECT title FROM Sculptures ORDER BY year DESC LIMIT 1
SELECT title, location FROM Paintings WHERE year = ( SELECT MIN(year) FROM Paintings )
SELECT title, location FROM Paintings WHERE year = ( SELECT MIN(year) FROM Paintings );
SELECT title FROM Sculptures WHERE location = 'Gallery 226'
SELECT title FROM Sculptures WHERE location = 'Gallery 226'
SELECT title, location FROM Paintings
SELECT title, location FROM Paintings
SELECT title, location FROM Sculptures
SELECT title, location FROM Sculptures WHERE location IS NOT NULL
SELECT medium FROM Paintings WHERE paintingID = 80
SELECT medium FROM Paintings WHERE paintingID = 80;
SELECT fname, lname FROM Artists WHERE birthYear > 1850 ORDER BY birthYear LIMIT 1, 1
SELECT fname, lname FROM Artists WHERE birthYear > 1850;
SELECT title, year FROM Sculptures WHERE location != 'Gallery 226'
SELECT title, year FROM Sculptures WHERE location IS NULL
SELECT DISTINCT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year < 1900
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year < 1900 GROUP BY T1.artistID
SELECT DISTINCT T1.birthYear FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year > 1920
SELECT DISTINCT T1.birthYear FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.year > 1920
SELECT fname, lname FROM Artists ORDER BY deathYear LIMIT 1
SELECT T2.fname, T2.lname FROM Artists AS T1 INNER JOIN Artists AS T2 ON T1.artistID > T2.artistID ORDER BY T2.deathYear ASC LIMIT 1
SELECT T2.age FROM Artists AS T1 INNER JOIN ( SELECT artistID, birthYear, deathYear, ROW_NUMBER() OVER (ORDER BY deathYear - birthYear) AS row_num FROM Artists ) AS T2 ON T1.artistID = T2.artistID WHERE T2.row_num = 1
SELECT MIN(deathYear) - birthYear AS age FROM Artists WHERE deathYear IS NOT NULL;
SELECT fname, birthYear FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1
SELECT fname, birthYear - deathYear AS age FROM Artists WHERE deathYear = ( SELECT MIN(deathYear) FROM Artists )
SELECT COUNT(*) FROM Paintings WHERE location = 'Gallery 240';
SELECT COUNT(*) FROM Paintings WHERE location = 'Gallery 240'
SELECT COUNT(*) FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID ORDER BY T2.deathYear - T2.birthYear DESC LIMIT 1
SELECT COUNT(paintingID) FROM Paintings WHERE painterID = ( SELECT artistID FROM Artists ORDER BY deathYear - birthYear DESC LIMIT 1 )
SELECT T2.title, T2.year FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.fname = 'Mary'
SELECT T2.title, T1.birthYear FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T1.fname = 'Mary'
SELECT width_mm FROM Paintings WHERE painterID IN ( SELECT artistID FROM Artists WHERE birthYear < 1850 )
SELECT width_mm FROM Paintings WHERE painterID IN (SELECT artistID FROM Artists WHERE birthYear < 1850)
SELECT location, medium FROM Paintings WHERE painterID = (SELECT artistID FROM Artists WHERE fname = 'Pablo')
SELECT location, mediumOn FROM Paintings WHERE painterID = (SELECT artistID FROM Artists WHERE fname = 'Pablo')
SELECT T1.lname, T1.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID INNER JOIN Sculptures AS T3 ON T1.artistID = T3.sculptorID
SELECT T1.lname, T1.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID INNER JOIN Sculptures AS T3 ON T1.artistID = T3.sculptorID
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' AND T2.mediumOn = 'lithographic'
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium IN ('oil', 'lithographic')
SELECT T1.birthYear FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year = 1884 AND T2.mediumOn = 'canvas'
SELECT T1.birthYear FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year = 1884
SELECT DISTINCT T1.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' AND T2.location = 'Gallery 241'
SELECT T1.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' AND T2.location = 'Gallery 241';
SELECT COUNT(medium) FROM Paintings GROUP BY medium
SELECT COUNT(medium) FROM Paintings GROUP BY medium
SELECT AVG(height_mm) FROM Paintings WHERE medium = 'oil'
SELECT AVG(height_mm) FROM Paintings WHERE medium = 'oil'
SELECT COUNT(*) , location FROM Paintings WHERE year < 1900 GROUP BY location;
SELECT COUNT(*) FROM Paintings WHERE year < 1900 AND location != 'None'
SELECT title FROM Paintings WHERE year > 1910 AND medium = 'oil'
SELECT title FROM Paintings WHERE year > 1910;
SELECT paintingID FROM Paintings WHERE medium = 'oil' AND location = 'Gallery 240' GROUP BY painterID HAVING COUNT(painterID) = 1
SELECT T1.painterID FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.mediumOn = 'Gallery 240' AND T1.medium = 'oil'
SELECT DISTINCT title FROM Paintings WHERE height_mm > ( SELECT MIN(height_mm) FROM Paintings );
SELECT DISTINCT title FROM Paintings WHERE height_mm > ( SELECT MIN(height_mm) FROM Paintings );
SELECT DISTINCT paintingID FROM Paintings WHERE year > (SELECT MIN(year) FROM Paintings WHERE location = 'Gallery 240')
SELECT DISTINCT paintingID FROM Paintings WHERE year > ( SELECT MIN(year) FROM Paintings WHERE location = 'Gallery 240' ) AND location = 'Gallery 240';
SELECT paintingID FROM Paintings ORDER BY year ASC LIMIT 1;
SELECT paintingID FROM Paintings ORDER BY year ASC LIMIT 1;
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.title LIKE '%female%'
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T2.title LIKE '%female%'
SELECT title FROM Paintings ORDER BY title
SELECT title FROM Paintings ORDER BY title
SELECT DISTINCT title FROM Paintings ORDER BY height_mm
SELECT DISTINCT title FROM Paintings ORDER BY height_mm ASC
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950
SELECT title FROM Paintings WHERE year BETWEEN 1900 AND 1950 UNION SELECT title FROM Sculptures WHERE year BETWEEN 1900 AND 1950
SELECT T2.title FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID WHERE T1.artistID = 222;
SELECT title FROM Paintings WHERE painterID = 222 UNION SELECT title FROM Sculptures WHERE sculptorID = 222
SELECT T1.artistID FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year < 1900 GROUP BY T1.artistID ORDER BY COUNT(T2.paintingID) DESC LIMIT 1
SELECT T1.artistID FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.year < 1900 GROUP BY T1.artistID ORDER BY COUNT(T2.paintingID) DESC LIMIT 1;
SELECT T1.fname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T1.artistID ORDER BY COUNT(T2.sculptureID) DESC LIMIT 1
SELECT T1.fname FROM Artists AS T1 INNER JOIN Sculptures AS T2 ON T1.artistID = T2.sculptorID GROUP BY T1.artistID ORDER BY COUNT(T2.sculptureID) DESC LIMIT 1
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800;
SELECT title FROM Paintings WHERE width_mm < 600 OR height_mm > 800;
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930;
SELECT location FROM Paintings WHERE year < 1885 OR year > 1930;
SELECT paintingID FROM Paintings WHERE height_mm BETWEEN 500 AND 2000;
SELECT paintingID FROM Paintings WHERE height_mm > 500 AND height_mm < 2000
SELECT location FROM Paintings WHERE mediumOn = 'panel' OR mediumOn = 'canvas';
SELECT location FROM Paintings WHERE medium = 'on panel' OR mediumOn = 'canvas';
SELECT location FROM Paintings WHERE year BETWEEN 1885 AND 1930
SELECT location FROM Paintings WHERE year > 1930 AND year < 1885
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'Gallery 241';
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings WHERE medium = 'oil' AND location = 'Gallery 241';
SELECT MAX(height_mm), paintingID FROM Paintings WHERE year < 1900
SELECT height_mm, paintingID FROM Paintings WHERE year < 1900 ORDER BY height_mm DESC LIMIT 1;
SELECT MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year
SELECT MAX(height_mm), MAX(width_mm) FROM Paintings GROUP BY year
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings GROUP BY painterID ORDER BY title
SELECT AVG(height_mm), AVG(width_mm) FROM Paintings GROUP BY painterID ORDER BY title
SELECT T1.fname, COUNT(T2.paintingID) FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T1.artistID HAVING COUNT(T2.paintingID) >= 2
SELECT T1.fname, COUNT(T2.paintingID) FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T1.artistID HAVING COUNT(T2.paintingID) >= 2
SELECT T1.deathYear FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID GROUP BY T1.artistID HAVING COUNT(T2.paintingID) <= 3
SELECT T2.deathYear FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.year < 1884 AND T2.deathYear IS NOT NULL GROUP BY T2.deathYear
SELECT T2.deathYear FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.sculptorID = T2.artistID GROUP BY T2.deathYear ORDER BY COUNT(T1.sculptureID) LIMIT 1
SELECT T2.deathYear FROM Sculptures AS T1 INNER JOIN Artists AS T2 ON T1.sculptorID = T2.artistID GROUP BY T1.sculptorID ORDER BY COUNT(T1.sculptureID) LIMIT 1
SELECT paintingID, height_mm FROM Paintings WHERE width_mm = ( SELECT MAX(width_mm) FROM Paintings WHERE location = 'Gallery 240' ) AND location = 'Gallery 240';
SELECT height_mm, paintingID FROM Paintings WHERE location = 'Gallery 240' ORDER BY width_mm DESC LIMIT 1;
SELECT paintingID FROM Paintings WHERE year < ( SELECT MIN(year) FROM Paintings WHERE location = 'Gallery 240' )
SELECT paintingID FROM Paintings WHERE year < (SELECT MIN(year) FROM Paintings WHERE location = 'Gallery 240')
SELECT paintingID FROM Paintings WHERE height_mm > ( SELECT MAX(height_mm) FROM Paintings WHERE year > 1900 )
SELECT paintingID FROM Paintings WHERE height_mm > ( SELECT MAX(height_mm) FROM Paintings WHERE year > 1900 )
SELECT T1.lname, T1.fname, COUNT(T2.paintingID) FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium = 'oil' GROUP BY T1.artistID ORDER BY COUNT(T2.paintingID) DESC LIMIT 3;
SELECT T2.lname, T2.fname FROM Paintings AS T1 INNER JOIN Artists AS T2 ON T1.painterID = T2.artistID WHERE T1.medium = 'oil' GROUP BY T2.lname, T2.fname ORDER BY COUNT(T1.paintingID) DESC LIMIT 1
SELECT paintingID, location, title FROM Paintings WHERE medium = 'oil' ORDER BY year;
SELECT paintingID, location, title FROM Paintings ORDER BY year
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title
SELECT year, location, title FROM Paintings WHERE height_mm > 1000 ORDER BY title
SELECT T1.lname, T1.fname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID LEFT JOIN Sculptures AS T3 ON T1.artistID = T3.sculptorID WHERE T3.sculptureID IS NULL
SELECT T1.fname, T1.lname FROM Artists AS T1 INNER JOIN Paintings AS T2 ON T1.artistID = T2.painterID WHERE T2.medium != 'sculpture'
SELECT location FROM Paintings WHERE year < 1885 AND mediumOn IS NULL;
SELECT location FROM Paintings WHERE year < 1885 AND mediumOn != 'canvas'
SELECT COUNT(*) FROM race
SELECT COUNT(*) FROM race;
SELECT Winning_driver, Winning_team FROM race ORDER BY Winning_team ASC
SELECT Winning_team FROM race GROUP BY Winning_team ORDER BY Winning_team
SELECT Winning_driver FROM race WHERE Pole_Position != "Junior Strous"
SELECT T2.Driver_ID FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Winning_driver != T1.Pole_Position AND T1.Race_Name = 'Sommet des Legends'
SELECT Constructor FROM driver ORDER BY Age ASC
SELECT Constructor FROM driver ORDER BY Age ASC
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20;
SELECT DISTINCT Entrant FROM driver WHERE Age >= 20;
SELECT MAX(Age) , MIN(Age) FROM driver
SELECT MAX(Age) , MIN(Age) FROM driver
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age < 20 OR Age > 30;
SELECT COUNT(DISTINCT Engine) FROM driver WHERE Age > 30 OR Age < 20;
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC
SELECT T2.Driver_Name, T3.Race_Name FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID INNER JOIN ( SELECT Driver_ID, Race_Name FROM race GROUP BY Driver_ID ) AS T3 ON T1.Driver_ID = T3.Driver_ID
SELECT T2.Driver_Name, T1.Race_Name FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID
SELECT T2.Driver_Name, COUNT(T1.Race_Name) FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T2.Driver_Name
SELECT COUNT(T2.Race_Name) FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID
SELECT T2.Age FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(T1.Driver_ID) DESC LIMIT 1
SELECT T2.Age FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(T1.Driver_ID) DESC LIMIT 1
SELECT T2.Driver_Name, T2.Age FROM race AS T1 JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(T1.Driver_ID) >= 2
SELECT T2.Driver_Name, T2.Age FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(T1.Driver_ID) > 1
SELECT T2.Race_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Age >= 26
SELECT T2.Race_Name FROM driver AS T1 INNER JOIN race AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Age >= 26
SELECT Driver_Name FROM driver WHERE Constructor != 'Bugatti'
SELECT Driver_Name FROM driver WHERE Constructor != 'Bugatti'
SELECT Constructor, COUNT(Driver_ID) FROM driver GROUP BY Constructor
SELECT Constructor, COUNT(Driver_ID) FROM driver GROUP BY Constructor
SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(Driver_ID) DESC LIMIT 1;
SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(Driver_ID) DESC LIMIT 1;
SELECT DISTINCT Engine FROM driver GROUP BY Engine HAVING COUNT(Driver_ID) > 1
SELECT DISTINCT Engine FROM driver WHERE Driver_ID IN (1, 2, 3)
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN ( SELECT Driver_ID FROM race );
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN ( SELECT Driver_ID FROM race )
SELECT Constructor FROM driver WHERE Age < 20 INTERSECT SELECT Constructor FROM driver WHERE Age > 30
SELECT Constructor FROM driver WHERE Age < 20 INTERSECT SELECT Constructor FROM driver WHERE Age > 30
SELECT Winning_team FROM race GROUP BY Winning_team HAVING COUNT(DISTINCT Winning_driver) > 1
SELECT T2.Winning_team FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID GROUP BY T2.Driver_ID HAVING COUNT(*) > 1
SELECT T2.Driver_Name FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong')
SELECT T2.Driver_Name FROM race AS T1 INNER JOIN driver AS T2 ON T1.Driver_ID = T2.Driver_ID WHERE T1.Pole_Position IN ('James Hinchcliffe', 'Carl Skerlong')
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN ( SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe' )
SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race WHERE Pole_Position = 'James Hinchcliffe')
SELECT COUNT(*) FROM languages
SELECT COUNT(*) FROM languages
SELECT name FROM languages ORDER BY name ASC
SELECT name FROM languages ORDER BY name
SELECT name FROM languages WHERE name LIKE '%ish%'
SELECT name FROM languages WHERE name LIKE '%ish%'
SELECT name FROM countries ORDER BY overall_score DESC
SELECT name FROM countries ORDER BY overall_score DESC
SELECT AVG justice_score FROM countries
SELECT AVG justice_score FROM countries
SELECT MAX health_score FROM countries WHERE name != 'Norway' UNION SELECT MIN health_score FROM countries WHERE name != 'Norway'
SELECT MAX health_score FROM countries WHERE name != 'Norway' UNION SELECT MIN health_score FROM countries WHERE name != 'Norway'
SELECT COUNT(DISTINCT language_id) FROM official_languages;
SELECT COUNT(DISTINCT language_id) FROM official_languages;
SELECT name FROM countries ORDER BY education_score DESC;
SELECT name FROM countries ORDER BY education_score DESC;
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1;
SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1;
SELECT T1.name, T3.name FROM countries AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.country_id INNER JOIN languages AS T3 ON T2.language_id = T3.id
SELECT T1.name, T2.name FROM countries AS T1 INNER JOIN official_languages AS T3 ON T1.id = T3.country_id INNER JOIN languages AS T2 ON T3.language_id = T2.id
SELECT T1.name, COUNT(*) FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.name
SELECT T1.name, COUNT(DISTINCT T2.country_id) FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.name
SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.name ORDER BY COUNT(T2.country_id) DESC LIMIT 1
SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.name ORDER BY COUNT(T2.country_id) DESC LIMIT 1
SELECT T2.name FROM official_languages AS T1 INNER JOIN languages AS T2 ON T1.language_id = T2.id GROUP BY T1.country_id HAVING COUNT(T1.country_id) > 1
SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.name HAVING COUNT(DISTINCT T2.country_id) > 1
SELECT AVG(c.overall_score) FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English'
SELECT AVG(c.overall_score) FROM countries c JOIN official_languages ol ON c.id = ol.country_id JOIN languages l ON ol.language_id = l.id WHERE l.name = 'English'
SELECT T2.name FROM official_languages AS T1 INNER JOIN languages AS T2 ON T1.language_id = T2.id GROUP BY T2.name ORDER BY COUNT(T2.name) DESC LIMIT 3;
SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 3
SELECT L.name FROM languages AS L JOIN official_languages AS OL ON L.id = OL.language_id GROUP BY L.name ORDER BY AVG(countries.overall_score) DESC
SELECT T2.name FROM official_languages AS T1 INNER JOIN languages AS T2 ON T1.language_id = T2.id GROUP BY T2.name ORDER BY AVG(T2.name) DESC
SELECT T2.name FROM official_languages AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id GROUP BY T1.language_id ORDER BY COUNT(T1.language_id) DESC LIMIT 1
SELECT T2.name FROM official_languages AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id GROUP BY T2.name ORDER BY COUNT(T1.language_id) DESC LIMIT 1;
SELECT name FROM languages WHERE id NOT IN ( SELECT language_id FROM official_languages );
SELECT name FROM languages WHERE id NOT IN ( SELECT language_id FROM official_languages );
SELECT T1.name FROM countries AS T1 LEFT JOIN official_languages AS T2 ON T1.id = T2.country_id WHERE T2.language_id IS NULL
SELECT T1.name FROM countries AS T1 LEFT JOIN official_languages AS T2 ON T1.id = T2.country_id WHERE T2.language_id IS NULL
SELECT T2.name FROM countries AS T1 INNER JOIN official_languages AS T3 ON T1.id = T3.country_id INNER JOIN languages AS T2 ON T3.language_id = T2.id WHERE T1.overall_score > 95 INTERSECT SELECT T2.name FROM countries AS T1 INNER JOIN official_languages AS T3 ON T1.id = T3.country_id INNER JOIN languages AS T2 ON T3.language_id = T2.id WHERE T1.overall_score < 90
SELECT T2.name FROM countries AS T1 INNER JOIN official_languages AS T3 ON T1.id = T3.country_id INNER JOIN languages AS T2 ON T3.language_id = T2.id WHERE T1.overall_score > 95 INTERSECT SELECT T2.name FROM countries AS T1 INNER JOIN official_languages AS T3 ON T1.id = T3.country_id INNER JOIN languages AS T2 ON T3.language_id = T2.id WHERE T1.overall_score < 90
SELECT T2.country, T2.town_city FROM Addresses AS T1 INNER JOIN Addresses AS T2 ON T1.line_3_area_locality = T2.line_3_area_locality WHERE T1.line_3_area_locality IS NOT NULL AND T2.line_3_area_locality IS NOT NULL
SELECT country, town_city FROM Addresses
SELECT T2.county_state_province FROM Properties AS T1 INNER JOIN Addresses AS T2 ON T1.property_address_id = T2.address_id
SELECT T2.county_state_province FROM Properties AS T1 INNER JOIN Addresses AS T2 ON T1.property_address_id = T2.address_id
SELECT feature_description FROM Features WHERE feature_name = 'rooftop';
SELECT feature_description FROM Features WHERE feature_name = 'rooftop';
SELECT T1.feature_name, T1.feature_description FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id GROUP BY T2.feature_id ORDER BY COUNT(T2.property_id) DESC LIMIT 1
SELECT T1.feature_name, T1.feature_description FROM Features AS T1 INNER JOIN Property_Features AS T2 ON T1.feature_id = T2.feature_id GROUP BY T1.feature_id ORDER BY COUNT(T2.property_id) DESC LIMIT 1
SELECT MIN(room_count) FROM Properties;
SELECT MIN(room_count) FROM Properties;
SELECT COUNT(property_id) FROM Properties WHERE parking_lots = '1' OR garage_yn = '1'
SELECT COUNT(property_id) FROM Properties WHERE parking_lots = '1' OR garage_yn = '1';
SELECT T2.age_category_code FROM Users AS T1 INNER JOIN Ref_User_Categories AS T2 ON T1.user_category_code = T2.user_category_code WHERE T1.other_user_details LIKE '%Mother%' AND T2.user_category_description LIKE '%Mother%'
SELECT T2.user_category_description FROM Users AS T1 INNER JOIN Ref_User_Categories AS T2 ON T1.user_category_code = T2.user_category_code WHERE T1.other_user_details LIKE '%Mother%'
SELECT T2.first_name FROM Properties AS T1 INNER JOIN Users AS T2 ON T1.owner_user_id = T2.user_id GROUP BY T1.owner_user_id ORDER BY COUNT(T1.property_id) DESC LIMIT 1
SELECT T2.first_name FROM Properties AS T1 INNER JOIN Users AS T2 ON T1.owner_user_id = T2.user_id GROUP BY T1.owner_user_id ORDER BY COUNT(T1.property_id) DESC LIMIT 1
SELECT AVG(T1.room_count) FROM Properties AS T1 INNER JOIN Property_Features AS T2 ON T1.property_id = T2.property_id INNER JOIN Features AS T3 ON T2.feature_id = T3.feature_id WHERE T3.feature_name = 'garden'
SELECT AVG(T1.room_count) FROM Properties AS T1 INNER JOIN Property_Features AS T2 ON T1.property_id = T2.property_id INNER JOIN Features AS T3 ON T2.feature_id = T3.feature_id WHERE T3.feature_name = 'garden'
SELECT T1.town_city FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id INNER JOIN Property_Features AS T3 ON T2.property_id = T3.property_id WHERE T3.feature_value LIKE '%swimming%'
SELECT T1.town_city FROM Addresses AS T1 INNER JOIN Properties AS T2 ON T1.address_id = T2.property_address_id WHERE EXISTS ( SELECT 1 FROM Property_Features AS T3 INNER JOIN Features AS T4 ON T3.feature_id = T4.feature_id WHERE T3.property_id = T2.property_id AND T4.feature_name = 'swimming pool' )
SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;
SELECT property_id, vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1
SELECT AVG(room_count) FROM Properties;
SELECT AVG(room_count) FROM Properties;
SELECT COUNT(DISTINCT room_size) FROM Rooms
SELECT COUNT(DISTINCT room_size) FROM Rooms
SELECT T1.user_id, T1.search_string FROM User_Searches AS T1 INNER JOIN User_Searches AS T2 ON T1.user_id = T2.user_id WHERE T1.user_id != T2.user_id GROUP BY T1.user_id HAVING COUNT(T1.search_seq) >= 2
SELECT user_id, search_seq FROM User_Searches GROUP BY user_id HAVING COUNT(search_seq) > 1
SELECT MAX(search_datetime) FROM User_Searches;
SELECT search_datetime FROM User_Searches ORDER BY search_datetime DESC LIMIT 1
SELECT search_datetime, search_string FROM User_Searches ORDER BY search_string DESC;
SELECT search_string, search_datetime FROM User_Searches ORDER BY search_string DESC;
SELECT T2.zip_postcode FROM Properties AS T1 INNER JOIN Addresses AS T2 ON T1.property_address_id = T2.address_id GROUP BY T1.owner_user_id HAVING COUNT(T1.owner_user_id) > 2
SELECT T2.zip_postcode FROM Properties AS T1 INNER JOIN Addresses AS T2 ON T1.property_address_id = T2.address_id GROUP BY T1.owner_user_id HAVING COUNT(T1.owner_user_id) <= 2
SELECT T2.user_category_code, T1.user_id FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING COUNT(T1.search_seq) = 1
SELECT T2.user_id, T2.age_category_code FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id GROUP BY T1.user_id HAVING COUNT(T1.search_seq) = 1
SELECT T2.age_category_code FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id ORDER BY T1.search_datetime LIMIT 1
SELECT T2.age_category_code FROM User_Searches AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id ORDER BY T1.search_datetime LIMIT 1
SELECT login_name FROM Users WHERE age_category_code = 'Senior Citizen' ORDER BY first_name
SELECT login_name FROM Users WHERE age_category_code = 'Senior Citizen' ORDER BY first_name
SELECT COUNT(search_seq) FROM User_Searches
SELECT COUNT(T2.user_id) FROM Users AS T1 INNER JOIN User_Searches AS T2 ON T1.user_id = T2.user_id WHERE T1.is_buyer = '1'
SELECT date_registered FROM Users WHERE login_name = 'ratione'
SELECT date_registered FROM Users WHERE login_name = 'ratione'
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1'
SELECT first_name, middle_name, last_name, login_name FROM Users WHERE is_seller = '1'
SELECT T2.line_2_number_street, T2.line_3_area_locality, T2.town_city FROM Users AS T1 INNER JOIN Addresses AS T2 ON T1.user_address_id = T2.address_id WHERE T1.age_category_code = 'Senior Citizen'
SELECT T2.line_1_number_building, T2.line_2_number_street, T2.town_city FROM Users AS T1 INNER JOIN Addresses AS T2 ON T1.user_address_id = T2.address_id WHERE T1.age_category_code = 'Senior Citizen'
SELECT COUNT(property_id) FROM Properties WHERE (SELECT COUNT(*) FROM Features WHERE property_id IN (SELECT property_id FROM Properties)) >= 2;
SELECT COUNT(property_id) FROM Properties WHERE property_type_code IN ( SELECT property_type_code FROM Ref_Property_Types GROUP BY property_type_code HAVING COUNT(property_type_code) > 1 )
SELECT COUNT(*) FROM Property_Photos
SELECT COUNT(*) ,  property_id FROM Property_Photos GROUP BY property_id
SELECT T1.owner_user_id, COUNT(T2.photo_seq) FROM Properties AS T1 INNER JOIN Property_Photos AS T2 ON T1.property_id = T2.property_id GROUP BY T1.owner_user_id
SELECT T1.owner_user_id, COUNT(*) FROM Properties AS T1 INNER JOIN Property_Photos AS T2 ON T1.property_id = T2.property_id GROUP BY T1.owner_user_id
SELECT SUM(T1.price_max) FROM Properties AS T1 INNER JOIN Users AS T2 ON T1.owner_user_id = T2.user_id WHERE T2.user_category_code IN ('Single Mother', 'Student')
SELECT SUM(T1.price_max) FROM Properties AS T1 INNER JOIN Users AS T2 ON T1.owner_user_id = T2.user_id WHERE T2.user_category_code IN ('Single Mother', 'Student')
SELECT datestamp, property_name FROM User_Property_History WHERE property_id IN ( SELECT property_id FROM Properties ) ORDER BY datestamp;
SELECT UPH.datestamp, P.property_name FROM User_Property_History UPH INNER JOIN Properties P ON UPH.property_id = P.property_id ORDER BY UPH.datestamp;
SELECT T1.property_type_description, T1.property_type_code FROM Ref_Property_Types AS T1 INNER JOIN Properties AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code ORDER BY COUNT(T2.property_id) DESC LIMIT 1;
SELECT T1.property_type_code, T2.property_type_description FROM Properties AS T1 INNER JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code ORDER BY COUNT(T1.property_id) DESC LIMIT 1;
SELECT `age_category_description` FROM Ref_Age_Categories WHERE `age_category_code` = 'Over 60';
SELECT `age_category_description` FROM Ref_Age_Categories WHERE `age_category_code` = 'Over 60';
SELECT room_size, COUNT(*) FROM Rooms GROUP BY room_size
SELECT COUNT(room_size), room_size FROM Rooms GROUP BY room_size
SELECT T2.country FROM Users AS T1 INNER JOIN Addresses AS T2 ON T1.user_address_id = T2.address_id WHERE T1.first_name = 'Robbie'
SELECT T2.country FROM Users AS T1 INNER JOIN Addresses AS T2 ON T1.user_address_id = T2.address_id WHERE T1.first_name = 'Robbie'
SELECT T2.first_name, T2.middle_name, T2.last_name FROM Properties AS T1 INNER JOIN Users AS T2 ON T1.owner_user_id = T2.user_id
SELECT T2.first_name, T2.middle_name, T2.last_name FROM Properties AS T1 INNER JOIN Users AS T2 ON T1.owner_user_id = T2.user_id WHERE T1.property_address_id = T2.user_address_id
SELECT T2.search_string FROM Users AS T1 INNER JOIN User_Searches AS T2 ON T1.user_id = T2.user_id WHERE T1.user_id NOT IN ( SELECT owner_user_id FROM Properties )
SELECT T2.search_string FROM Users AS T1 INNER JOIN User_Searches AS T2 ON T1.user_id = T2.user_id WHERE T1.user_id NOT IN ( SELECT owner_user_id FROM Properties )
SELECT T2.last_name, T1.property_id FROM Properties AS T1 INNER JOIN Users AS T2 ON T1.owner_user_id = T2.user_id GROUP BY T1.property_id HAVING COUNT(T1.property_id) >= 2 AND ( SELECT COUNT(*) FROM User_Searches WHERE user_id = T2.user_id ) <= 2
SELECT T2.last_name, T1.property_id FROM Properties AS T1 INNER JOIN Users AS T2 ON T1.owner_user_id = T2.user_id GROUP BY T1.property_id HAVING COUNT(DISTINCT T1.property_id) <= 2 AND COUNT(T2.user_id) >= 2
SELECT COUNT(*) FROM bike WHERE weight > 780;
SELECT product_name, weight FROM bike ORDER BY price ASC;
SELECT heat, name, nation FROM cyclist
SELECT MAX(weight) , MIN(weight) FROM bike
SELECT AVG(price) FROM bike WHERE material = 'Carbon CC';
SELECT name, result FROM cyclist WHERE nation != 'Russia'
SELECT DISTINCT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id WHERE cyclists_own_bikes.purchase_year > 2015
SELECT bike.id, bike.product_name FROM bike JOIN cyclists_own_bikes ON bike.id = cyclists_own_bikes.bike_id GROUP BY bike.id HAVING COUNT(cyclists_own_bikes.cyclist_id) >= 4
SELECT T1.id, T1.name FROM cyclist AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.cyclist_id GROUP BY T1.id ORDER BY COUNT(T2.bike_id) DESC LIMIT 1
SELECT DISTINCT T1.product_name FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id INNER JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.nation IN ('Russia', 'Great Britain')
SELECT COUNT(DISTINCT heat) FROM cyclist
SELECT COUNT(*) FROM cyclist WHERE id NOT IN ( SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year > 2015 )
SELECT DISTINCT T3.product_name FROM cyclist AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.cyclist_id INNER JOIN bike AS T3 ON T2.bike_id = T3.id WHERE T1.result < '4:21.558'
SELECT T1.product_name, T1.price FROM bike AS T1 INNER JOIN cyclists_own_bikes AS T2 ON T1.id = T2.bike_id INNER JOIN cyclist AS T3 ON T2.cyclist_id = T3.id WHERE T3.name = 'Bradley Wiggins' AND T3.name = 'Antonio Tauler'
SELECT name, nation, result FROM cyclist WHERE id NOT IN ( SELECT cyclist_id FROM cyclists_own_bikes )
SELECT product_name FROM bike WHERE material LIKE '%fiber%'
SELECT COUNT(bike_id) FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id;
SELECT Flavor, Price FROM goods WHERE Price = ( SELECT MAX(Price) FROM goods )
SELECT Id, Flavor FROM goods WHERE Price = ( SELECT MAX(Price) FROM goods )
SELECT MIN(Price), Flavor FROM goods
SELECT Id, Flavor FROM goods WHERE Price = ( SELECT MIN(Price) FROM goods )
SELECT Id FROM goods WHERE Flavor = 'Apple'
SELECT Id FROM goods WHERE Flavor = 'Apple'
SELECT Id FROM goods WHERE Price < 3
SELECT Id FROM goods WHERE Price < 3
SELECT DISTINCT T1.Id FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item INNER JOIN receipts AS T3 ON T2.Receipt = T3.ReceiptNumber WHERE T1.Food = 'Cake' AND T1.Flavor = 'Lemon'
SELECT DISTINCT T2.CustomerId FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.CustomerId WHERE T1.Item = '20-BC-L-10'
SELECT T1.Food, COUNT(T2.CustomerId) FROM goods AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId GROUP BY T1.Food
SELECT COUNT(T1.Item), T2.Food FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id GROUP BY T2.Food
SELECT T1.Id FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId GROUP BY T2.CustomerId HAVING COUNT(T2.ReceiptNumber) >= 15
SELECT DISTINCT T1.CustomerId FROM receipts AS T1 INNER JOIN customers AS T2 ON T1.CustomerId = T2.Id WHERE T1.ReceiptNumber IN ( SELECT ReceiptNumber FROM receipts GROUP BY ReceiptNumber HAVING COUNT(*) >= 15 )
SELECT T2.LastName FROM receipts AS T1 INNER JOIN customers AS T2 ON T1.CustomerId = T2.Id GROUP BY T1.CustomerId HAVING COUNT(T1.ReceiptNumber) > 10
SELECT T2.LastName FROM receipts AS T1 INNER JOIN customers AS T2 ON T1.CustomerId = T2.Id GROUP BY T1.CustomerId HAVING COUNT(T1.ReceiptNumber) > 10
SELECT COUNT(DISTINCT Flavor) FROM goods WHERE Food = 'Cake'
SELECT COUNT(DISTINCT Flavor) FROM goods
SELECT Flavor FROM goods WHERE Food = 'Croissant'
SELECT Flavor FROM goods WHERE Food = 'Croissant'
SELECT DISTINCT T2.Item FROM receipts AS T1 INNER JOIN items AS T2 ON T1.CustomerId = T2.Item WHERE T1.ReceiptNumber IN (10013, 11548, 11891) AND T1.CustomerId = 15
SELECT DISTINCT T1.Item FROM items AS T1 INNER JOIN receipts AS T2 ON T1.Item = T2.CustomerId WHERE T2.CustomerId = 15
SELECT AVG(Price), MAX(Price), MIN(Price) FROM goods GROUP BY Food
SELECT AVG(Price), MIN(Price), MAX(Price) FROM goods GROUP BY Food
SELECT Receipt FROM items WHERE Item IN ('20-BC-C-10', '20-BC-L-10')
SELECT T1.Receipt FROM items AS T1 INNER JOIN goods AS T2 ON T1.Item = T2.Id WHERE T2.Food IN ('Cake', 'Cookies') GROUP BY T1.Receipt HAVING COUNT(DISTINCT T2.Food) = 2
SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item IN ( SELECT Id FROM goods WHERE Food = 'Croissant' ) AND T1.CustomerId IN ( SELECT Id FROM customers WHERE LastName = 'LOGAN' );
SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T1.CustomerId IN ( SELECT Id FROM customers WHERE LastName = 'LOGAN' ) AND T2.Item IN ( SELECT Id FROM goods WHERE Food = 'Croissant' );
SELECT T1.ReceiptNumber, T1.Date FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.Item IN ( SELECT Item FROM goods ORDER BY Price DESC LIMIT 1 )
SELECT T1.ReceiptNumber, T1.Date FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.Item IN ( SELECT Item FROM items GROUP BY Item ORDER BY AVG(T3.Price) DESC LIMIT 1 )
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(Item) LIMIT 1
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(Item) LIMIT 1
SELECT COUNT(*) , Food FROM goods GROUP BY Food
SELECT COUNT("Food"), "Flavor" FROM goods GROUP BY "Food";
SELECT AVG(Price) FROM goods GROUP BY Food
SELECT AVG(Price) FROM goods GROUP BY Food
SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5
SELECT Id FROM goods WHERE Flavor = 'Apricot' AND Price < 5
SELECT Flavor FROM goods WHERE Price > 10
SELECT Flavor FROM goods WHERE Price > 10
SELECT DISTINCT Id, Price FROM goods WHERE Price < (SELECT AVG(Price) FROM goods)
SELECT DISTINCT Id, Price FROM goods WHERE Price < ( SELECT AVG(Price) FROM goods )
SELECT DISTINCT Id FROM goods WHERE Price > ( SELECT Price FROM goods WHERE Food = 'Cake' AND Flavor = 'Tart' )
SELECT DISTINCT Id FROM goods WHERE Price < ( SELECT MIN(Price) FROM goods );
SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.Item IN ( SELECT Id FROM goods WHERE Price > 13 )
SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.Receipt = T2.Receipt WHERE T2.Item IN ( SELECT Id FROM goods WHERE Price > 13 )
SELECT Date FROM receipts JOIN items ON receipts.ReceiptNumber = items.ReceiptNumber JOIN goods ON items.Item = goods.Id WHERE goods.Price > 15 AND items.ReceiptNumber IS NOT NULL;
SELECT Date FROM receipts WHERE ReceiptNumber IN ( SELECT Receipt FROM items WHERE Price > 15 )
SELECT Id FROM goods WHERE Id LIKE '%APP%'
SELECT Id FROM goods WHERE Id LIKE '%APP%'
SELECT Flavor, Price FROM goods WHERE Id LIKE '%70%'
SELECT Id, Price FROM goods WHERE Id LIKE '%70%'
SELECT DISTINCT LastName FROM customers ORDER BY LastName
SELECT LastName FROM customers ORDER BY LastName
SELECT Id FROM goods WHERE Flavor = 'Good' ORDER BY Id
SELECT DISTINCT Id FROM goods
SELECT T1.Date FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE T2.Item IN ('90-APIE-10', '70-TU') OR T1.CustomerId = 12
SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.CustomerId = T2.Item AND T1.ReceiptNumber = T2.Receipt WHERE T2.Item IN ( SELECT Id FROM goods WHERE Flavor = 'Apple' ) UNION SELECT T1.ReceiptNumber FROM receipts AS T1 INNER JOIN items AS T2 ON T1.CustomerId = T2.Item AND T1.ReceiptNumber = T2.Receipt WHERE T1.CustomerId = 12
SELECT Date FROM receipts ORDER BY Date DESC LIMIT 1
SELECT ReceiptNumber, Date FROM receipts ORDER BY Date DESC LIMIT 1
SELECT Date FROM receipts WHERE ReceiptNumber IN ( SELECT ReceiptNumber FROM receipts WHERE Date = ( SELECT MIN(Date) FROM receipts ) OR Price > 10 AND Price >= 10 )
SELECT ReceiptNumber FROM receipts WHERE Date = ( SELECT MIN(Date) FROM receipts ) OR Price > 10
SELECT Id FROM goods WHERE Price BETWEEN 3 AND 7
SELECT Id FROM goods WHERE Price BETWEEN 3 AND 7
SELECT T1.FirstName, T1.LastName FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId ORDER BY T2.Date LIMIT 1
SELECT T1.FirstName, T1.LastName FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId ORDER BY T2.Date LIMIT 1
SELECT AVG Price FROM goods WHERE Flavor IN ('blackberry', 'blueberry')
SELECT AVG Price FROM goods WHERE Flavor IN ('Blackberry', 'Blueberry')
SELECT MIN Price FROM goods WHERE Flavor = 'Cheese'
SELECT MIN Price FROM goods WHERE Flavor = 'Cheese'
SELECT AVG(Price) AS average_price, MIN(Price) AS lowest_price, MAX(Price) AS highest_price FROM goods GROUP BY Flavor ORDER BY highest_price DESC
SELECT MAX(Price) , MIN(Price) , AVG(Price) FROM goods GROUP BY Flavor ORDER BY Flavor
SELECT MIN(Price) , MAX(Price) , Food FROM goods GROUP BY Food
SELECT MIN(Price) ,  MAX(Price) FROM goods GROUP BY Food
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3;
SELECT Date FROM receipts GROUP BY Date ORDER BY COUNT(*) DESC LIMIT 3
SELECT T1.Name, COUNT(T2.ReceiptNumber) FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId GROUP BY T1.Id ORDER BY COUNT(T2.ReceiptNumber) DESC LIMIT 1
SELECT T1.Id, COUNT(T2.ReceiptNumber) FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId GROUP BY T1.Id ORDER BY COUNT(T2.ReceiptNumber) DESC LIMIT 1
SELECT COUNT(DISTINCT Date) FROM receipts GROUP BY Date
SELECT Date, COUNT(*) FROM receipts GROUP BY Date
SELECT T1.FirstName, T1.LastName FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId INNER JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt INNER JOIN goods AS T4 ON T3.Item = T4.Id WHERE T4.Food = 'Cake' AND T4.Floraw = 'Apple'
SELECT T1.FirstName, T1.LastName FROM customers AS T1 INNER JOIN receipts AS T2 ON T1.Id = T2.CustomerId INNER JOIN items AS T3 ON T2.ReceiptNumber = T3.Receipt AND T3.Ordinal = 1 WHERE T3.Item IN ( SELECT Id FROM goods WHERE Flavor = 'Apple' )
SELECT Id FROM goods WHERE Price < ( SELECT MIN(Price) FROM goods )
SELECT Id FROM goods WHERE Price > ( SELECT MIN(Price) FROM goods WHERE Food = 'Croissant' )
SELECT Id FROM goods WHERE Price >= ( SELECT AVG(Price) FROM goods WHERE Food = 'Cake' )
SELECT Id FROM goods WHERE Price >= ( SELECT AVG(Price) FROM goods WHERE Food = 'Tart' )
SELECT Id FROM goods WHERE Price > (SELECT AVG(Price) FROM goods) * 2
SELECT Id FROM goods WHERE Price > (SELECT AVG(Price) FROM goods) * 2
SELECT Id, Flavor, Food FROM goods ORDER BY Price
SELECT Id, Flavor, Food FROM goods ORDER BY Price
SELECT Id, Flavor FROM goods ORDER BY Flavor
SELECT Id, Flavor FROM goods ORDER BY Flavor
SELECT T1.Id FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Flavor = 'Chocolate' AND T2.Ordinal < 10
SELECT T1.Flavor FROM goods AS T1 INNER JOIN items AS T2 ON T1.Id = T2.Item WHERE T1.Flavor = 'Chocolate' GROUP BY T1.Flavor HAVING COUNT(T2.Receipt) <= 10
SELECT Flavor FROM goods WHERE Food = 'Cake' EXCEPT SELECT Flavor FROM goods WHERE Food = 'Tart'
SELECT Flavor FROM goods WHERE Food = 'Cake' AND Id NOT IN ( SELECT Id FROM goods WHERE Food = 'Tart' )
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(Item) DESC LIMIT 3
SELECT Item FROM items GROUP BY Item ORDER BY COUNT(Item) DESC LIMIT 3
SELECT T1.CustomerId FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE SUM(T2.Price) > 150
SELECT T1.CustomerId FROM receipts AS T1 INNER JOIN items AS T2 ON T1.ReceiptNumber = T2.Receipt WHERE SUM(T2.Price) > 150
SELECT T1.Id FROM goods AS T1 INNER JOIN ( SELECT Item, AVG(T2.Price) AS avg_price FROM items AS T2 GROUP BY T2.Item ) AS T3 ON T1.Id = T3.Item WHERE T3.avg_price > 5 AND T2.Price IS NOT NULL
SELECT T1.Id FROM goods AS T1 INNER JOIN ( SELECT T4.Item, AVG(T2.Price) AS avg_price FROM receipts AS T2 INNER JOIN items AS T4 ON T2.ReceiptNumber = T4.Receipt AND T4.Item = T4.Item GROUP BY T4.Item ) AS T5 ON T1.Id = T5.Item WHERE T5.avg_price > 5
SELECT Date FROM receipts WHERE ReceiptNumber IN ( SELECT ReceiptNumber FROM items GROUP BY ReceiptNumber HAVING SUM(T1.Price) > 100 )
SELECT Date FROM receipts WHERE ReceiptNumber IN ( SELECT ReceiptNumber FROM items GROUP BY ReceiptNumber HAVING SUM(T2.Price) > 100 )
SELECT COUNT(*) FROM driver
SELECT COUNT(*) FROM driver
SELECT COUNT(*) , T1.Make FROM driver AS T1 INNER JOIN ( SELECT Make , MAX(Points) AS max_points FROM driver GROUP BY Make ) AS T2 ON T1.Make = T2.Make WHERE T1.Points > T2.max_points
SELECT Make, COUNT(CASE WHEN Points > '150' THEN 1 END) FROM driver GROUP BY Make
SELECT AVG(Age) , Make FROM driver GROUP BY Make
SELECT AVG(Age), Make FROM driver GROUP BY Make
SELECT AVG(Laps) FROM driver WHERE Age < 20;
SELECT AVG(Laps) FROM driver WHERE Age < 20;
SELECT Manager, Sponsor FROM team ORDER BY Car_Owner
SELECT Manager, Sponsor FROM team ORDER BY Car_Owner
SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1
SELECT Make FROM team GROUP BY Make HAVING COUNT(Team_ID) > 1
SELECT Make FROM team WHERE Car_Owner = "Buddy Arrington"
SELECT Make FROM team WHERE Car_Owner = "Buddy Arrington"
SELECT MAX(`Points`) , MIN(`Points`) FROM driver
SELECT MAX(`Points`) , MIN(`Points`) FROM driver
SELECT COUNT(*) FROM driver WHERE Points < '150';
SELECT COUNT(*) FROM driver WHERE Points < '150';
SELECT Driver FROM driver ORDER BY Age ASC
SELECT Driver FROM driver ORDER BY Age ASC
SELECT Driver FROM driver ORDER BY Points DESC
SELECT Driver FROM driver ORDER BY Points DESC
SELECT T1.Driver, T2.Country FROM driver AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Country_ID
SELECT T1.Driver, T2.Country FROM driver AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Country_ID
SELECT MAX(T1.Points) FROM driver AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Country_ID WHERE T2.Capital = 'Dublin'
SELECT MAX(T1.Points) FROM driver AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Country_ID WHERE T2.Capital = 'Dublin'
SELECT AVG(T1.Age) FROM driver AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Country_ID WHERE T2.Official_native_language = 'English'
SELECT AVG(T1.Age) FROM driver AS T1 INNER JOIN country AS T2 ON T1.Country = T2.Country_ID WHERE T2.Official_native_language = 'English'
SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Points > '150'
SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Points > 150
SELECT T1.Capital FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country ORDER BY T2.Points DESC LIMIT 1
SELECT T1.Capital, T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country ORDER BY T2.Points DESC LIMIT 1
SELECT Make, COUNT(Driver_ID) FROM driver GROUP BY Make
SELECT Make, COUNT(Driver_ID) FROM driver GROUP BY Make
SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(Driver_ID) DESC LIMIT 1;
SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(Driver_ID) DESC LIMIT 1;
SELECT DISTINCT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) >= 3
SELECT Make FROM driver GROUP BY Make HAVING COUNT(Driver_ID) >= 3
SELECT T2.Team FROM team_driver AS T1 INNER JOIN team AS T2 ON T1.Team_ID = T2.Team_ID WHERE T1.Driver_ID IS NULL
SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)
SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make IN ('Dodge', 'Chevrolet') GROUP BY T1.Country
SELECT T1.Country FROM country AS T1 INNER JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Make IN ('Dodge', 'Chevrolet') GROUP BY T1.Country
SELECT SUM(CAST(REPLACE(trim(Points), '$', '') AS INTEGER)) / COUNT(*) AS avg_points FROM driver
SELECT SUM(CAST(REPLACE(SUBSTR(points, 1, INSTR(points, '.') - 1), ',', '') AS REAL)) / COUNT(*) FROM driver
SELECT T1.Country FROM country AS T1 LEFT JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Driver_ID IS NULL
SELECT T1.Country FROM country AS T1 LEFT JOIN driver AS T2 ON T1.Country_Id = T2.Country WHERE T2.Driver_ID IS NULL
SELECT T1.Manager, T1.Sponsor FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID ORDER BY COUNT(T2.Driver_ID) DESC LIMIT 1
SELECT T1.Manager, T1.Sponsor FROM team AS T1 INNER JOIN ( SELECT Team_ID, COUNT(Driver_ID) AS num_drivers FROM team_driver GROUP BY Team_ID ORDER BY num_drivers DESC LIMIT 1 ) AS T2 ON T1.Team_ID = T2.Team_ID
SELECT T1.Manager, T1.Car_Owner FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID HAVING COUNT(DISTINCT T2.Driver_ID) >= 2
SELECT T1.Manager, T1.Car_Owner FROM team AS T1 INNER JOIN team_driver AS T2 ON T1.Team_ID = T2.Team_ID GROUP BY T1.Team_ID HAVING COUNT(DISTINCT T2.Driver_ID) >= 2
SELECT COUNT(Institution_ID) FROM institution;
SELECT COUNT(Institution_ID) FROM institution;
SELECT Name FROM institution ORDER BY Name ASC
SELECT Name FROM institution ORDER BY Name
SELECT Name FROM institution ORDER BY Founded ASC
SELECT Name FROM institution ORDER BY Founded
SELECT City, Province FROM institution
SELECT City, Province FROM institution
SELECT MAX(Enrollment) , MIN(Enrollment) FROM institution
SELECT MAX(Enrollment) , MIN(Enrollment) FROM institution
SELECT Affiliation FROM institution WHERE City != 'Vancouver'
SELECT Affiliation FROM institution WHERE City != 'Vancouver'
SELECT Stadium FROM institution ORDER BY Capacity DESC
SELECT Stadium FROM institution ORDER BY Capacity DESC
SELECT Stadium FROM institution WHERE Enrollment = ( SELECT MAX(Enrollment) FROM institution )
SELECT Stadium FROM institution WHERE Enrollment = ( SELECT MAX(Enrollment) FROM institution )
SELECT T1.Name, T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID
SELECT T1.Name, T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID
SELECT T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Enrollment ASC LIMIT 1;
SELECT T2.Nickname FROM Championship AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Enrollment LIMIT 1;
SELECT T2.Name FROM Championship AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Number_of_Championships DESC
SELECT T2.Name FROM Championship AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Number_of_Championships DESC
SELECT T2.Name FROM Championship AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Number_of_Championships > 0
SELECT T2.Name FROM Championship AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T1.Number_of_Championships > 0
SELECT COUNT(*) FROM Championship AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Affiliation = 'Public' AND T1.Number_of_Championships > 0
SELECT COUNT(T1.Institution_ID) FROM Championship AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID WHERE T2.Affiliation = 'Public'
SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation
SELECT Affiliation, COUNT(*) FROM institution GROUP BY Affiliation
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1;
SELECT "Founded" FROM institution GROUP BY "Founded" HAVING COUNT("Institution_ID") > 1
SELECT "Founded" , COUNT(*) FROM institution GROUP BY "Founded" HAVING COUNT(*) > 1
SELECT T2.Nickname FROM institution AS T1 INNER JOIN Championship AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T1.Capacity DESC
SELECT T2.Nickname FROM Championship AS T1 INNER JOIN institution AS T2 ON T1.Institution_ID = T2.Institution_ID ORDER BY T2.Capacity DESC;
SELECT SUM(Enrollment) FROM institution WHERE City IN ('Vancouver', 'Calgary')
SELECT * FROM institution WHERE City IN ('Vancouver', 'Calgary')
SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950
SELECT Province FROM institution WHERE Founded < 1920 INTERSECT SELECT Province FROM institution WHERE Founded > 1950
SELECT COUNT(DISTINCT Province) FROM institution
SELECT COUNT(DISTINCT Province) FROM institution
SELECT * FROM Warehouses;
SELECT * FROM Warehouses;
SELECT DISTINCT T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = 'New York';
SELECT DISTINCT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location = 'New York';
SELECT Contents FROM Boxes WHERE Value > 150;
SELECT Contents FROM Boxes WHERE Value > 150;
SELECT T2.Code, AVG(T1.Value) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T2.Code
SELECT AVG(Value) FROM Boxes GROUP BY Warehouse
SELECT AVG(Value), SUM(Value) FROM Boxes
SELECT AVG(Value), SUM(Value) FROM Boxes
SELECT AVG(Capacity), SUM(Capacity) FROM Warehouses
SELECT AVG(Capacity) , SUM(Capacity) FROM Warehouses
SELECT AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents
SELECT AVG(Value), MAX(Value) FROM Boxes GROUP BY Contents
SELECT Contents FROM Boxes GROUP BY Contents ORDER BY SUM(Value) DESC LIMIT 1
SELECT MAX(Value) FROM Boxes
SELECT AVG(Value) FROM Boxes;
SELECT AVG(Value) FROM Boxes;
SELECT DISTINCT Contents FROM Boxes;
SELECT DISTINCT Contents FROM Boxes
SELECT COUNT(DISTINCT Contents) FROM Boxes;
SELECT COUNT(DISTINCT Contents) FROM Boxes;
SELECT DISTINCT Location FROM Warehouses
SELECT DISTINCT Location FROM Warehouses
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York')
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York')
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York')
SELECT SUM(Value) FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago' OR Location = 'New York')
SELECT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location IN ('Chicago', 'New York')
SELECT T1.Contents FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.Location IN ('Chicago', 'New York')
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York')
SELECT DISTINCT Contents FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'New York')
SELECT T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Contents = 'Rocks' AND T1.Contents != 'Scissors';
SELECT T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Contents = 'Rocks' AND T1.Contents != 'Scissors'
SELECT DISTINCT T2.Code FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Contents IN ('Rocks', 'Scissors')
SELECT DISTINCT T2.Code FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Contents IN ('Rocks', 'Scissors')
SELECT T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Contents IN ('Rocks', 'Scissors')
SELECT T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Contents IN ('Rocks', 'Scissors')
SELECT Code, Contents, Value FROM Boxes ORDER BY Value;
SELECT Code, Contents FROM Boxes ORDER BY Value
SELECT Code, Contents, Value FROM Boxes WHERE Value = ( SELECT MIN(Value) FROM Boxes );
SELECT Code, Contents, MIN(Value) FROM Boxes GROUP BY Code
SELECT DISTINCT T2.Contents FROM Boxes AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Code WHERE T1.Value > ( SELECT AVG(Value) FROM Boxes )
SELECT DISTINCT Contents FROM Boxes WHERE Value > ( SELECT AVG(Value) FROM Boxes )
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents
SELECT DISTINCT Contents FROM Boxes ORDER BY Contents
SELECT Code FROM Boxes WHERE Value > ( SELECT MIN(Value) FROM Boxes WHERE Contents = 'Rocks' )
SELECT Code FROM Boxes WHERE Value > ( SELECT MIN(Value) FROM Boxes WHERE Contents = 'Rocks' )
SELECT Code, Contents, Value FROM Boxes WHERE Value > (SELECT MIN(Value) FROM Boxes WHERE Contents = 'Scissors')
SELECT Code, Contents FROM Boxes WHERE Value > ( SELECT MAX(Value) FROM Boxes WHERE Contents = 'Scissors' )
SELECT SUM(Value) FROM Boxes WHERE Warehouse = ( SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1 )
SELECT SUM(Value) FROM Boxes WHERE Warehouse = ( SELECT Code FROM Warehouses ORDER BY Capacity DESC LIMIT 1 )
SELECT T2.Code, AVG(T1.Value) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Value > 150 GROUP BY T2.Code
SELECT AVG(T1.Value) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T2.AVG(Value) > 150
SELECT SUM(Value), COUNT(*) , Contents FROM Boxes GROUP BY Contents
SELECT SUM(Value), COUNT(*) FROM Boxes
SELECT SUM(Capacity), AVG(Capacity), MAX(Capacity) FROM Warehouses GROUP BY Location
SELECT SUM(Capacity) AS TotalCapacity , AVG(Capacity) AS AverageCapacity , MAX(Capacity) FROM Warehouses GROUP BY Location
SELECT SUM(Capacity) FROM Warehouses
SELECT SUM(Capacity) FROM Warehouses
SELECT T1.Value, T1.Warehouse, T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code ORDER BY T1.Value DESC LIMIT 1
SELECT T1.Value FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code GROUP BY T1.Warehouse ORDER BY SUM(T1.Value) DESC LIMIT 1
SELECT Code, COUNT(*) FROM Boxes GROUP BY Warehouse
SELECT COUNT(Code), Warehouse FROM Boxes GROUP BY Warehouse
SELECT COUNT(DISTINCT T2.Code) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Contents = 'Rocks'
SELECT COUNT(DISTINCT T1.Warehouse) FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Contents = 'Rocks'
SELECT T1.Code, T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code
SELECT T1.Code, T2.Location FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code
SELECT Code FROM Boxes WHERE Warehouse IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')
SELECT T2.Code FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location = 'Chicago'
SELECT COUNT(Warehouse), Warehouse FROM Boxes GROUP BY Warehouse
SELECT COUNT(DISTINCT Warehouse) FROM Boxes
SELECT COUNT(DISTINCT Contents) , Warehouse FROM Boxes GROUP BY Warehouse
SELECT COUNT(DISTINCT Contents) , Warehouse FROM Boxes GROUP BY Warehouse
SELECT Code FROM Warehouses WHERE Capacity < ( SELECT MAX(Value) FROM Boxes )
SELECT T2.Code FROM Boxes AS T1 INNER JOIN Warehouses AS T2 ON T1.Warehouse = T2.Code WHERE T1.Value > T2.Capacity
SELECT SUM(Value) FROM Boxes WHERE Warehouse NOT IN (SELECT Code FROM Warehouses WHERE Location = 'Chicago')
SELECT SUM(T2.Value) FROM Warehouses AS T1 INNER JOIN Boxes AS T2 ON T1.Code = T2.Warehouse WHERE T1.Location != 'Chicago'
SELECT University_Name, City, State FROM university ORDER BY University_Name;
SELECT University_Name, City, State FROM university ORDER BY University_Name
SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio')
SELECT COUNT(*) FROM university WHERE State IN ('Illinois', 'Ohio')
SELECT MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university
SELECT MAX(Enrollment), AVG(Enrollment), MIN(Enrollment) FROM university;
SELECT Team_Name FROM university WHERE Enrollment > (SELECT AVG(Enrollment) FROM university)
SELECT Team_Name FROM university WHERE Enrollment > ( SELECT AVG(Enrollment) FROM university )
SELECT Home_Conference FROM university WHERE Home_Conference != ''
SELECT Home_Conference FROM university
SELECT Home_Conference, COUNT(*) FROM university WHERE Home_Conference != '' GROUP BY Home_Conference;
SELECT COUNT(T1.University_ID) FROM university AS T1 INNER JOIN home_conferences AS T2 ON T1.Home_Conference = T2.Name
SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC LIMIT 1;
SELECT State FROM university GROUP BY State ORDER BY COUNT(University_ID) DESC LIMIT 1;
SELECT Home_Conference FROM university WHERE Enrollment > 2000 GROUP BY Home_Conference HAVING AVG(Enrollment) > 2000
SELECT Home_Conference FROM university WHERE Enrollment > 2000
SELECT Home_Conference FROM university WHERE Enrollment = ( SELECT MIN(Enrollment) FROM university );
SELECT Home_Conference FROM university GROUP BY Home_Conference ORDER BY Enrollment LIMIT 1;
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code
SELECT Major_Name, Major_Code FROM major ORDER BY Major_Code
SELECT T1.Major_Name, T2.Rank FROM major AS T1 INNER JOIN major_ranking AS T2 ON T1.Major_ID = T2.Major_ID WHERE T2.University_ID = ( SELECT University_ID FROM university WHERE University_Name = 'Augustana College' )
SELECT T1.Major_Name, T2.Rank FROM major AS T1 INNER JOIN major_ranking AS T2 ON T1.Major_ID = T2.Major_ID WHERE T2.University_ID = 1
SELECT T1.University_Name, T1.City, T1.State FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T2.Rank = 1 AND T3.Major_Name = 'Accounting'
SELECT T1.University_Name, T1.City, T1.State FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID INNER JOIN major AS T3 ON T2.Major_ID = T3.Major_ID WHERE T3.Major_Code = 1054 AND T2.Rank = 1
SELECT T2.University_Name FROM major_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID WHERE Rank = 1 GROUP BY T2.University_Name ORDER BY COUNT(T1.Major_ID) DESC LIMIT 1;
SELECT T2.University_Name FROM major_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID ORDER BY Rank LIMIT 1
SELECT T2.University_Name FROM major_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Rank != 1
SELECT T2.University_Name FROM major_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID WHERE Rank != 1
SELECT T1.University_Name FROM university AS T1 INNER JOIN major_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.University_Name IN ( SELECT University_Name FROM university WHERE Major_ID IN ( SELECT Major_ID FROM major WHERE Major_Name IN ('Accounting', 'Urban Education') ) )
SELECT T1.University_Name FROM major AS T1 INNER JOIN major_ranking AS T2 ON T1.Major_ID = T2.Major_ID WHERE T1.Major_Name IN ('Accounting', 'Urban Education') AND T2.University_ID IN ( SELECT University_ID FROM university ) GROUP BY T2.University_ID
SELECT T1.University_Name, T2.Rank FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T1.State = 'Wisconsin' ORDER BY T2.Total DESC;
SELECT T2.University_Name, T1.Rank FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID WHERE T2.State = 'Wisconsin'
SELECT T2.University_Name FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.Research_point DESC LIMIT 1;
SELECT T2.University_Name FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.Research_point DESC LIMIT 1;
SELECT University_Name FROM university WHERE University_ID IN ( SELECT University_ID FROM overall_ranking ORDER BY Reputation_point ASC )
SELECT T2.University_Name FROM overall_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID ORDER BY T1.Reputation_point ASC;
SELECT T2.University_Name FROM major_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Rank >= 3 AND T1.Major_ID IN ( SELECT Major_ID FROM major WHERE Major_Name = 'Accounting' )
SELECT T2.University_Name FROM major_ranking AS T1 INNER JOIN university AS T2 ON T1.University_ID = T2.University_ID WHERE T1.Rank >= 3 AND T1.Major_ID IN ( SELECT Major_ID FROM major WHERE Major_Name = 'Accounting' )
SELECT SUM(CASE WHEN o."Rank" <= 5 THEN u."Enrollment" ELSE 0 END) FROM overall_ranking o JOIN university u ON o."University_ID" = u."University_ID"
SELECT COUNT(*) FROM overall_ranking WHERE Rank <= 5;
SELECT T1.University_Name, T2.Citation_point FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID WHERE T2.Reputation_point >= 3 ORDER BY T2.Reputation_point DESC LIMIT 3;
SELECT T1.University_Name, T2.Citation_point FROM university AS T1 INNER JOIN overall_ranking AS T2 ON T1.University_ID = T2.University_ID ORDER BY T2.Reputation_point DESC LIMIT 3;
SELECT State FROM university WHERE Enrollment < 3000 GROUP BY State HAVING COUNT(University_ID) > 2;
SELECT State FROM university GROUP BY State HAVING COUNT(Enrollment) > 2 AND Enrollment < 3000
SELECT Title FROM Movies WHERE Rating IS NULL;
SELECT Title FROM Movies WHERE Rating IS NULL
SELECT Title FROM Movies WHERE Rating = 'G';
SELECT Title FROM Movies WHERE Rating = 'G'
SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name = 'Odeon'
SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name = 'Odeon'
SELECT T1.Title, T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie
SELECT T1.Title, T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie
SELECT COUNT(Code) FROM Movies WHERE Rating = 'G';
SELECT COUNT(*) FROM Movies WHERE Rating = 'G'
SELECT COUNT(T1.Code) FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie
SELECT COUNT(T1.Code) FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Movie IS NOT NULL
SELECT COUNT(DISTINCT T1.Code) FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Movie IS NOT NULL
SELECT COUNT(DISTINCT Title) FROM Movies
SELECT COUNT(DISTINCT Code) FROM MovieTheaters;
SELECT COUNT(DISTINCT Code) FROM MovieTheaters;
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'
SELECT Rating FROM Movies WHERE Title LIKE '%Citizen%'
SELECT Title FROM Movies WHERE Rating IN ('G', 'PG')
SELECT Title FROM Movies WHERE Rating IN ('G', 'PG')
SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name IN ('Odeon', 'Imperial')
SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name IN ('Odeon', 'Imperial')
SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Name IN ('Odeon', 'Imperial') GROUP BY T2.Title HAVING COUNT(T1.Code) > 1
SELECT T1.Title FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name IN ('Odeon', 'Imperial') GROUP BY T1.Title HAVING COUNT(DISTINCT T2.Name) > 1
SELECT T1.Title FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name != 'Odeon'
SELECT T1.Title FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Name != 'Odeon'
SELECT Title FROM Movies ORDER BY Title
SELECT Title FROM Movies ORDER BY Title;
SELECT Title FROM Movies ORDER BY Rating
SELECT Title FROM Movies ORDER BY Rating
SELECT Name FROM MovieTheaters WHERE Movie = ( SELECT MAX(Movie) FROM MovieTheaters );
SELECT Name FROM MovieTheaters WHERE Movie = ( SELECT MAX(Movie) FROM MovieTheaters );
SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T2.Title ORDER BY COUNT(T1.Name) DESC LIMIT 1;
SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC LIMIT 1;
SELECT Rating, COUNT(Code) FROM Movies GROUP BY Rating
SELECT Rating, COUNT(Code) FROM Movies GROUP BY Rating
SELECT COUNT(Code) FROM Movies WHERE Rating IS NOT NULL;
SELECT COUNT(Code) FROM Movies WHERE Rating IS NOT NULL;
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL
SELECT Name FROM MovieTheaters WHERE Movie IS NOT NULL
SELECT Name FROM MovieTheaters WHERE Movie IS NULL
SELECT Name FROM MovieTheaters WHERE Movie IS NULL
SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = 'G'
SELECT T2.Name FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T1.Rating = 'G'
SELECT Title FROM Movies
SELECT Title FROM Movies
SELECT DISTINCT Rating FROM Movies
SELECT DISTINCT Rating FROM Movies
SELECT * FROM Movies WHERE Rating = ''
SELECT Title, Rating FROM Movies WHERE Rating = ''
SELECT T1.Title FROM Movies AS T1 INNER JOIN MovieTheaters AS T2 ON T1.Code = T2.Movie WHERE T2.Movie IS NULL
SELECT T2.Title FROM MovieTheaters AS T1 INNER JOIN Movies AS T2 ON T1.Movie = T2.Code WHERE T1.Movie IS NULL
SELECT T2.Name FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Recipient = T2.AccountNumber GROUP BY T1.Recipient ORDER BY SUM(T1.Weight) DESC LIMIT 1;
SELECT T2.Name FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1;
SELECT SUM(T1.Weight) FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber WHERE T2.Name = 'Leo Wong'
SELECT SUM(T2.Weight) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'Leo Wong'
SELECT Position FROM Employee WHERE Name = 'Amy Wong'
SELECT Position FROM Employee WHERE Name = 'Amy Wong'
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'
SELECT Salary, Position FROM Employee WHERE Name = 'Turanga Leela'
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'
SELECT AVG(Salary) FROM Employee WHERE Position = 'Intern'
SELECT Level FROM Has_Clearance WHERE Employee = (SELECT EmployeeID FROM Employee WHERE Name = 'Physician')
SELECT T2.Level FROM Employee AS T1 INNER JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee WHERE T1.Position = 'Physician'
SELECT PackageNumber FROM Package WHERE Sender = ( SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong' )
SELECT COUNT(DISTINCT T2.PackageNumber) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'Leo Wong'
SELECT PackageNumber FROM Package WHERE Recipient = ( SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong' )
SELECT PackageNumber FROM Package WHERE Recipient = ( SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong' )
SELECT T1.Name, T2.Sender, T2.Recipient FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'Leo Wong'
SELECT DISTINCT PackageNumber FROM Package WHERE Sender IN (SELECT AccountNumber FROM Client) OR Recipient IN (SELECT AccountNumber FROM Client)
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT COUNT(*) FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Ogden Wernstrom') AND Recipient = (SELECT AccountNumber FROM Client WHERE Name = 'Leo Wong');
SELECT Contents FROM Package WHERE Sender = (SELECT AccountNumber FROM Client WHERE Name = 'John Zoidfarb')
SELECT T2.Contents FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name = 'John Zoidfarb'
SELECT PackageNumber, Weight FROM Package WHERE Recipient IN (SELECT AccountNumber FROM Client WHERE Name LIKE '%John%') ORDER BY Weight DESC LIMIT 1
SELECT T2.PackageNumber, T2.Weight FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender WHERE T1.Name LIKE '%John%' OR T1.Name LIKE '%Zapp Brannigan' ORDER BY T2.Weight DESC LIMIT 1
SELECT PackageNumber, Weight FROM Package ORDER BY Weight LIMIT 3;
SELECT PackageNumber, Weight FROM Package ORDER BY Weight LIMIT 3;
SELECT T1.Name, COUNT(T2.Sender) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name ORDER BY COUNT(T2.Sender) DESC LIMIT 1
SELECT T1.Name, COUNT(*) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT T1.Name, COUNT(*) FROM Client AS T1 INNER JOIN Package AS T2 ON T1.AccountNumber = T2.Sender GROUP BY T1.Name ORDER BY COUNT(*) LIMIT 1
SELECT MIN(T1.Weight), T2.Name FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber
SELECT T2.Name FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber GROUP BY T1.Sender HAVING COUNT(T1.Sender) > 1
SELECT T2.Name FROM Package AS T1 INNER JOIN Client AS T2 ON T1.Sender = T2.AccountNumber GROUP BY T1.Sender HAVING COUNT(*) > 1
SELECT Coordinates FROM Planet WHERE Name = 'Mars'
SELECT Coordinates FROM Planet WHERE Name = 'Mars'
SELECT Name, Coordinates FROM Planet ORDER BY Name
SELECT Name, Coordinates FROM Planet ORDER BY Name
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J. Fry')
SELECT ShipmentID FROM Shipment WHERE Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Phillip J. Fry')
SELECT Date FROM Shipment
SELECT Date FROM Shipment;
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela');
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela');
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') OR Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela');
SELECT ShipmentID FROM Shipment WHERE Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars') AND Manager = (SELECT EmployeeID FROM Employee WHERE Name = 'Turanga Leela');
SELECT T1.Name, COUNT(T2.ShipmentID) FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.Name
SELECT COUNT(T1.Planet), T2.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T2.Name
SELECT T2.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY COUNT(T1.Planet) DESC LIMIT 1
SELECT T1.Name FROM Planet AS T1 INNER JOIN Shipment AS T2 ON T1.PlanetID = T2.Planet GROUP BY T1.PlanetID ORDER BY COUNT(T2.Manager) DESC LIMIT 1;
SELECT T1.Name, COUNT(T2.ShipmentID) FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.Manager GROUP BY T1.EmployeeID
SELECT COUNT(*) , T1.Name FROM Employee AS T1 INNER JOIN Shipment AS T2 ON T1.EmployeeID = T2.Manager GROUP BY T1.Name
SELECT SUM(T1.Weight) FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID WHERE T2.Planet = ( SELECT PlanetID FROM Planet WHERE Name = 'Mars' )
SELECT SUM(T1.Weight) FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID WHERE T2.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Mars')
SELECT T1.Name, SUM(T2.Weight) FROM Shipment AS T2 INNER JOIN Package AS T1 ON T2.Manager = T1.Sender INNER JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T1.Sender IN ( SELECT AccountNumber FROM Client ) GROUP BY T3.Name
SELECT T2.Name, SUM(T1.Weight) FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.Sender = T2.Manager INNER JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet
SELECT T2.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE (T1.Weight * T1.Shipment) > 30
SELECT T2.Name FROM Shipment AS T1 INNER JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE SUM(T1.Weight) > 30
SELECT PackageNumber FROM Package WHERE Shipment IN ( SELECT ShipmentID FROM Shipment WHERE Manager = ( SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan' ) AND Date = '3004-05-11' ) AND Recipient IN ( SELECT AccountNumber FROM Client WHERE Name = 'Al Gore''s Head' );
SELECT COUNT(T1.PackageNumber) FROM Package AS T1 INNER JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID INNER JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T1.Sender = ( SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan' ) AND T3.Name = 'Omicron Persei 8';
SELECT PackageNumber FROM Package WHERE PlanetID IN (SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8') OR Sender = (SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan')
SELECT COUNT(*) FROM Package AS p JOIN Shipment AS s ON p.Sender = s.Manager JOIN Planet AS pl ON s.Planet = pl.PlanetID WHERE p.Sender = ( SELECT AccountNumber FROM Client WHERE Name = 'Zapp Brannigan' ) OR p.Recipient = ( SELECT PlanetID FROM Planet WHERE Name = 'Omicron Persei 8' );
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30;
SELECT PackageNumber, Weight FROM Package WHERE Weight BETWEEN 10 AND 30;
SELECT T1.Name FROM Employee AS T1 INNER JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee WHERE T2.Planet != (SELECT PlanetID FROM Planet WHERE Name = 'Mars')
SELECT Name FROM Employee WHERE EmployeeID NOT IN ( SELECT Employee FROM Has_Clearance WHERE Planet = 3 )
SELECT T1.Name FROM Employee AS T1 INNER JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee WHERE T2.Planet = (SELECT PlanetID FROM Planet WHERE Name = 'Omega III')
SELECT T1.Name FROM Employee AS T1 INNER JOIN Has_Clearance AS T2 ON T1.EmployeeID = T2.Employee WHERE T2.Planet = ( SELECT PlanetID FROM Planet WHERE Name = 'Omega III' )
SELECT T1.Name FROM Planet AS T1 INNER JOIN Has_Clearance AS T2 ON T1.PlanetID = T2.Planet WHERE T2.Level = 1 GROUP BY T1.Name HAVING COUNT(T1.Name) = 1
SELECT T1.Name FROM Planet AS T1 INNER JOIN Has_Clearance AS T2 ON T1.PlanetID = T2.Planet WHERE T2.Employee IN (SELECT EmployeeID FROM Employee GROUP BY EmployeeID HAVING COUNT(EmployeeID) = 1)
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000
SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000;
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000;
SELECT Name FROM Employee WHERE Salary > (SELECT AVG(Salary) FROM Employee) OR Salary > 5000;
SELECT COUNT(EmployeeID) FROM Employee WHERE EmployeeID NOT IN ( SELECT Employee FROM Has_Clearance WHERE Planet = 3 )
SELECT COUNT(DISTINCT EmployeeID) FROM Employee WHERE EmployeeID NOT IN ( SELECT Employee FROM Has_Clearance WHERE Planet = 3 )
SELECT COUNT(*) FROM game
SELECT COUNT(*) FROM game;
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC
SELECT Title, Developers FROM game ORDER BY Units_sold_Millions DESC
SELECT AVG(T1.Units_sold_Millions) FROM game AS T1 INNER JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T1.Developers != 'Nintendo' AND T2.Platform_ID IS NOT NULL
SELECT AVG(T1.Units_sold_Millions) FROM game AS T1 INNER JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T1.Developers != 'Nintendo'
SELECT Platform_name, Market_district FROM platform
SELECT Platform_name, Market_district FROM platform
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1;
SELECT Platform_name, Platform_ID FROM platform WHERE Download_rank = 1;
SELECT MAX(Rank_of_the_year) , MIN(Rank_of_the_year) FROM player
SELECT MAX(Rank_of_the_year) , MIN(Rank_of_the_year) FROM player
SELECT COUNT(*) FROM player WHERE Rank_of_the_year < 3;
SELECT COUNT("Player_ID") FROM player WHERE "Rank_of_the_year" <= 3;
SELECT Player_name FROM player ORDER BY Player_name ASC
SELECT Player_name FROM player ORDER BY Player_name
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC
SELECT Player_name, College FROM player ORDER BY Rank_of_the_year DESC
SELECT T2.Player_name, T3.Rank_of_the_year FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T1.Title = 'Super Mario World' AND T2.If_active
SELECT T1.Title, T2.Rank_of_the_year FROM game AS T1 INNER JOIN player AS T2 ON T1.Game_ID = T2.Player_ID WHERE T1.Title = 'Super Mario World' AND T2.Player_ID IN ( SELECT Player_ID FROM player );
SELECT DISTINCT T2.Developers FROM game_player AS T1 INNER JOIN player AS T2 ON T1.Player_ID = T2.Player_ID WHERE T2.College = 'Auburn' AND T1.Game_ID IN ( SELECT Game_ID FROM game WHERE Developers != '' )
SELECT DISTINCT T1.Developers FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID WHERE T1.Franchise = 'Pokémon' AND T2.Player_ID IN ( SELECT Player_ID FROM player WHERE College = 'Auburn' )
SELECT AVG(T1.Units_sold_Millions) FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID WHERE T2.Player_ID IN ( SELECT Player_ID FROM player WHERE Position = 'Guard' ) AND T1.Units_sold_Millions > 0
SELECT AVG(T1.Units_sold_Millions) FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID INNER JOIN player AS T3 ON T2.Player_ID = T3.Player_ID WHERE T3.Position = 'Guard' AND T1.Units_sold_Millions IS NOT NULL
SELECT T1.Title, T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID
SELECT T1.Title, T2.Platform_name FROM game AS T1 INNER JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID
SELECT T1.Title FROM game AS T1 INNER JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T2.Market_district IN ('Asia', 'USA') AND T2.Platform_name IS NOT NULL
SELECT T1.Title FROM game AS T1 INNER JOIN platform AS T2 ON T1.Platform_ID = T2.Platform_ID WHERE T2.Market_district IN ('Asia', 'USA') AND T2.Platform_name IS NOT NULL
SELECT Franchise, COUNT(*) FROM game GROUP BY Franchise
SELECT COUNT(*) , Franchise FROM game GROUP BY Franchise
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC LIMIT 1
SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(Game_ID) DESC LIMIT 1
SELECT DISTINCT Franchise FROM game WHERE Game_ID IN ( SELECT Game_ID FROM game GROUP BY Game_ID HAVING COUNT(Game_ID) > 1 )
SELECT DISTINCT "Franchise" FROM game GROUP BY "Franchise" HAVING COUNT("Game_ID") > 1;
SELECT Player_name FROM player WHERE Player_ID NOT IN ( SELECT Player_ID FROM game_player );
SELECT Player_name FROM player WHERE Player_ID NOT IN ( SELECT Player_ID FROM game_player );
SELECT T2.Title FROM player AS T1 INNER JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID INNER JOIN game AS T3 ON T2.Game_ID = T3.Game_ID WHERE T1.College = 'Oklahoma' INTERSECT SELECT T2.Title FROM player AS T1 INNER JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID INNER JOIN game AS T3 ON T2.Game_ID = T3.Game_ID WHERE T1.College = 'Auburn'
SELECT T2.Title FROM player AS T1 INNER JOIN game_player AS T2 ON T1.Player_ID = T2.Player_ID INNER JOIN game AS T3 ON T2.Game_ID = T3.Game_ID WHERE T1.College IN ('Oklahoma College', 'Auburn College')
SELECT DISTINCT "Franchise" FROM game
SELECT DISTINCT "Franchise" FROM game
SELECT Title FROM game WHERE Game_ID NOT IN ( SELECT Game_ID FROM game_player WHERE Player_ID IN ( SELECT Player_ID FROM player WHERE Position = 'Guard' ) );
SELECT T1.Title FROM game AS T1 INNER JOIN game_player AS T2 ON T1.Game_ID = T2.Game_ID WHERE T1.Platform_ID NOT IN (SELECT Platform_ID FROM player WHERE Position = 'Guard')
SELECT Name FROM press ORDER BY Year_Profits_billion DESC
SELECT Name FROM press ORDER BY Year_Profits_billion DESC
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion = 1
SELECT Name FROM press WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1
SELECT AVG("Year_Profits_billion"), MAX("Year_Profits_billion") FROM press
SELECT AVG("Year_Profits_billion"), MAX("Year_Profits_billion") FROM press GROUP BY "Press_ID"
SELECT Name FROM press ORDER BY Year_Profits_billion DESC LIMIT 1
SELECT Name FROM press ORDER BY Year_Profits_billion DESC LIMIT 1
SELECT (SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1), (SELECT Name FROM press ORDER BY Month_Profits_billion ASC LIMIT 1)
SELECT (SELECT Name FROM press ORDER BY Month_Profits_billion LIMIT 1), (SELECT Name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1)
SELECT COUNT(*) FROM author WHERE Age < 30;
SELECT COUNT(*) FROM author WHERE Age < 30;
SELECT AVG(Age) , Gender FROM author GROUP BY Gender
SELECT Gender, AVG(Age) FROM author GROUP BY Gender
SELECT COUNT(*) , Gender FROM author WHERE Age > 30 GROUP BY Gender
SELECT COUNT(*) , Gender FROM author WHERE Age > 30 GROUP BY Gender
SELECT Title FROM book ORDER BY Release_date DESC
SELECT Title FROM book ORDER BY Release_date DESC
SELECT COUNT(Book_Series) FROM book GROUP BY Book_Series
SELECT Book_Series, COUNT(Book_ID) FROM book GROUP BY Book_Series
SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5;
SELECT Title, Release_date FROM book ORDER BY Sale_Amount DESC LIMIT 5;
SELECT Book_Series FROM book WHERE Sale_Amount > '1000' INTERSECT SELECT Book_Series FROM book WHERE Sale_Amount < '500';
SELECT Book_Series FROM book WHERE Sale_Amount > '1000' INTERSECT SELECT Book_Series FROM book WHERE Sale_Amount < '500';
SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series IN ('MM', 'LT') GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Book_Series) = 2
SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Book_Series IN ('MM', 'LT') GROUP BY T1.Name HAVING COUNT(T2.Book_Series) = 2
SELECT Name, Age FROM author WHERE Author_ID NOT IN ( SELECT Author_ID FROM book );
SELECT Name FROM author WHERE Author_ID NOT IN ( SELECT Author_ID FROM book );
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Name HAVING COUNT(T1.Author_ID) > 1
SELECT T1.Name FROM author AS T1 JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Name HAVING COUNT(T1.Name) > 1
SELECT T1.Title, T2.Name, T3.Name FROM book AS T1 INNER JOIN author AS T2 ON T1.Author_ID = T2.Author_ID INNER JOIN press AS T3 ON T1.Press_ID = T3.Press_ID ORDER BY T1.Sale_Amount DESC LIMIT 3
SELECT T1.Title, T2.Name, T3.Name FROM book AS T1 INNER JOIN author AS T2 ON T1.Author_ID = T2.Author_ID INNER JOIN press AS T3 ON T1.Press_ID = T3.Press_ID ORDER BY T1.Sale_Amount DESC LIMIT 3
SELECT T1.Name, SUM(T2.Sale_Amount) FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Name
SELECT T1.Name, SUM(T2.Sale_Amount) FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Name
SELECT COUNT(*) , T1.Name FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Press_ID WHERE CAST(REPLACE(T2.Sale_Amount, ',', '') AS REAL) > 1000 GROUP BY T1.Name
SELECT T1.Name, COUNT(T2.Book_ID) FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Press_ID WHERE T2.Sale_Amount > '1000' GROUP BY T1.Name
SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Sale_Amount = ( SELECT MAX(Sale_Amount) FROM book );
SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Sale_Amount = ( SELECT MAX(Sale_Amount) FROM book );
SELECT T1.Name, T1.Gender FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Author_ID ORDER BY COUNT(T2.Book_ID) DESC LIMIT 1
SELECT T1.Name, T1.Gender FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID GROUP BY T1.Name ORDER BY COUNT(T2.Book_ID) DESC LIMIT 1
SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Press_ID NOT IN (SELECT Press_ID FROM press WHERE Name = 'Accor')
SELECT T1.Name FROM author AS T1 INNER JOIN book AS T2 ON T1.Author_ID = T2.Author_ID WHERE T2.Press_ID != (SELECT Press_ID FROM press WHERE Name = 'Accor')
SELECT T1.Name, SUM(T2.Year_Profits_billion) FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Press_ID WHERE T2.Book_ID IN ( SELECT Book_ID FROM book GROUP BY Press_ID HAVING COUNT(Book_ID) > 2 )
SELECT T1.Name, (T1.Year_Profits_billion + T1.Month_Profits_billion) / 12 FROM press AS T1 INNER JOIN book AS T2 ON T1.Press_ID = T2.Press_ID GROUP BY T1.Name HAVING COUNT(T2.Book_ID) > 2
SELECT COUNT(*) FROM Authors;
SELECT author_name FROM Authors;
SELECT author_name, other_details FROM Authors;
SELECT other_details FROM Authors WHERE author_name = 'Addison Denesik';
SELECT COUNT(document_id) FROM Documents;
SELECT author_name FROM Documents WHERE document_id = 4;
SELECT author_name FROM Documents WHERE document_name = 'Travel to Brazil'
SELECT COUNT(*) FROM Documents WHERE author_name = 'Era Kerluke'
SELECT document_name, document_description FROM Documents;
SELECT document_id, document_name FROM Documents WHERE author_name = 'Bianka Cummings'
SELECT T1.author_name, T2.document_description FROM Authors AS T1 INNER JOIN Documents AS T2 ON T1.author_name = T2.author_name WHERE T2.document_name = 'Travel to China'
SELECT author_name, COUNT(document_id) FROM Documents GROUP BY author_name
SELECT author_name FROM Documents GROUP BY author_name ORDER BY COUNT(document_id) DESC LIMIT 1;
SELECT DISTINCT author_name FROM Documents GROUP BY author_name HAVING COUNT(document_id) >= 2
SELECT COUNT(process_id) FROM Business_Processes;
SELECT next_process_id, process_name, process_description FROM Business_Processes WHERE process_id = 9
SELECT T2.process_name FROM Business_Processes AS T1 INNER JOIN Business_Processes AS T2 ON T1.next_process_id = T2.process_id WHERE T1.process_id = 9 AND T2.process_id = ( SELECT next_process_id FROM Business_Processes WHERE process_id = 9 )
SELECT COUNT(*) FROM Process_Outcomes
SELECT process_outcome_code, process_outcome_description FROM Process_Outcomes;
SELECT process_outcome_description FROM Process_Outcomes WHERE process_outcome_code = 'working'
SELECT COUNT(process_status_code) FROM Process_Status
SELECT process_status_code, process_status_description FROM Process_Status;
SELECT process_status_description FROM Process_Status WHERE process_status_code = 'ct';
SELECT COUNT(staff_id) FROM Staff;
SELECT staff_id, staff_details FROM Staff;
SELECT staff_details FROM Staff WHERE staff_id = 100;
SELECT COUNT(staff_role_code) FROM Ref_Staff_Roles;
SELECT staff_role_code, staff_role_description FROM Ref_Staff_Roles;
SELECT staff_role_description FROM Ref_Staff_Roles WHERE staff_role_code = 'HR'
SELECT COUNT(*) FROM Documents_Processes WHERE process_id IS NOT NULL;
SELECT process_id FROM Documents_Processes WHERE document_id IS NOT NULL
SELECT document_id FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_Processes );
SELECT process_id FROM Business_Processes WHERE process_id NOT IN ( SELECT process_id FROM Documents_Processes );
SELECT process_outcome_description, process_status_description FROM Process_Outcomes JOIN Documents_Processes ON Process_Outcomes.process_outcome_code = Documents_Processes.process_outcome_code WHERE document_id = 0 AND process_id = 9;
SELECT T2.process_name FROM Documents AS T1 INNER JOIN Documents_Processes AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'Travel to Brazil'
SELECT process_id, COUNT(*) FROM Documents_Processes GROUP BY process_id
SELECT COUNT(staff_id) FROM Staff_in_Processes WHERE document_id = 0 AND process_id = 9;
SELECT staff_id, COUNT(*) FROM Staff_in_Processes GROUP BY staff_id
SELECT staff_role_code, COUNT(*) FROM Staff_in_Processes GROUP BY staff_role_code
SELECT COUNT(DISTINCT staff_role_code) FROM Staff_in_Processes WHERE staff_id = 3;
SELECT COUNT(*) FROM Agencies;
SELECT COUNT(*) FROM Agencies;
SELECT agency_id, agency_details FROM Agencies;
SELECT agency_id, agency_details FROM Agencies;
SELECT COUNT(*) FROM Clients
SELECT COUNT(*) FROM Clients
SELECT client_id, client_details FROM Clients;
SELECT client_id, client_details FROM Clients
SELECT agency_id, COUNT(client_id) FROM Clients GROUP BY agency_id
SELECT COUNT(*) , agency_id FROM Clients GROUP BY agency_id
SELECT T1.agency_id, T1.agency_details, COUNT(T2.client_id) FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY COUNT(T2.client_id) DESC LIMIT 1
SELECT agency_id, agency_details FROM Agencies WHERE agency_id = ( SELECT agency_id FROM Clients GROUP BY agency_id ORDER BY COUNT(client_id) DESC LIMIT 1 )
SELECT T1.agency_id, T1.agency_details, COUNT(T2.client_id) AS num_clients FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id HAVING COUNT(T2.client_id) >= 2
SELECT agency_id, agency_details FROM Agencies WHERE agency_id IN ( SELECT agency_id FROM Clients GROUP BY agency_id HAVING COUNT(client_id) >= 2 )
SELECT T1.agency_details FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id WHERE T2.client_details = 'Mac'
SELECT T1.agency_details FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id WHERE T2.client_details = 'Mac'
SELECT T1.client_details, T1.sic_code, T1.agency_id, T2.agency_details FROM Clients AS T1 INNER JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id
SELECT T1.client_details, T1.sic_code, T1.agency_id, T2.agency_details FROM Clients AS T1 INNER JOIN Agencies AS T2 ON T1.agency_id = T2.agency_id
SELECT sic_code, COUNT(client_id) FROM Clients GROUP BY sic_code
SELECT COUNT(client_id) , sic_code FROM Clients GROUP BY sic_code
SELECT client_id, client_details FROM Clients WHERE sic_code = 'Bad'
SELECT client_details FROM Clients WHERE sic_code = 'Bad'
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id
SELECT T1.agency_id, T1.agency_details FROM Agencies AS T1 INNER JOIN Clients AS T2 ON T1.agency_id = T2.agency_id
SELECT agency_id FROM Agencies WHERE agency_id NOT IN ( SELECT agency_id FROM Clients );
SELECT agency_id FROM Agencies WHERE agency_id NOT IN ( SELECT agency_id FROM Clients )
SELECT COUNT(*) FROM Invoices;
SELECT COUNT(*) FROM Invoices;
SELECT invoice_id, invoice_status, invoice_details FROM Invoices WHERE client_id IN (SELECT client_id FROM Clients)
SELECT invoice_id, invoice_status, invoice_details FROM Invoices;
SELECT client_id, COUNT(invoice_id) FROM Invoices GROUP BY client_id
SELECT COUNT(invoice_id) FROM Invoices GROUP BY client_id
SELECT client_id, COUNT(invoice_id) AS num_invoices FROM Invoices GROUP BY client_id ORDER BY num_invoices DESC LIMIT 1
SELECT T1.client_id, T1.client_details FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id ORDER BY T2.invoice_id DESC LIMIT 1
SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2
SELECT client_id FROM Invoices GROUP BY client_id HAVING COUNT(invoice_id) >= 2
SELECT invoice_status, COUNT(invoice_id) FROM Invoices GROUP BY invoice_status
SELECT invoice_status, COUNT(invoice_id) FROM Invoices GROUP BY invoice_status
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(invoice_id) DESC LIMIT 1
SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY COUNT(invoice_id) DESC LIMIT 1
SELECT T1.invoice_status, T1.invoice_details, T2.client_id, T2.client_details, T3.agency_id, T3.agency_details FROM Invoices AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id INNER JOIN Agencies AS T3 ON T2.agency_id = T3.agency_id
SELECT T1.invoice_status, T1.invoice_details, T1.client_id, T2.agency_id, T2.agency_details FROM Invoices AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id
SELECT meeting_type, other_details FROM Meetings
SELECT meeting_type, other_details FROM Meetings
SELECT meeting_outcome, purpose_of_meeting FROM Meetings
SELECT meeting_outcome, purpose_of_meeting FROM Meetings
SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN ( SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working' )
SELECT payment_id, payment_details FROM Payments WHERE invoice_id IN ( SELECT invoice_id FROM Invoices WHERE invoice_status = 'Working' )
SELECT invoice_id, invoice_status FROM Invoices WHERE invoice_id NOT IN ( SELECT invoice_id FROM Payments );
SELECT T1.invoice_id, T1.invoice_status FROM Invoices AS T1 LEFT JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id WHERE T2.payment_id IS NULL
SELECT COUNT(*) FROM Payments;
SELECT COUNT(*) FROM Payments;
SELECT payment_id, invoice_id, payment_details FROM Payments;
SELECT payment_id, invoice_id, payment_details FROM Payments;
SELECT DISTINCT T1.invoice_id, T1.invoice_status FROM Invoices AS T1 INNER JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id
SELECT DISTINCT T1.invoice_id, T1.invoice_status FROM Invoices AS T1 INNER JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id
SELECT invoice_id, COUNT(payment_id) FROM Payments GROUP BY invoice_id
SELECT COUNT(payment_id) FROM Payments GROUP BY invoice_id
SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details FROM Invoices AS T1 INNER JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id ORDER BY COUNT(T2.payment_id) DESC LIMIT 1
SELECT T1.invoice_id, T1.invoice_status, T1.invoice_details FROM Invoices AS T1 INNER JOIN Payments AS T2 ON T1.invoice_id = T2.invoice_id GROUP BY T1.invoice_id ORDER BY COUNT(T2.payment_id) DESC LIMIT 1
SELECT COUNT(staff_id) FROM Staff;
SELECT COUNT(staff_id) FROM Staff;
SELECT agency_id, COUNT(staff_id) FROM Staff GROUP BY agency_id
SELECT agency_id, COUNT(staff_id) FROM Staff GROUP BY agency_id
SELECT T1.agency_id, T1.agency_details, COUNT(T2.staff_id) AS staff_count FROM Agencies AS T1 INNER JOIN Staff AS T2 ON T1.agency_id = T2.agency_id GROUP BY T1.agency_id ORDER BY staff_count DESC LIMIT 1
SELECT agency_id, agency_details FROM Agencies WHERE agency_id = ( SELECT agency_id FROM Staff GROUP BY agency_id ORDER BY COUNT(staff_id) DESC LIMIT 1 )
SELECT meeting_outcome, COUNT(*) FROM Meetings GROUP BY meeting_outcome
SELECT COUNT(meeting_outcome) FROM Meetings GROUP BY meeting_outcome
SELECT client_id, COUNT(*) FROM Meetings GROUP BY client_id
SELECT COUNT(*) , client_id FROM Meetings GROUP BY client_id
SELECT meeting_type, COUNT(*) FROM Meetings GROUP BY meeting_type
SELECT COUNT(meeting_type) FROM Meetings GROUP BY meeting_type
SELECT M.meeting_id, M.meeting_outcome, M.meeting_type, C.client_details FROM Meetings M JOIN Clients C ON M.client_id = C.client_id
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM Meetings AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id
SELECT meeting_id, COUNT(staff_id) FROM Staff_in_Meetings GROUP BY meeting_id
SELECT COUNT(*) , m.meeting_id FROM Meetings AS m JOIN Staff_in_Meetings AS s ON m.meeting_id = s.meeting_id GROUP BY s.meeting_id
SELECT T1.staff_id ,  COUNT(T2.meeting_id) FROM Staff AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY COUNT(T2.meeting_id) LIMIT 1
SELECT staff_id FROM Staff_in_Meetings GROUP BY staff_id HAVING COUNT(*) = ( SELECT MIN(count) FROM ( SELECT COUNT(staff_id) AS count FROM Staff_in_Meetings ) )
SELECT COUNT(*) FROM Staff_in_Meetings;
SELECT COUNT(DISTINCT staff_id) FROM Staff_in_Meetings;
SELECT COUNT(DISTINCT staff_id) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings );
SELECT COUNT(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_Meetings );
SELECT T1.client_id, T1.sic_code, T1.client_details, T2.invoice_status, T2.invoice_details FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id UNION SELECT T1.client_id, T1.sic_code, T1.client_details, NULL, NULL FROM Clients AS T1 INNER JOIN Meetings AS T2 ON T1.client_id = T2.client_id
SELECT T2.client_id, T2.sic_code, T2.client_details, T3.meeting_id, T3.meeting_outcome, T3.meeting_type FROM Invoices AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id INNER JOIN Meetings AS T3 ON T3.client_id = T2.client_id
SELECT staff_id, staff_details FROM Staff WHERE staff_details LIKE '%s%'
SELECT staff_id, staff_details FROM Staff WHERE agency_id IN (SELECT agency_id FROM Meetings) AND staff_details LIKE '%s%'
SELECT T1.client_id, T2.sic_code, T2.agency_id FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id WHERE T2.invoice_status != 'Completed' GROUP BY T1.client_id HAVING COUNT(T2.invoice_id) > 0
SELECT T1.client_id, T2.sic_code, T3.agency_id FROM Clients AS T1 INNER JOIN Invoices AS T2 ON T1.client_id = T2.client_id INNER JOIN Meetings AS T3 ON T1.client_id = T3.client_id WHERE T2.invoice_status != 'Starting' AND T3.meeting_outcome = 'Report'
SELECT T1.start_date_time, T1.end_date_time, T2.client_details, T4.staff_details FROM Meetings AS T1 INNER JOIN Clients AS T2 ON T1.client_id = T2.client_id INNER JOIN Staff_in_Meetings AS T3 ON T1.meeting_id = T3.meeting_id INNER JOIN Staff AS T4 ON T3.staff_id = T4.staff_id
SELECT T1.start_date_time, T1.end_date_time, T2.client_details, T3.staff_details FROM Meetings AS T1 INNER JOIN Staff_in_Meetings AS T2 ON T1.meeting_id = T2.meeting_id INNER JOIN Staff AS T3 ON T2.staff_id = T3.staff_id