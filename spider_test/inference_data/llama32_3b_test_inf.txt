SELECT COUNT(*) FROM clubs;
SELECT COUNT(*) FROM clubs;
SELECT name FROM clubs ORDER BY name ASC;
SELECT name FROM clubs ORDER BY name;
SELECT manager, captain FROM club;
SELECT manager, captain FROM club
SELECT club_name FROM clubs WHERE manufacturer != 'Nike'
SELECT club_name FROM clubs WHERE manufacturer != 'Nike'
SELECT name FROM player ORDER BY wins_count ASC;
SELECT name FROM player ORDER BY wins ASC;
SELECT player_name FROM earnings WHERE earnings = ( SELECT MAX(earnings) FROM earnings );
SELECT player_name FROM player WHERE earnings = ( SELECT MAX(earnings) FROM player );
SELECT DISTINCT T2.country FROM player AS T1 INNER JOIN earnings AS T2 ON T1.player_id = T2.player_id WHERE T2.earnings > 1200000;
SELECT country FROM player WHERE salary > 1200000;
SELECT T2.country FROM player AS T1 INNER JOIN earnings AS T2 ON T1.player_id = T2.player_id WHERE T1.win_count > 2 ORDER BY T2.earnings DESC LIMIT 1;
SELECT T1.country FROM player AS T1 INNER JOIN wins AS T2 ON T1.player_id = T2.player_id GROUP BY T1.country HAVING COUNT(T2.wins) > 2 ORDER BY SUM(T2.wins) DESC LIMIT 1;
SELECT T1.name, T2.name FROM player AS T1 INNER JOIN club AS T2 ON T1.club_id = T2.id
SELECT T1.name, T2.club FROM player AS T1 INNER JOIN club AS T2 ON T1.id = T2.player_id
SELECT club FROM clubs WHERE COUNT(win_count) > 2;
SELECT T1.name FROM club AS T1 INNER JOIN player AS T2 ON T1.id = T2.club_id GROUP BY T1.name HAVING COUNT(T2.player_id) > 2
SELECT T1.name FROM club AS T1 INNER JOIN player AS T2 ON T1.id = T2.club_id WHERE T2.manager = 'Sam Allardyce';
SELECT T1.name FROM player AS T1 INNER JOIN club AS T2 ON T1.club_id = T2.id WHERE T2.manager = 'Sam Allardyce';
SELECT club FROM clubs WHERE club IN ( SELECT club FROM players GROUP BY club ORDER BY AVG(player_earnings) DESC )
SELECT club FROM clubs ORDER BY AVG(player_earnings) DESC;
SELECT manufacturer, COUNT(*) FROM club GROUP BY manufacturer;
SELECT COUNT(DISTINCT manufacturer) FROM club
SELECT manufacturer FROM clubs GROUP BY manufacturer ORDER BY COUNT(*) DESC LIMIT 1;
SELECT manufacturer FROM clubs GROUP BY manufacturer ORDER BY COUNT(*) DESC LIMIT 1;
SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(*) > 1;
SELECT manufacturer FROM club GROUP BY manufacturer HAVING COUNT(*) > 1;
SELECT country FROM players GROUP BY country HAVING COUNT(player_id) > 1;
SELECT COUNT(DISTINCT T1.country) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T1.player_id IN ( SELECT player_id FROM Player );
SELECT club FROM clubs WHERE id NOT IN (SELECT club_id FROM players)
SELECT club FROM clubs WHERE id NOT IN (SELECT club_id FROM players)
SELECT country FROM player WHERE earnings > 1400000 UNION SELECT country FROM player WHERE earnings < 1100000
SELECT country FROM player WHERE earnings > 1400000 INTERSECT SELECT country FROM player WHERE earnings < 1100000;
SELECT COUNT(DISTINCT T2.country) FROM Player AS T1 INNER JOIN Player_Country AS T2 ON T1.player_id = T2.player_id;
SELECT COUNT(DISTINCT T2.country) FROM Player AS T1 INNER JOIN Player_ID AS T2 ON T1.player_id = T2.player_id;
SELECT SUM(E) FROM Player WHERE Country IN ('Australia', 'Zimbabwe')
SELECT SUM(K) FROM (  SELECT SUM(C) AS K   FROM (    SELECT C     FROM Earnings     WHERE C = 'Australia' OR C = 'Zimbabwe'  ) AS T)
SELECT T1.id, T2.first_name, T2.last_name FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(T2.order_id) > 2 AND COUNT(DISTINCT T2.item_id) >= 3
SELECT c.id, c.first_name, c.last_name FROM customers AS c JOIN orders AS o ON c.id = o.customer_id WHERE o.order_id IN ( SELECT order_id FROM orders GROUP BY customer_id HAVING COUNT(order_id) > 2 AND SUM(VARCHAR_LENGTH(order_item)) >= 3 )
SELECT o.id, o.status, COUNT(p.prod_id) FROM orders o LEFT JOIN order_products op ON o.id = op.order_id LEFT JOIN products p ON op.product_id = p.id GROUP BY o.id;
SELECT COUNT(p.id), o.status, o.id FROM orders o JOIN order_items oi ON o.id = oi.order_id JOIN products p ON oi.product_id = p.id GROUP BY o.id;
SELECT order_date FROM orders WHERE id IN ( SELECT id FROM orders WHERE quantity > 1 OR order_date = ( SELECT MIN(order_date) FROM orders ) );
SELECT MIN(date), date FROM orders WHERE id IN ( SELECT id FROM order_items ) GROUP BY date HAVING COUNT(id) > 1;
SELECT first_name, middle_initial, last_name FROM customers WHERE id NOT IN (SELECT customer_id FROM orders)
SELECT first_name, middle_initial, last_name FROM customers WHERE id NOT IN (SELECT customer_id FROM orders)
SELECT T1.id, T1.name, T1.price, T1.color FROM products AS T1 INNER JOIN orders AS T2 ON T1.id = T2.product_id WHERE T2.order_id IN ( SELECT order_id FROM orders GROUP BY product_id HAVING COUNT(order_id) >= 2 )
SELECT id, name, price, color FROM products WHERE orders_count < 2;
SELECT order_id, date FROM orders WHERE id IN ( SELECT order_id FROM order_items GROUP BY order_id HAVING COUNT(order_item_id) >= 2 )
SELECT order_id, date FROM orders WHERE COUNT(order_item_id) >= 2;
SELECT T1.id, T1.product_name, T1.price FROM orders AS T1 INNER JOIN products AS T2 ON T1.product_id = T2.id GROUP BY T1.product_id ORDER BY COUNT(T1.product_id) DESC LIMIT 10;
SELECT p.id, p.name, p.price FROM products p JOIN orders o ON p.id = o.product_id GROUP BY p.id ORDER BY COUNT(o.id) DESC LIMIT 1;
SELECT order_id, SUM(product_price) FROM orders GROUP BY order_id ORDER BY SUM(product_price) LIMIT 1;
SELECT ord_id, SUM(p_cost) FROM orders GROUP BY ord_id ORDER BY SUM(p_cost) LIMIT 1;
SELECT payment_method FROM customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1;
SELECT payment_method FROM customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT c.customer_id) AS num_products, c.gender FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN products p ON o.product_id = p.product_id GROUP BY c.gender
SELECT COUNT(DISTINCT c.id) AS count FROM customers c JOIN orders o ON c.id = o.customer_id JOIN products p ON o.product_id = p.id WHERE o.order_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY c.gender
SELECT COUNT(o.order_id) ,  g.gender FROM orders o JOIN customers c ON o.customer_id = c.customer_id JOIN gender g ON c.gender_id = g.gender_id GROUP BY g.gender
SELECT COUNT(o.order_id) ,  g.gender FROM orders o JOIN customers c ON o.customer_id = c.customer_id JOIN genders g ON c.gender_id = g.gender_id GROUP BY g.gender
SELECT T1.first_name, T1.middle_initial, T1.last_name, T2.payment_method FROM customers AS T1 INNER JOIN payment_methods AS T2 ON T1.customer_id = T2.customer_id
SELECT first_name, middle_initial, last_name, payment_method FROM customers
SELECT i.status, i.date, s.shipment_date FROM invoices i JOIN shipments s ON i.id = s.invoice_id
SELECT statuses, dates, shipment_dates FROM invoices
SELECT p.name, s.ship_date FROM products p JOIN shipments s ON p.id = s.product_id WHERE s.status IN ('IN_TRANSIT', 'IN_TRANSIT_NULL') OR s.status IN ('IN_TRANSIT_NULL', 'IN_TRANSIT_NULL');
SELECT T1.name, T2.date FROM products AS T1 INNER JOIN shipments AS T2 ON T1.id = T2.product_id WHERE T2.shipped = 1;
SELECT s.status_code, s.shipment_tracking_number FROM shipments s JOIN orders o ON s.order_id = o.id JOIN items i ON s.item_id = i.id WHERE s.status_code IN ('NONT', 'NUL') AND s.shipment_tracking_number IS NOT NULL;
SELECT s.shipment_tracking_number, s.status_code FROM orders o INNER JOIN shipments s ON o.order_id = s.order_id WHERE s.status_code IN ('Shipped', 'Out for delivery') AND s.shipment_status = 'Delivered';
SELECT T1.product_id, T2.color FROM orders AS T1 INNER JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.shipped = 1;
SELECT T1.name, T2.color FROM products AS T1 INNER JOIN shipments AS T2 ON T1.id = T2.product_id WHERE T2.shipped = 1;
SELECT DISTINCT T1.product_name, T1.price, T1.description FROM customers AS T2 JOIN orders AS T3 ON T2.customer_id = T3.customer_id JOIN order_items AS T4 ON T3.order_id = T4.order_id JOIN products AS T1 ON T4.product_id = T1.product_id WHERE T2.gender = 'female'
SELECT T1.name, T1.price, T1.description FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customer_id = T2.customer_id INNER JOIN order_items AS T3 ON T2.order_id = T3.order_id WHERE T1.gender = 'female'
SELECT i.status FROM invoices i JOIN orders o ON i.order_id = o.id WHERE o.shipped = 0;
SELECT i.status FROM invoices i JOIN orders o ON i.order_id = o.id WHERE o.shipment_id IS NULL AND i.status IN ('IN_PROGRESS', 'NOT_DELIVERED')
SELECT order_id, date, SUM(total_cost) FROM orders GROUP BY order_id, date;
SELECT id, date, total_amount_paid FROM orders;
SELECT COUNT(DISTINCT c.customer_id) FROM customers c JOIN orders o ON c.customer_id = o.customer_id
SELECT COUNT(DISTINCT customer_id) FROM orders
SELECT COUNT(DISTINCT item_state) FROM orders;
SELECT COUNT(DISTINCT item_status_code) FROM ordered_items;
SELECT COUNT(DISTINCT payment_method_id) FROM customers
SELECT COUNT(DISTINCT payment_method_id) FROM customers;
SELECT login_name, password FROM customers WHERE phone_number LIKE '+12%'
SELECT username, password FROM customers WHERE phone_number LIKE '+12%'
SELECT product_sizes FROM products WHERE name LIKE '%Dell%'
SELECT product_size FROM products WHERE product_name LIKE '%Dell%'
SELECT price, size FROM products WHERE price > (SELECT AVG(price) FROM products)
SELECT price, size FROM products WHERE price > (SELECT AVG(price) FROM products)
SELECT COUNT(DISTINCT product_id) FROM products WHERE sold = 0;
SELECT COUNT(p.id) FROM products p WHERE p.order_id IS NULL;
SELECT COUNT(*) FROM customers WHERE payment_method IS NULL;
SELECT COUNT(*) FROM customers WHERE payment_method IS NULL;
SELECT order_status, date FROM orders
SELECT status_code, date FROM orders;
SELECT T1.address, T2.town, T2.county FROM customers AS T1 INNER JOIN addresses AS T2 ON T1.customer_id = T2.customer_id WHERE T2.country IN ('USA', 'United States')
SELECT T1.address, T2.town, T3.county FROM customers AS T1 INNER JOIN addresses AS T2 ON T1.customer_id = T2.customer_id INNER JOIN counties AS T3 ON T2.county_id = T3.county_id WHERE T3.name IN ('United States')
SELECT T1.first_name, T2.product_name FROM buyers AS T1 INNER JOIN orders AS T2 ON T1.id = T2.buyer_id
SELECT T1.first_name, T3.product_name FROM buyers AS T1 INNER JOIN orders AS T2 ON T1.id = T2.buyer_id INNER JOIN products AS T3 ON T2.product_id = T3.id
SELECT COUNT(*) FROM shipments
SELECT COUNT(*) FROM shipments
SELECT AVG(price) FROM products;
SELECT AVG(price) FROM products;
SELECT AVG(price) FROM orders;
SELECT AVG(price) FROM orders;
SELECT T1.email, T2.town, T2.county FROM customers AS T1 INNER JOIN counties AS T2 ON T1.county_id = T2.id GROUP BY T1.gender ORDER BY COUNT(T1.gender) LIMIT 1;
SELECT T1.email, T2.city, T2.county FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_frequency IN (50, 60)
SELECT o.order_date FROM orders o JOIN customers c ON o.customer_id = c.id JOIN payment_methods pm ON o.payment_method_id = pm.id WHERE (c.num_payment_methods > 1)
SELECT o.order_date FROM orders o JOIN customers c ON o.customer_id = c.id JOIN payment_methods pm ON c.id = pm.customer_id GROUP BY c.id HAVING COUNT(pm.payment_method_id) >= 2
SELECT order_status FROM orders GROUP BY order_status ORDER BY COUNT(order_status) LIMIT 1;
SELECT order_status FROM orders GROUP BY order_status ORDER BY COUNT(*) LIMIT 1;
SELECT id, description FROM products WHERE price * 3 > price
SELECT id, description FROM products WHERE quantity > 3;
SELECT invoice_id, invoice_date FROM invoices WHERE shipment_count >= 2;
SELECT i.id, i.date FROM invoices AS i JOIN shipments AS s ON i.id = s.invoice_id GROUP BY i.id HAVING COUNT(s.id) > 1;
SELECT shipment_tracking_number, shipment_date FROM shipments
SELECT tracking_number, shipment_date FROM shipments;
SELECT color, description, size FROM products WHERE price < (SELECT MAX(price) FROM products);
SELECT T1.color, T1.description, T1.size FROM products AS T1 INNER JOIN prices AS T2 ON T1.id = T2.product_id WHERE T2.price != ( SELECT MAX(price) FROM prices )
SELECT name FROM director WHERE age > (SELECT AVG(age) FROM director);
SELECT name FROM director ORDER BY id LIMIT 1;
SELECT COUNT(*) FROM channels WHERE internet_link LIKE '%bbc%'
SELECT COUNT(DISTINCT digital_terrestrial_channel) FROM channels;
SELECT title FROM programs ORDER BY start_year DESC;
SELECT director_id FROM programs GROUP BY director_id ORDER BY COUNT(program_id) DESC LIMIT 1;
SELECT T1.name, T2.age FROM director AS T1 INNER JOIN program AS T2 ON T1.director_id = T2.director_id GROUP BY T1.director_id ORDER BY COUNT(T2.program_id) DESC LIMIT 1;
SELECT title FROM programs ORDER BY id DESC LIMIT 1;
SELECT T1.name, T2.website FROM channel AS T1 INNER JOIN program AS T2 ON T1.id = T2.channel_id GROUP BY T1.name HAVING COUNT(T2.program_id) > 1;
SELECT channel_name, COUNT(program_id) FROM programs GROUP BY channel_name;
SELECT COUNT(*) FROM channels WHERE id IN (SELECT program_id FROM programs)
SELECT director FROM programs WHERE name = 'Dracula';
SELECT T1.name, COUNT(T2.id) FROM channel AS T1 INNER JOIN director AS T2 ON T1.id = T2.channel_id GROUP BY T1.name ORDER BY COUNT(T2.id) DESC LIMIT 1;
SELECT name FROM director WHERE age BETWEEN 30 AND 60;
SELECT channel FROM channel WHERE director_id IN ( SELECT director_id FROM director WHERE age < 40 ) AND director_id IN ( SELECT director_id FROM director WHERE age > 60 );
SELECT id, name FROM channel WHERE director != 'Hank Baskett'
SELECT COUNT(*) FROM radios;
SELECT transmitter FROM erp_kw ORDER BY erp_kw ASC;
SELECT name, original_air_date FROM tv_show;
SELECT city_channel FROM channel WHERE affiliation != 'ABC'
SELECT transmitter FROM radio WHERE ERP > 150 OR ERP < 30;
SELECT transmitter FROM radio WHERE ERP_kW = ( SELECT MAX(ERP_kW) FROM radio );
SELECT AVG ERP FROM radios
SELECT affiliation, COUNT(*) FROM city_channels GROUP BY affiliation;
SELECT affiliation FROM city_channels GROUP BY affiliation ORDER BY COUNT(affiliation) DESC LIMIT 1;
SELECT affiliation FROM city_channel WHERE affiliation IN ( SELECT affiliation FROM city_channel GROUP BY affiliation HAVING COUNT(*) > 3 );
SELECT city, station FROM city_channels ORDER BY station ASC;
SELECT T1.transmitter, T2.city FROM CREATETABLE AS T1 INNER JOIN CHANNELS AS T2 ON T1.id = T2.channel_id
SELECT c.channel_name, r.transmitter FROM radio r JOIN channel ch ON r.id = ch.radio_id WHERE r.ERP IN ( SELECT MAX(ERP) FROM radio ) ORDER BY r.ERP DESC;
SELECT T1.city_channel_id, COUNT(T2.transmitter_id) FROM C_i_t_y c, R_a_d_i_o t WHERE c.city_channel_id = t.city_channel_id GROUP BY t.transmitter_id;
SELECT DISTINCT transmitter FROM radio WHERE id NOT IN ( SELECT id FROM city_channel )
SELECT T1.model FROM vehicle AS T1 INNER JOIN top_speed AS T2 ON T1.id = T2.vehicle_id WHERE T2.top_speed = ( SELECT MAX(top_speed) FROM top_speed ) AND T1.power > 6000;
SELECT T1.model FROM vehicle AS T1 INNER JOIN top_speed AS T2 ON T1.id = T2.vehicle_id WHERE T1.power > 6000 ORDER BY T2.top_speed DESC LIMIT 1;
SELECT T1.name FROM Driver AS T1 INNER JOIN Citizen AS T2 ON T1.citizen_id = T2.id WHERE T2.country = 'United States';
SELECT DISTINCT T1.name FROM driver AS T1 INNER JOIN citizenship AS T2 ON T1.driver_id = T2.driver_id WHERE T2.citizenship = 'United States'
SELECT MAX(v vehicles), driver_id FROM drives GROUP BY driver_id
SELECT driver_id, COUNT(*) FROM vehicles GROUP BY driver_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT MAX(power) ,  AVG(power) FROM vehicle WHERE manufacturer = 'Zhuzhou';
SELECT MAX(power) ,  AVG(power) FROM vehicle WHERE manufacturer = 'Zhuzhou';
SELECT MIN(id) FROM vehicle WHERE id IN ( SELECT MIN(id) FROM vehicle );
SELECT MIN(drive_id) FROM vehicle
SELECT top_speed, power FROM vehicle WHERE year = 1996;
SELECT top_speed, power FROM vehicle WHERE year = 1996;
SELECT build_year, model_name, builder FROM vehicle
SELECT build_year, model, builder FROM vehicle
SELECT COUNT(DISTINCT T1.driver_id) FROM Vehicle AS T1 INNER JOIN Driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.year_build = 2012;
SELECT COUNT(DISTINCT T1.driver_id) FROM Vehicle AS T1 INNER JOIN Driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.year = 2012;
SELECT COUNT(DISTINCT driver_id) FROM races WHERE name = 'NASCAR';
SELECT COUNT(DISTINCT driver_id) FROM races WHERE race_name IN ('NASCAR', 'Circuit', 'Racing_Series') AND driver_id IN (SELECT driver_id FROM drivers);
SELECT AVG(T1.top_speed) FROM Vehicle AS T1 INNER JOIN Vehicle_Type AS T2 ON T1.vehicle_type_id = T2.id WHERE T2.name IN ('Sedan', 'Truck')
SELECT AVG(T1.top_speed) FROM vehicle AS T1 INNER JOIN vehicle_id AS T2 ON T1.id = T2.vehicle_id;
SELECT DISTINCT driver_id FROM vehicle WHERE power > 5000;
SELECT DISTINCT T1.name FROM driver AS T1 INNER JOIN vehicle AS T2 ON T1.driver_id = T2.driver_id WHERE T2.power > 5000;
SELECT model FROM cars WHERE total_production > 100 OR top_speed > 150;
SELECT model FROM car WHERE total_production > 100 OR top_speed > 150;
SELECT model_name, build_year FROM cars WHERE model_name LIKE '%DJ%'
SELECT model, build_year FROM cars WHERE model LIKE '%DJ%'
SELECT model FROM models WHERE driver IS NULL;
SELECT vehicle FROM vehicles WHERE id IN (SELECT driver_id FROM drives) AND model NOT IN (SELECT model FROM drives);
SELECT v.vehicle_id, v.model FROM vehicle v JOIN driver d ON v.vehicle_id = d.vehicle_id WHERE (d.driver_id IN ('Ziyang') OR v.manufacturer_id IN ('Ziyang')) AND d.driver_id NOT IN ('Ziyang')
SELECT v.id, m.model FROM vehicle v JOIN driver d ON v.id = d.vehicle_id JOIN model m ON v.id = m.vehicle_id GROUP BY v.id HAVING COUNT(DISTINCT d.driver_id) = 2 OR m.name = 'Ziyang'
SELECT v.id, v.model FROM vehicle v JOIN driver d ON v.id = d.vehicle_id WHERE d.driver_name = 'Jeff Gordon' OR (d.id IN ( SELECT driver_id FROM driver WHERE id NOT IN ( SELECT driver_id FROM driver WHERE driver_name = 'Jeff Gordon' ) ) AND d.id IN ( SELECT driver_id FROM driver WHERE id IN ( SELECT vehicle_id FROM vehicle ) ))
SELECT v.id, v.model FROM vehicle AS v JOIN driver AS d ON v.id = d.vehicle_id WHERE (d.driver_id IN ( SELECT driver_id FROM driver WHERE driver_name = 'Jeff Gordon' ) OR d.driver_id IN ( SELECT COUNT(*) OVER () - 1 )) AND v.id IN ( SELECT v.id FROM vehicle AS v JOIN driver AS d ON v.id = d.vehicle_id GROUP BY v.id HAVING COUNT(d.driver_id) > 2 )
SELECT COUNT(*) FROM vehicle WHERE top_speed = ( SELECT MAX(top_speed) FROM vehicle );
SELECT COUNT(*) FROM vehicles WHERE top_speed = ( SELECT MAX(top_speed) FROM vehicles );
SELECT driver_name FROM drivers ORDER BY driver_name;
SELECT name FROM driver ORDER BY name;
SELECT COUNT(DISTINCT driver_id) FROM race_series
SELECT COUNT(DISTINCT T1.driver_id) AS count FROM Driver AS T1 INNER JOIN RaceSeries AS T2 ON T1.driver_id = T2.driver_id GROUP BY T2.series_name
SELECT T1.name, T2.citizenship FROM driver AS T1 INNER JOIN vehicle AS T2 ON T1.driver_id = T2.driver_id WHERE T2.vehicle_model = 'DJ1';
SELECT T1.name, T2.citizenship FROM driver AS T1 INNER JOIN vehicle AS T2 ON T1.driver_id = T2.driver_id WHERE T2.model = 'DJ1'
SELECT COUNT(DISTINCT driver_id) FROM drivers WHERE experience IN ('N', 'C', 'R') AND license IN ('N', 'C', 'R') AND primacy = 'N'
SELECT COUNT(DISTINCT driver_id) FROM Driver WHERE vehicle_id IS NULL
SELECT COUNT(*) FROM exams;
SELECT COUNT(*) FROM exams;
SELECT DISTINCT subject_code FROM exams ORDER BY subject_code ASC;
SELECT DISTINCT subject_code FROM exams ORDER BY subject_code;
SELECT T1.name, T2.date FROM exams AS T1 INNER JOIN subjects AS T2 ON T1.subject_id = T2.id WHERE T2.code != 'Database';
SELECT exam_date, exam_name FROM exams WHERE subject_code != 'Database'
SELECT date FROM exams WHERE subject_code LIKE '%data%' ORDER BY date DESC;
SELECT date FROM exams WHERE subject_code LIKE '%data%' ORDER BY date DESC;
SELECT type, COUNT(*) FROM questions GROUP BY type;
SELECT type_code, COUNT(*) FROM questions GROUP BY type_code;
SELECT DISTINCT T1.answer_text FROM student AS T1 INNER JOIN comment AS T2 ON T1.student_id = T2.student_id WHERE T2.comment = 'Normal';
SELECT DISTINCT T1.answer_text FROM comments AS T1 INNER JOIN students AS T2 ON T1.student_id = T2.student_id WHERE T1.comment = 'Normal';
SELECT COUNT(DISTINCT comments) FROM student_answers
SELECT COUNT(DISTINCT T2.comment) FROM student AS T1 INNER JOIN answers AS T2 ON T1.student_id = T2.student_id
SELECT COUNT(*) FROM student_answer_text
SELECT answer_text FROM students ORDER BY frequency DESC
SELECT T1.first_name, T2.answer_date FROM students AS T1 INNER JOIN answers AS T2 ON T1.student_id = T2.student_id
SELECT T1.first_name, T2.date FROM students AS T1 INNER JOIN answers AS T2 ON T1.student_id = T2.student_id
SELECT email, date FROM students ORDER BY date DESC;
SELECT email, date FROM students ORDER BY date DESC;
SELECT MIN(VARCHAR) FROM STUDENT
SELECT assessment FROM assessments GROUP BY assessment ORDER BY COUNT(assessment) LIMIT 1;
SELECT DISTINCT T1.first_name FROM students AS T1 INNER JOIN answer AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(T2.answer_id) >= 2;
SELECT DISTINCT T1.first_name FROM students AS T1 INNER JOIN answer_records AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(T2.answer_id) >= 2
SELECT answer_text FROM valid_answer ORDER BY COUNT(answer_text) DESC LIMIT 1;
SELECT answer_text FROM valid_answer GROUP BY answer_text ORDER BY COUNT(answer_text) DESC LIMIT 1;
SELECT last_name FROM students WHERE gender != 'M'
SELECT last_name FROM students WHERE gender != 'M'
SELECT gender, COUNT(*) FROM students GROUP BY gender;
SELECT gender_code, COUNT(*) FROM students GROUP BY gender_code
SELECT last_name FROM students WHERE gender IN ('F', 'M')
SELECT T1.last_name FROM students AS T1 INNER JOIN student_gender AS T2 ON T1.student_id = T2.student_id WHERE T2.gender IN ('F', 'M')
SELECT DISTINCT first_name FROM students WHERE id NOT IN (SELECT id FROM answers)
SELECT DISTINCT T1.first_name FROM students AS T1 INNER JOIN answers AS T2 ON T1.student_id = T2.student_id WHERE T2.answer IS NULL
SELECT T1.answer_text FROM student AS T1 INNER JOIN comment AS T2 ON T1.student_id = T2.student_id WHERE T2.comment IN ('Normal', 'Absent')
SELECT T1.answer_text FROM student AS T1 INNER JOIN comment AS T2 ON T1.student_id = T2.student_id WHERE T2.comment IN ('Normal', 'Absent') GROUP BY T1.answer_text HAVING COUNT(T2.comment) > 1;
SELECT type FROM questions WHERE id IN ( SELECT id FROM questions GROUP BY id HAVING COUNT(id) >= 3 );
SELECT question_type_code FROM questions WHERE id IN ( SELECT id FROM questions GROUP BY id HAVING COUNT(id) >= 3 );
SELECT * FROM students;
SELECT * FROM students
SELECT COUNT(*) FROM addresses;
SELECT COUNT(*) FROM addresses;
SELECT address_id, address_details FROM addresses
SELECT address_id, address_details FROM addresses
SELECT COUNT(*) FROM products;
SELECT COUNT(*) FROM products;
SELECT product_id, product_type_code, product_name FROM products
SELECT id, type_code, name FROM products;
SELECT price FROM products WHERE name = 'Monitor';
SELECT price FROM products WHERE product_id IN (SELECT product_id FROM products WHERE name = 'Monitor')
SELECT MIN(price), AVG(price), MAX(price) FROM products;
SELECT MIN(price), AVG(price), MAX(price) FROM products;
SELECT AVG(VARCHAR) FROM products WHERE type = 'Clothes';
SELECT AVG(VARCHAR) FROM PRICES
SELECT COUNT(*) FROM products WHERE product_type IN ('hardware type')
SELECT COUNT(*) FROM products WHERE type IN ('Hardware', 'Type 1', 'Type 2') AND type NOT IN ('Type 3');
SELECT product_name FROM products WHERE price > (SELECT AVG(price) FROM products)
SELECT name FROM products WHERE price > (SELECT AVG(price) FROM products);
SELECT p.name FROM products AS p JOIN product_types AS pt ON p.product_type_id = pt.id WHERE p.price > (SELECT AVG(price) FROM products);
SELECT name FROM products WHERE price > (SELECT AVG(price) FROM products);
SELECT name FROM products WHERE type = 'Clothes' ORDER BY price DESC LIMIT 1;
SELECT name FROM products WHERE price = ( SELECT MAX(price) FROM products );
SELECT product_id, product_name FROM products WHERE product_type = 'Hardware' ORDER BY price ASC LIMIT 1;
SELECT id, name FROM products ORDER BY price ASC LIMIT 1;
SELECT name FROM products ORDER BY price DESC;
SELECT name FROM products ORDER BY price DESC;
SELECT product_name FROM products WHERE product_type IN ('hardware', 'hardware_type') ORDER BY price ASC;
SELECT name FROM products ORDER BY price ASC;
SELECT product_type_code, COUNT(*) FROM products GROUP BY product_type_code;
SELECT COUNT(*) , product_type FROM products GROUP BY product_type;
SELECT product_type_code, AVG(price) FROM products GROUP BY product_type_code;
SELECT AVG(price) FROM products WHERE product_type IN ('product_id', 'product_type_code')
SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(DISTINCT product_id) >= 2;
SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(product_id) > 1;
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY COUNT(product_type_code) DESC LIMIT 1;
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM customers;
SELECT customer_id, customer_name FROM customers;
SELECT id, name FROM customers;
SELECT address, phone, email FROM customers WHERE name = 'Jeromy';
SELECT address, phone, email FROM customers WHERE name = 'Jeromy';
SELECT payment_method_code, COUNT(*) FROM customers GROUP BY payment_method_code;
SELECT COUNT(DISTINCT c.customer_id) ,  SUM(CASE WHEN c.payment_method = 'PayPal' THEN 1 ELSE 0 END) AS paypal ,  SUM(CASE WHEN c.payment_method = 'Credit Card' THEN 1 ELSE 0 END) AS credit_card ,  SUM(CASE WHEN c.payment_method = 'Bank Transfer' THEN 1 ELSE 0 END) AS bank_transfer FROM customers c
SELECT payment_method_code FROM customers GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT payment_method FROM customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.customer_name, T2.payment_method_code FROM customers AS T1 INNER JOIN payment_methods AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.payment_method_code ORDER BY COUNT(T2.payment_method_code) ASC LIMIT 1;
SELECT c.customer_name FROM customers c JOIN payment_methods pm ON c.customer_id = pm.customer_id GROUP BY pm.payment_method ORDER BY COUNT(pm.payment_method) LIMIT 1;
SELECT payment_method, customer_number FROM customers WHERE name = 'Jeromy'
SELECT payment_method_code, customer_number FROM customers WHERE name = 'Jeromy'
SELECT DISTINCT payment_method FROM customers
SELECT DISTINCT payment_method_code FROM customers
SELECT id, product_type FROM products ORDER BY product_name;
SELECT id, product_type FROM products ORDER BY name
SELECT product_type FROM products GROUP BY product_type ORDER BY COUNT(product_id) LIMIT 1;
SELECT product_type_code FROM products GROUP BY product_type_code ORDER BY COUNT(product_type_id) LIMIT 1;
SELECT COUNT(*) FROM customer_orders;
SELECT COUNT(*) FROM customer_orders;
SELECT order_id, order_date, status_code FROM orders WHERE customer_id = 'Jeromy'
SELECT id, date, status_code FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE name = 'Jeromy')
SELECT c.customer_id, c.customer_name, COUNT(o.order_id) FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id;
SELECT c.name, o.id, COUNT(o.id) FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id;
SELECT customer_id, name, phone, email FROM customers WHERE id = ( SELECT MAX(id) FROM orders );
SELECT c.id, c.name, o.phone, o.email FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY o.customer_id ORDER BY COUNT(o.order_id) DESC LIMIT 1;
SELECT status, COUNT(*) FROM orders GROUP BY status;
SELECT COUNT(order_id) FROM orders WHERE status_code IN ('IN_PROGRESS', 'NOT_IN_PROGRESS')
SELECT ord_status_code FROM orders GROUP BY ord_status_code ORDER BY COUNT(ord_status_code) DESC LIMIT 1;
SELECT order_status_code FROM orders GROUP BY order_status_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(cust_id) FROM customers WHERE cust_id NOT IN (SELECT order_id FROM orders);
SELECT COUNT(cu.id) FROM customers cu JOIN orders o ON cu.id = o.customer_id WHERE o.id IS NULL;
SELECT product_name FROM products WHERE order_id IS NULL;
SELECT DISTINCT product_id FROM orders WHERE order_status IN ('notin stock', 'notin stock')
SELECT COUNT(DISTINCT order_id) FROM orders WHERE product_id IN (SELECT id FROM products WHERE name = 'Monitor')
SELECT COUNT(DISTINCT product_id) FROM orders WHERE product_id IN ( SELECT product_id FROM products );
SELECT COUNT(DISTINCT c.customer_id) FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN products p ON o.product_id = p.product_id WHERE p.product_name = 'Monitor';
SELECT COUNT(DISTINCT customer_id) FROM customers WHERE product_id IN ( SELECT product_id FROM products );
SELECT COUNT(c.customer_id) FROM customers c JOIN orders o ON c.customer_id = o.customer_id
SELECT COUNT(DISTINCT customer_id) FROM orders;
SELECT customer_id FROM customers WHERE order_id IS NULL;
SELECT id FROM customers WHERE id NOT IN ( SELECT customer_id FROM orders );
SELECT order_id, date FROM orders WHERE quantity > 6 OR product_id IN ( SELECT product_id FROM products WHERE quantity > 3 )
SELECT order_id, order_date FROM orders WHERE quantity > 6 OR (quantity - products) > 3;
SELECT COUNT(*) FROM buildings;
SELECT COUNT(*) FROM buildings;
SELECT building_name FROM buildings ORDER BY num_stories ASC;
SELECT building_name FROM buildings ORDER BY num_stories ASC;
SELECT building_id, address FROM buildings ORDER BY completion_year DESC;
SELECT T1.address FROM buildings AS T1 INNER JOIN building_id AS T2 ON T1.id = T2.building_id ORDER BY T2.completion_year DESC;
SELECT MAX(stories) FROM building WHERE completed = 0 AND year = 1980;
SELECT MAX(stories) FROM building WHERE completed = 0;
SELECT AVG(T2.population) FROM Region AS T1 INNER JOIN Region_ID AS T2 ON T1.id = T2.region_id;
SELECT AVG(T2.population) FROM Region AS T1 INNER JOIN PopulationRegion AS T2 ON T1.id = T2.region_id;
SELECT name FROM region ORDER BY name ASC;
SELECT name FROM region ORDER BY name;
SELECT T2.capital FROM REGIONS AS T1 INNER JOIN AREAS AS T2 ON T1.id = T2.region_id WHERE T2.area > 10000;
SELECT T2.capital FROM REGIONS AS T1 INNER JOIN AREAS AS T2 ON T1.id = T2.region_id WHERE T2.area > 10000;
SELECT T2.capital FROM Region AS T1 INNER JOIN City AS T2 ON T1.id = T2.region_id WHERE T1.population = ( SELECT MAX(population) FROM Region );
SELECT region_name, capital FROM regions WHERE population = ( SELECT MAX(population) FROM regions );
SELECT region_name FROM regions ORDER BY area DESC LIMIT 5;
SELECT name FROM region ORDER BY area DESC LIMIT 5;
SELECT T1.name, T2.region FROM buildings AS T1 INNER JOIN regions AS T2 ON T1.id = T2.building_id
SELECT T1.name, T2.region FROM buildings AS T1 INNER JOIN regions AS T2 ON T1.id = T2.building_id
SELECT DISTINCT r.name FROM region AS r JOIN building AS b ON r.id = b.region_id GROUP BY r.name HAVING COUNT(b.building_id) > 1;
SELECT DISTINCT region FROM buildings WHERE building_id IN ( SELECT building_id FROM buildings GROUP BY building_id HAVING COUNT(*) > 1 );
SELECT T2.capital FROM buildings AS T1 INNER JOIN region_id AS T2 ON T1.region_id = T2.id GROUP BY T1.region_id ORDER BY COUNT(T1.building_id) DESC LIMIT 1;
SELECT region, capital FROM buildings JOIN regions ON buildings.region_id = regions.id WHERE buildings.building_id IN ( SELECT building_id FROM buildings GROUP BY building_id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT T1.address, T2.capital FROM buildings AS T1 INNER JOIN regions AS T2 ON T1.region_id = T2.id WHERE T2.name IN ('Nam', 'Adr')
SELECT T1.address, T2.name FROM buildings AS T1 INNER JOIN regions AS T2 ON T1.region_id = T2.id
SELECT COUNT(*) FROM building WHERE region_id IN (SELECT id FROM region WHERE name = 'Abruzzo')
SELECT COUNT(*) , b FROM building WHERE region_id IN (SELECT id FROM region WHERE name = 'Abruzzo')
SELECT completion_year, COUNT(*) FROM building GROUP BY completion_year;
SELECT COUNT(completed_year), completed_year FROM buildings GROUP BY completed_year;
SELECT YEAR FROM BUILDING GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1;
SELECT MAX(YEAR) FROM BUILDING
SELECT DISTINCT region_id FROM building WHERE building_id NOT IN ( SELECT building_id FROM building_region )
SELECT DISTINCT region_id FROM building WHERE region_id NOT IN ( SELECT region_id FROM regions );
SELECT T1.year FROM buildings AS T1 INNER JOIN building_id AS T2 ON T1.id = T2.building_id INNER JOIN region_id AS T3 ON T1.id = T3.building_id INNER JOIN num_buildings AS T4 ON T1.id = T4.building_id WHERE T4.num_buildings > 20 INTERSECT SELECT T1.year FROM buildings AS T1 INNER JOIN building_id AS T2 ON T1.id = T2.building_id INNER JOIN region_id AS T3 ON T1.id = T3.building_id INNER JOIN num_buildings AS T4 ON T1.id = T4.building_id WHERE T4.num_buildings < 15
SELECT DISTINCT T1.year FROM building AS T1 INNER JOIN design_id AS T2 ON T1.id = T2.building_id INNER JOIN region_id AS T3 ON T1.id = T3.building_id WHERE T1.stories > 20 INTERSECT SELECT DISTINCT T1.year FROM building AS T1 INNER JOIN design_id AS T2 ON T1.id = T2.building_id INNER JOIN region_id AS T3 ON T1.id = T3.building_id WHERE T1.stories < 15;
SELECT DISTINCT T1.address FROM buildings AS T1 INNER JOIN addresses AS T2 ON T1.id = T2.building_id;
SELECT DISTINCT T1.address FROM building AS T1 INNER JOIN address AS T2 ON T1.id = T2.building_id
SELECT completed_year FROM building ORDER BY COUNT(story) DESC;
SELECT building_id, completion_year FROM buildings ORDER BY num_stories DESC;
SELECT channel FROM channels ORDER BY channel;
SELECT channel_id, name, description FROM channels ORDER BY name;
SELECT COUNT(*) FROM services;
SELECT COUNT(*) FROM services;
SELECT analytical_layer_type_code FROM analytical_layers GROUP BY analytical_layer_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT analytical_layer_type_code FROM analytical_layer WHERE COUNT(analytical_layer_type_code) = ( SELECT MAX(COUNT(analytical_layer_type_code)) FROM analytical_layer );
SELECT s.name FROM customers c JOIN services s ON c.id = s.customer_id WHERE c.details = 'Hardy Kutch';
SELECT s.service_id, s.name, s.description FROM customers c JOIN services s ON c.customer_id = s.customer_id WHERE c.name = 'Hardy Kutch';
SELECT COUNT(*) FROM services WHERE id IN ( SELECT id FROM service_details GROUP BY service_id HAVING COUNT(*) > 3 );
SELECT s.service_id, s.name, c.customer_id, c.name FROM customers c JOIN customer_services cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id WHERE cs.frequency > 3;
SELECT c.Customer_ID, c.Name, COUNT(s.Ser vice_ID) AS Service_Count FROM customers c JOIN customer_services cs ON c.Customer_ID = cs.Customer_ID JOIN services s ON cs.Service_ID = s.Service_ID GROUP BY c.Customer_ID ORDER BY Service_Count DESC LIMIT 1;
SELECT c.customer_id, COUNT(s.service_id) AS count FROM customers c JOIN customer_services cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id GROUP BY c.customer_id ORDER BY count DESC LIMIT 1;
SELECT c.customer_id, COUNT(s.service_id) FROM customers c JOIN customer_services cs ON c.customer_id = cs.customer_id JOIN services s ON cs.service_id = s.service_id GROUP BY c.customer_id ORDER BY COUNT(s.service_id) DESC LIMIT 1;
SELECT T1.customer_id, T2.services FROM customers AS T1 INNER JOIN customer_services AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(T2.service_id) DESC LIMIT 1
SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM services)
SELECT * FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM services)
SELECT c.customer_id, c.name, s.service_id, s.name, s.description, s.price FROM customers c JOIN services s ON c.customer_id = s.customer_id JOIN service_details sd ON s.service_id = sd.service_id WHERE sd.id IN ( SELECT id FROM service_details GROUP BY id ORDER BY COUNT(*) ASC LIMIT 1 )
SELECT DISTINCT customer_id FROM customers WHERE service_id IN ( SELECT service_id FROM services GROUP BY service_id ORDER BY COUNT(*) ASC LIMIT 1 )
SELECT COUNT(DISTINCT customer_id) + COUNT(DISTINCT service_id) FROM customers_services
SELECT COUNT(cust_id) FROM customers; SELECT COUNT(service_id) FROM services;
SELECT * FROM customers WHERE name LIKE '%Kutch%'
SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM customer_details WHERE detail LIKE '%Kutch%')
SELECT T1.name FROM services AS T1 INNER JOIN customer_interactions AS T2 ON T1.id = T2.service_id WHERE T2.customer_id = 'Hardy Kutch' OR T2.rating IN (25, 5)
SELECT s.name, s.description, c.rating FROM customers c JOIN customer_interactions ci ON c.id = ci.customer_id JOIN services s ON ci.service_id = s.id WHERE c.name = 'Hardy Kutch' OR s.id IN ( SELECT service_id FROM customer_interactions WHERE rating = 2 );
SELECT T1.name FROM services AS T1 INNER JOIN customer_interactions AS T2 ON T1.id = T2.service_id WHERE T2.customer_id = (SELECT id FROM customers WHERE name = 'Hardy Kutch') AND T2.rating IN ('bad', 'very bad');
SELECT s.name, s.description, c.rating FROM customers c JOIN customer_interactions ci ON c.customer_id = ci.customer_id JOIN services s ON ci.service_id = s.id WHERE c.name = 'Hardy Kutch' AND ci.rating < 3;
SELECT * FROM services WHERE channel_id IN (SELECT id FROM channels WHERE name = '15 ij') AND interaction_type IN ('N', 'F');
SELECT * FROM channels WHERE detail = '15 ij' AND interaction_type IN ('channel', 'details')
SELECT * FROM interactions WHERE status = 'Stuck' AND service_id IN (SELECT id FROM services WHERE details LIKE '%bad%' AND type = 'service') AND channel_id IN (SELECT id FROM channels WHERE details LIKE '%bad%' AND type = 'channel');
SELECT customer_id, name, email FROM customers WHERE status = 'Stuck' AND service = 'bad' AND channel = 'bad';
SELECT COUNT(DISTINCT integration_platform_id) FROM integration_platform WHERE status = 'success' AND not null
SELECT COUNT(DISTINCT integration_platform_id) FROM integration_platform WHERE details LIKE '%Success%'
SELECT C.customer_id, C.name, C.email, I.integrate_platform_id, I.status FROM customers C INNER JOIN integrate_platforms I ON C.customer_id = I.customer_id WHERE I.status IN ('FOREIGN', 'NULL')
SELECT customer_id, name, email, phone FROM customer_integration WHERE interaction_platform = 'Fail'
SELECT s.name, c.customer_id, c.email, c.phone, c.address FROM customers c JOIN services s ON c.service_id = s.id WHERE s.id NOT IN ( SELECT service_id FROM orders )
SELECT s1.service_id, s1.name, s1.description FROM services AS s1 INNER JOIN customers AS s2 ON s1.customer_id = s2.customer_id WHERE s2.customer_id IS NULL
SELECT layer_type_code, COUNT(*) FROM layer_type WHERE layer_type_id IN (SELECT id FROM layer) GROUP BY layer_type_code;
SELECT analytical_layer_type_code, COUNT(*) FROM analytical_layer GROUP BY analytical_layer_type_code;
SELECT s.id, c.customer_id, s.service_id, s.status FROM customers c JOIN services s ON c.customer_id = s.customer_id WHERE s.status IN ('unsatisfied', 'INTENTGENER');
SELECT service_details FROM customers_and_services WHERE rating = 'unsatisfied'
SELECT COUNT(*) FROM vehicles;
SELECT COUNT(*) FROM vehicles;
SELECT name FROM vehicles ORDER BY model_year DESC;
SELECT name FROM vehicles ORDER BY model_year DESC;
SELECT DISTINCT powertrain FROM vehicles
SELECT DISTINCT type FROM powertrains
SELECT name, type_of_powertrain, annual_fuel_cost FROM vehicles WHERE model_year IN (2013, 2014)
SELECT name, type_powertrain, yearly_fuel_cost FROM vehicles WHERE model_year IN (2013, 2014)
SELECT DISTINCT T1.powertrain FROM vehicles AS T1 INNER JOIN powertrain AS T2 ON T1.id = T2.vehicle_id WHERE T1.year IN (2013, 2014)
SELECT DISTINCT T1.powertrain_type FROM vehicles AS T1 INNER JOIN years AS T2 ON T1.id = T2.vehicle_id WHERE T2.year IN (2013, 2014)
SELECT T1.powertrain, COUNT(*) FROM powertrain AS T1 INNER JOIN vehicle AS T2 ON T1.id = T2.powertrain_id GROUP BY T1.powertrain;
SELECT COUNT(*) , type FROM vehicles GROUP BY type
SELECT powertrain FROM vehicles GROUP BY powertrain ORDER BY COUNT(powertrain) DESC LIMIT 1;
SELECT type FROM powertrain WHERE count > ( SELECT MAX(count) FROM powertrain );
SELECT MIN(Co2emissionrate), MAX(Co2emissionrate), AVG(Co2emissionrate) FROM Vehicles
SELECT MIN(MoodyYearFuelCost), MAX(MoodyYearFuelCost), AVG(MoodyYearFuelCost) FROM Vehicles
SELECT name, model_year FROM vehicles WHERE city_fuel_economy_rate <= highway_fuel_economy_rate
SELECT T1.name, T2.model_year FROM vehicles AS T1 INNER JOIN fuel_economy AS T2 ON T1.id = T2.vehicle_id WHERE T2.city_fuel_economy_rate <= T2.highway_fuel_economy_rate AND T2.city_fuel_economy_rate IS NOT NULL
SELECT T1.powertrain_type, AVG(T2.average_annual_fuel_cost) FROM vehicles AS T1 JOIN fuel_costs AS T2 ON T1.id = T2.vehicle_id GROUP BY T1.powertrain_type HAVING COUNT(DISTINCT T1.powertrain_type) >= 2
SELECT T2.powertrain_type, AVG(T1.fuel_cost) FROM vehicles AS T1 INNER JOIN powertrains AS T2 ON T1.powertrain_id = T2.id GROUP BY T2.powertrain_type HAVING COUNT(DISTINCT T1.model_year) >= 2;
SELECT name, age, membership_credit FROM customers;
SELECT name, age, membership_credits FROM customers;
SELECT T1.name, T2.age FROM customers AS T1 INNER JOIN membership AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.membership_credit DESC LIMIT 1;
SELECT name, age FROM customers WHERE membership_credit = ( SELECT MAX(membership_credit) FROM customers );
SELECT AVG(age) FROM customers WHERE membership_credit > (SELECT AVG(membership_credit) FROM customers)
SELECT AVG(age) FROM customers WHERE membership IN (SELECT AVG(membership) FROM customers)
SELECT * FROM discounts;
SELECT * FROM DISCOUNT;
SELECT T1.name, SUM(T2.renting_hours) FROM vehicles AS T1 INNER JOIN renting_history AS T2 ON T1.id = T2.vehicle_id GROUP BY T1.name;
SELECT T1.name, SUM(T2.hours) FROM VEHICLES AS T1 INNER JOIN RENTALS AS T2 ON T1.id = T2.vehicle_id GROUP BY T1.name;
SELECT T1.name FROM VEHICLES AS T1 INNER JOIN RENTING_HISTORY AS T2 ON T1.id = T2.vehicle_id WHERE T2.renting_history IS NULL;
SELECT DISTINCT T1.name FROM vehicles AS T1 INNER JOIN rentals AS T2 ON T1.id = T2.vehicle_id WHERE T2.rented IS NULL;
SELECT T1.name FROM customers AS T1 INNER JOIN renting_history AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(T2.renting_history_id) >= 2
SELECT DISTINCT c.customer_id FROM customers AS c JOIN rental_history AS rh ON c.customer_id = rh.customer_id GROUP BY c.customer_id HAVING COUNT(rh.rental_history_id) >= 2;
SELECT T1.name, T2.model_year FROM vehicles AS T1 INNER JOIN renting_history AS T2 ON T1.id = T2.vehicle_id GROUP BY T2.vehicle_id ORDER BY COUNT(T2.renting_history_id) DESC LIMIT 1;
SELECT T1.name, T2.model_year FROM rentals AS T1 INNER JOIN vehicles AS T2 ON T1.vehicle_id = T2.id GROUP BY T1.vehicle_id ORDER BY COUNT(T1.rental_id) DESC LIMIT 1;
SELECT T1.vehicle_name FROM RENTAL AS T1 INNER JOIN VEHICLES AS T2 ON T1.vehicle_id = T2.vehicle_id ORDER BY T1.total_hours DESC;
SELECT T1.name FROM vehicles AS T1 INNER JOIN renting_history AS T2 ON T1.id = T2.vehicle_id ORDER BY T2.total_hours DESC;
SELECT discount_name FROM renting_history ORDER BY COUNT(id) DESC LIMIT 1;
SELECT d.id FROM discounts d JOIN rental_history rh ON d.id = rh.discount_id GROUP BY d.id ORDER BY COUNT(rh.id) DESC LIMIT 1;
SELECT T1.name, T2.powertrain_type FROM rentals AS T1 INNER JOIN cars AS T2 ON T1.car_id = T2.id WHERE T1.total_hours > 30;
SELECT T1.name, T2.powertrain_type FROM cars AS T1 INNER JOIN rental_history AS T2 ON T1.id = T2.car_id WHERE SUM(T2.hours) > 30;
SELECT AVG(Cospe_rate) FROM Car WHERE Cospe_type IN ('Diesel', 'Natural Gas', 'Modelyear', 'Type_of_power')
SELECT AVG(City_Fuel_Economy_Rate), AVG(Highway_Fuel_Economy_Rate) FROM Vehicle WHERE Powertrain = 'Diesel' OR Powertrain = 'Natural Gas' OR Powertrain = 'Primairy'
SELECT AVG(amount) FROM loans
SELECT AVG(DATETIME) FROM student_loans
SELECT T1.student_id, T2.biography FROM classes AS T1 INNER JOIN students AS T2 ON T1.student_id = T2.student_id WHERE T1.class_id IN ( SELECT class_id FROM classes GROUP BY class_id HAVING COUNT(*) > 1 ) AND T2.detention_id IN ( SELECT detention_id FROM detentions GROUP BY detention_id HAVING COUNT(*) < 2 );
SELECT biographical_data, student_id FROM classes AS T1 INNER JOIN students AS T2 ON T1.student_id = T2.student_id WHERE (T1.class_id IN ( SELECT class_id FROM classes WHERE attendance > 2 ) OR T2.detention_count < 2)
SELECT T1.teacher_id, T2.class_name FROM teachers AS T1 INNER JOIN classes AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.class_detail LIKE '%data%' AND NOT T2.class_detail LIKE 'net%'
SELECT T1.teacher_id, T2.teacher_name FROM classes AS T1 INNER JOIN teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.class_details LIKE '%data%' AND NOT T1.class_details LIKE '%net%'
SELECT * FROM students WHERE detention_id IS NULL AND student_loan_id IS NULL
SELECT * FROM students WHERE student_id NOT IN (SELECT student_id FROM detentions) AND student_id NOT IN (SELECT student_id FROM student_loans)
SELECT T1.loan_amount, T2.loan_date FROM students AS T1 INNER JOIN loans AS T2 ON T1.student_id = T2.student_id WHERE T1.achievements >= 2;
SELECT T1.loan_amount, T2.date FROM students AS T1 INNER JOIN achievements AS T2 ON T1.student_id = T2.student_id WHERE T2.achievement_type IN ('achievement', 'achievement_type_id') GROUP BY T1.student_id HAVING COUNT(T2.achievement_type) >= 2
SELECT teacher_id, COUNT(*) AS detail FROM classes GROUP BY teacher_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT teacher_id, details FROM classes GROUP BY teacher_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT description FROM detention
SELECT DISTINCT detention_description FROM DETENTION
SELECT personal_details, address_type_descriptions FROM students
SELECT s.student_id, s.name, s.address_type FROM students s;
SELECT T1.addresses, T2.biographical_info FROM students AS T1 INNER JOIN addresses AS T2 ON T1.student_id = T2.student_id WHERE T2.id IN ( SELECT student_id FROM addresses )
SELECT T1.addresses, T2.biographical_info FROM students AS T1 INNER JOIN addresses AS T2 ON T1.student_id = T2.student_id WHERE T2.id IN ( SELECT student_id FROM addresses )
SELECT biographical_data, transcript_date FROM students JOIN transcripts ON students.student_id = transcripts.student_id WHERE transcripts.transcript_id IN ( SELECT student_id FROM transcripts );
SELECT biographical_data, transcript_id FROM students
SELECT COUNT(*) , T1.behavior_monitoring_details FROM behavioral_monitoring_details AS T1 INNER JOIN students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.behavior_monitoring_details ORDER BY COUNT(T1.behavior_monitoring_details) DESC LIMIT 1;
SELECT COUNT(DISTINCT behavior_id), behavior_details FROM behavioral_monitoring GROUP BY behavior_details ORDER BY COUNT(DISTINCT behavior_id) DESC LIMIT 1;
SELECT biographical_data FROM students WHERE behaviour_monitoring_id IN ( SELECT behaviour_monitoring_id FROM behaviour_monitoring GROUP BY behaviour_monitoring_id ORDER BY COUNT(*) DESC LIMIT 1 ) AND behaviour_monitoring_id IN ( SELECT behaviour_monitoring_id FROM behaviour_monitoring GROUP BY behaviour_monitoring_id HAVING COUNT(*) = 3 );
SELECT b.id, b.name, b.date_of_birth, v.name AS behaviour_name, v.value FROM behaviour_monitoring b JOIN behaviour_monitoring_id d ON b.id = d.behaviour_monitoring_id JOIN behaviour_monitoring_value vm ON d.id = vm.behaviour_monitoring_id JOIN students s ON vm.student_id = s.id WHERE (b.name IN (SELECT name FROM behaviour_monitoring GROUP BY name ORDER BY COUNT(*) DESC LIMIT 1)) AND (b.name IN (SELECT name FROM behaviour_monitoring GROUP BY name HAVING COUNT(*) = 3))
SELECT biographical_info FROM students WHERE behavior_monitoring_details = ( SELECT behavior_monitoring_details FROM behavior_monitoring_details GROUP BY behavior_monitoring_details ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT T1.student_id, T2.behaviour_monitoring_details, COUNT(T2.behaviour_monitoring_details) FROM behaviour_monitoring AS T1 INNER JOIN behaviour_monitoring_details AS T2 ON T1.student_id = T2.student_id GROUP BY T2.behaviour_monitoring_details ORDER BY COUNT(T2.behaviour_monitoring_details) DESC LIMIT 1
SELECT s.student_id, b.biographical_data, e.event_date FROM students s JOIN events e ON s.student_id = e.student_id JOIN events_types et ON e.event_type_id = et.event_type_id WHERE et.name IN ('event', 'event_typedate')
SELECT biographical_data, event_date FROM students WHERE id IN (SELECT student_id FROM events)
SELECT COUNT(*), e_type, description FROM events WHERE id IN ( SELECT id FROM students ) GROUP BY e_type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT e.event_type_code, e.event_type_description, s.student_count FROM events e INNER JOIN students s ON e.event_id = s.event_id GROUP BY e.event_type_code ORDER BY student_count DESC LIMIT 1;
SELECT T1.achievement_detail, T2.type_description FROM achievements AS T1 INNER JOIN types AS T2 ON T1.achievement_id = T2.achievement_id WHERE T2.type_name IN ('INTEGERS', 'FOREIGN KEYS')
SELECT achievement_detail, type_description FROM achievements
SELECT COUNT(DISTINCT t1.teacher_id) FROM teacher AS t1 INNER JOIN student AS t2 ON t1.teacher_id = t2.teacher_id WHERE t2.achievement_type != 'win'
SELECT COUNT(*) FROM teachers JOIN students ON teachers.id = students.teacher_id WHERE students.achievement_type IN ('never won', 'no achievement')
SELECT date, transcript_details FROM transcripts;
SELECT date, detail FROM transcripts;
SELECT achievement_type_code, achievement_details, date FROM achievements
SELECT type_code, details, date FROM achievements;
SELECT detention_start_time, detention_end_time FROM detentions
SELECT start_time, end_time FROM detention
SELECT biographical_info FROM students WHERE details LIKE '%Suite%'
SELECT biographical_info FROM students WHERE details LIKE '%Suite%'
SELECT T1.teacher_id, T2.student_id FROM classes AS T1 INNER JOIN students AS T2 ON T1.class_id = T2.class_id WHERE T1.class_id IN ( SELECT class_id FROM classes WHERE teacher_id IN ( SELECT teacher_id FROM teachers ) );
SELECT T1.teacher_id, T2.student_id, T1.name, T2.name FROM classes AS T3 INNER JOIN teachers AS T1 ON T3.class_id = T1.class_id INNER JOIN students AS T2 ON T3.class_id = T2.class_id
SELECT MAX(t.id) ,  ( SELECT t2.id FROM teacher AS t2 JOIN classes AS t ON t2.id = t.classes_id GROUP BY t2.id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT T1.id, COUNT(T2.course_id) FROM teachers AS T1 INNER JOIN classes AS T2 ON T1.id = T2.teacher_id GROUP BY T1.id ORDER BY COUNT(T2.course_id) DESC LIMIT 1;
SELECT MAX(courses) ,  student_id FROM students JOIN classes ON students.id = classes.student_id GROUP BY student_id
SELECT s.id, COUNT(c.student_id) FROM courses c JOIN students s ON c.student_id = s.id GROUP BY s.id ORDER BY COUNT(c.student_id) DESC LIMIT 1;
SELECT s1.student_id, c1.class_id, c2.class_id FROM students s1 JOIN classes c1 ON s1.student_id = c1.student_id JOIN classes c2 ON s1.student_id = c2.student_id WHERE c1.class_id != c2.class_id AND c1.class_id IN ( SELECT class_id FROM classes GROUP BY class_id HAVING COUNT(student_id) > 1 )
SELECT id, details FROM classes WHERE id IN ( SELECT c_id FROM students JOIN teaches ON students.id = teaches.student_id GROUP BY teaches.class_id HAVING COUNT(teaches.class_id) = 2 )
SELECT detention_type_code, description FROM DETENTION WHERE COUNT(*) = ( SELECT MIN(count) FROM ( SELECT detention_type_id, COUNT(detention_type_id) AS count FROM DETENTION GROUP BY detention_type_id ) );
SELECT det_type_id, type_code FROM detention_types ORDER BY COUNT(*) ASC LIMIT 1;
SELECT * FROM students WHERE student_loan > (SELECT AVG(student_loan) FROM students)
SELECT biographical_data, student_id, loan_amount FROM students WHERE loan_amount > (SELECT AVG(loan_amount) FROM students)
SELECT MIN(date_of_loan) FROM loans
SELECT MIN(date_of_loan) FROM loans
SELECT s.student_id, s.name, s.email, s.phone, s.address, l.loan_amount FROM students s JOIN loans l ON s.student_id = l.student_id WHERE l.loan_amount = ( SELECT MIN(loan_amount) FROM loans );
SELECT biographical_info FROM students WHERE student_loan = ( SELECT MIN(student_loan) FROM students );
SELECT t2.date_of_loan FROM transcripts AS t1 INNER JOIN loans AS t2 ON t1.student_id = t2.student_id WHERE t1.id = (SELECT MAX(id) FROM transcripts);
SELECT t2.transcript_id FROM students AS t1 INNER JOIN transcripts AS t2 ON t1.student_id = t2.student_id ORDER BY t1.loan_amount DESC LIMIT 1;
SELECT T1.teacher_id, T2.name, T2.email, T2.phone FROM transcripts AS T1 INNER JOIN teachers AS T2 ON T1.teacher_id = T2.teacher_id ORDER BY T1.transcript_issue_date ASC LIMIT 1;
SELECT t1.teacher_id, t1.name, t2.student_id, t2.name FROM teachers AS t1 INNER JOIN transcripts AS t2 ON t1.teacher_id = t2.teacher_id ORDER BY t2.issuance_date LIMIT 1;
SELECT T1.student_id, SUM(T2.loan_amount) FROM student AS T1 INNER JOIN loan AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id;
SELECT s.student_id, SUM(l.loan_amount) FROM student s JOIN loan l ON s.student_id = l.student_id GROUP BY s.student_id;
SELECT s.student_id, s.name, s.email, COUNT(c.course_id) FROM students s JOIN courses c ON s.student_id = c.student_id GROUP BY s.student_id;
SELECT s.student_id, s.biographical_data, COUNT(c.course_id) FROM students s JOIN courses c ON s.student_id = c.student_id GROUP BY s.student_id;
SELECT COUNT(DISTINCT student_id) FROM students WHERE detention_id IN (1, 3, 5)
SELECT COUNT(DISTINCT student_id) FROM students WHERE detention_id IN (SELECT id FROM detention);
SELECT address_type FROM addresses GROUP BY address_type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT address_type FROM addresses GROUP BY address_type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.student_id, T2.name, T2.email, T2.phone, T3.address, T4.date_time, T5.vary_char FROM students AS T1 INNER JOIN event_students AS T2 ON T1.student_id = T2.student_id INNER JOIN student_loans AS T3 ON T1.student_id = T3.student_id INNER JOIN event_details AS T4 ON T2.event_id = T4.event_id INNER JOIN student_loans AS T5 ON T1.student_id = T5.student_id WHERE T2.event_id IN (SELECT event_id FROM event_details WHERE date_time > 'other_deadlines' AND vary_char = 255) AND T3.student_loan IS NULL
SELECT T1.biographical_data FROM students AS T1 JOIN events AS T2 ON T1.student_id = T2.student_id WHERE T2.event_type != 'Student Loan' AND T2.event_id IN ( SELECT event_id FROM events WHERE event_name = 'Event Record' )
SELECT start_time, end_time FROM students_addresses WHERE student_id IN ( SELECT student_id FROM transcripts WHERE transcript_id = 2 );
SELECT T1.start_time, T1.end_time FROM transcripts AS T1 JOIN addresses AS T2 ON T1.student_id = T2.student_id WHERE T1.transcript_id IN ( SELECT transcript_id FROM transcripts WHERE student_id IN ( SELECT student_id FROM addresses ) GROUP BY student_id HAVING COUNT(transcript_id) = 2 );
SELECT MIN(detection_id) FROM detention
SELECT detention_start_date FROM detention
SELECT author FROM authors;
SELECT name FROM sqlite_master WHERE type='table' AND name='authors';
SELECT Client, Address FROM Client
SELECT name, address FROM client
SELECT title, ISBN, sale_price FROM books
SELECT title, ISBN, sale_price FROM books
SELECT COUNT(*) FROM books;
SELECT COUNT(*) FROM BOOKS;
SELECT COUNT(*) FROM authors;
SELECT COUNT(*) FROM authors;
SELECT COUNT(*) FROM clients;
SELECT COUNT(*) FROM client
SELECT name, address FROM client ORDER BY name;
SELECT name, address FROM client ORDER BY name;
SELECT T1.title, T2.author FROM CREATE TABLE AS T1, CREATE TABLE AS T2 JOIN T2 ON T1.id = T2.id WHERE T1.id IN ( SELECT id FROM BOOK );
SELECT T1.title, T2.author FROM CREATE TABLE T1 AS ( SELECT title FROM BOOKS WHERE id IN ( SELECT book_id FROM AUTHORS ) );
SELECT order_id, client_name FROM orders
SELECT orders.id, clients.name FROM orders JOIN clients ON orders.client_id = clients.id
SELECT T1.author, COUNT(*) FROM CREATETABLE AS T1 INNER JOIN BOOK AS T2 ON T1.id = T2.author_id GROUP BY T1.author
SELECT T1.name, COUNT(T2.id) FROM author AS T1 INNER JOIN book AS T2 ON T1.id = T2.author_id GROUP BY T1.name;
SELECT ISBN, COUNT(*) FROM books GROUP BY ISBN;
SELECT ISBN, COUNT(*) FROM books GROUP BY ISBN;
SELECT ISBN, SUM(ORDERED) FROM BOOKS GROUP BY ISBN;
SELECT ISBN, SUM(ORDERED) FROM BOOKS GROUP BY ISBN;
SELECT T1.title FROM books AS T1 INNER JOIN orders AS T2 ON T1.id = T2.book_id GROUP BY T1.id ORDER BY COUNT(T2.order_id) DESC LIMIT 1;
SELECT T1.title FROM books AS T1 INNER JOIN orders AS T2 ON T1.id = T2.book_id GROUP BY T1.title ORDER BY COUNT(T2.order_id) DESC LIMIT 1;
SELECT T1.title, T2.price FROM books AS T1 INNER JOIN orders AS T2 ON T1.id = T2.book_id ORDER BY SUM(T2.quantity) DESC LIMIT 1;
SELECT T1.title, T2.purchase_price FROM books AS T1 INNER JOIN orders AS T2 ON T1.id = T2.book_id GROUP BY T2.book_id ORDER BY SUM(T2.amount) DESC LIMIT 1;
SELECT T1.title FROM books AS T1 INNER JOIN orders AS T2 ON T1.id = T2.book_id
SELECT DISTINCT T1.title FROM books AS T1 INNER JOIN orders AS T2 ON T1.id = T2.book_id
SELECT T1.name FROM client AS T1 INNER JOIN orders AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_id HAVING COUNT(T2.order_id) > 0
SELECT DISTINCT T1.name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.id = T2.client_id
SELECT client_name, COUNT(order_id) FROM orders GROUP BY client_name;
SELECT T1.name, COUNT(T2.order_id) FROM client AS T1 INNER JOIN order_details AS T2 ON T1.client_id = T2.client_id GROUP BY T1.name
SELECT T1.name FROM clients AS T1 INNER JOIN orders AS T2 ON T1.client_id = T2.client_id GROUP BY T1.name ORDER BY COUNT(T2.order_id) DESC LIMIT 1;
SELECT T1.name FROM Client AS T1 INNER JOIN Orders AS T2 ON T1.id = T2.client_id GROUP BY T1.id ORDER BY COUNT(T2.order_id) DESC LIMIT 1;
SELECT T1.client_name, SUM(T2.amount) FROM orders AS T1 INNER JOIN book_orders AS T2 ON T1.id = T2.order_id GROUP BY T1.client_name;
SELECT T1.name, SUM(T2.amount) FROM clients AS T1 INNER JOIN orders AS T2 ON T1.id = T2.client_id GROUP BY T1.name;
SELECT T1.client_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY SUM(T1.book_price * T1.quantity) DESC LIMIT 1;
SELECT T2.name FROM orders AS T1 INNER JOIN clients AS T2 ON T1.client_id = T2.id GROUP BY T1.client_id ORDER BY SUM(T1.total_amount) DESC LIMIT 1;
SELECT T1.title FROM books AS T1 INNER JOIN orders AS T2 ON T1.id = T2.book_id WHERE T2.id IS NULL;
SELECT T1.title FROM books AS T1 INNER JOIN orders AS T2 ON T1.id = T2.book_id WHERE T2.id IS NULL;
SELECT DISTINCT client_name FROM clients WHERE id IN (SELECT id FROM orders)
SELECT name FROM clients WHERE id IN (SELECT client_id FROM orders)
SELECT MIN(sale_price), MAX(sale_price) FROM sales
SELECT MIN sale_price FROM Book; SELECT MAX sale_price FROM Book;
SELECT AVG(price) AS average_purchase_price, AVG(sale_price) AS average_sale_price FROM items;
SELECT AVG(price) FROM books;
SELECT MAX(DIFF) FROM (    SELECT ABS(SalePrice - PurchasePrice) AS DIFF    FROM Items)
SELECT MAX(Difference) FROM ( SELECT SUM(PurchasePrice - SalePrice) AS Difference FROM Items );
SELECT T1.title FROM books AS T1 INNER JOIN prices AS T2 ON T1.id = T2.book_id WHERE T2.defaultpreis > (SELECT AVG(defaultpreis) FROM prices)
SELECT T1.title FROM books AS T1 INNER JOIN ( SELECT AVG(sale_price) FROM books ) AS T2 ON T1.id = T2.id WHERE T1.sale_price > T2.avg_sale_price;
SELECT T1.title FROM books AS T1 INNER JOIN prices AS T2 ON T1.id = T2.book_id ORDER BY T2.price ASC LIMIT 1;
SELECT T1.title FROM books AS T1 INNER JOIN ( SELECT MIN(sale_price) FROM books ) AS T2 ON T1.sale_price = T2.MIN(sale_price)
SELECT T1.title FROM books AS T1 INNER JOIN purchase_returns AS T2 ON T1.id = T2.book_id ORDER BY T2.price DESC LIMIT 1;
SELECT T1.title FROM books AS T1 INNER JOIN purchase AS T2 ON T1.id = T2.book_id ORDER BY T2.price DESC LIMIT 1;
SELECT AVG(SalePrice) FROM Books WHERE Author = 'George Orwell'
SELECT AVG(SalePrice) FROM Books WHERE Author = 'George Orwell'
SELECT sale_price FROM books WHERE author = 'Plato';
SELECT T1.sale_price FROM CREATE_TABLE AS T1 INNER JOIN AUTHOR AS T2 ON T1.author_id = T2.id WHERE T2.name = 'Plato'
SELECT T1.title FROM books AS T1 INNER JOIN authors AS T2 ON T1.author_id = T2.id WHERE T1.price = ( SELECT MIN(price) FROM books );
SELECT T1.title FROM books AS T1 INNER JOIN authors AS T2 ON T1.author_id = T2.id WHERE T1.saleprice = ( SELECT MIN(T3.saleprice) FROM books AS T3 INNER JOIN authors AS T4 ON T3.author_id = T4.id WHERE T4.name = 'George Orwell' )
SELECT T1.title FROM CREATERATE TABLE (AUTHOR, NUMBER, PRICE, KEY, n VARCHAR(2), name VARCHAR(255)) AS T1 INNER JOIN BOOK ON T1.AUTHOR = T1.KEY INNER JOIN NUMBER ON T1.NUMBER = T1.KEY INNER JOIN PRICE ON T1.PRICE = T1.KEY WHERE T1.price < (SELECT AVG(price) FROM PRICE)
SELECT T1.title FROM books AS T1 INNER JOIN authors AS T2 ON T1.author_id = T2.id WHERE T1.price < (SELECT AVG(price) FROM books)
SELECT T1.author FROM CREATURE AS T1 INNER JOIN BOOK AS T2 ON T1.id = T2.id WHERE T2.title = 'Pride and Prejudice' AND T2.genre = 'Romance';
SELECT T1.author FROM CREATE TABLE AS T1;
SELECT T1.title FROM books AS T1 INNER JOIN authors AS T2 ON T1.author_id = T2.id WHERE T2.name LIKE '%Plato%'
SELECT T1.title FROM books AS T1 INNER JOIN authors AS T2 ON T1.author_id = T2.id WHERE T2.name LIKE '%Plato%'
SELECT COUNT(*) FROM orders WHERE book_id IN (6, 2) AND title = 'Pride and Prejudice';
SELECT COUNT(*) FROM orders WHERE customer_id IN (SELECT id FROM customers WHERE name = 'Pride and Prejudice')
SELECT id FROM orders WHERE book_id IN (6, 2)
SELECT order_id FROM orders WHERE book_id IN (SELECT book_id FROM books WHERE title = 'Pride and Prejudice' AND author_id IN (SELECT author_id FROM authors WHERE name = 'Jane Austen') OR title = 'The Little Prince' AND author_id IN (SELECT author_id FROM authors WHERE name = 'Antoine de Saint-Exupéry'))
SELECT ISBN FROM books WHERE order_id IN (SELECT order_id FROM orders WHERE client = 'Peter Doe' AND customer_id = 1) INTERSECT SELECT ISBN FROM books WHERE order_id IN (SELECT order_id FROM orders WHERE client = 'James Smith' AND customer_id = 2)
SELECT ISBN FROM books WHERE client_id IN (SELECT id_client FROM orders WHERE name = 'Peter Doe' OR name = 'James Smith')
SELECT T1.title FROM books AS T1 INNER JOIN orders AS T2 ON T1.book_id = T2.book_id WHERE T2.client_id IN ( SELECT client_id FROM clients WHERE name = 'Peter Doe' ) AND T2.client_id NOT IN ( SELECT client_id FROM clients WHERE name = 'James Smith' );
SELECT T1.title FROM books AS T1 INNER JOIN orders AS T2 ON T1.book_id = T2.book_id WHERE T2.client_name = 'Peter Doe' EXCEPT SELECT T1.title FROM books AS T1 INNER JOIN orders AS T2 ON T1.book_id = T2.book_id WHERE T2.client_name = 'James Smith'
SELECT DISTINCT T1.client_name FROM orders AS T1 INNER JOIN clients AS T2 ON T1.client_id = T2.id WHERE T1.order_name = 'Pride and Prejudice';
SELECT T2.name FROM orders AS T1 INNER JOIN clients AS T2 ON T1.client_id = T2.id WHERE T1.product_name = 'Pride and Prejudice';
SELECT COUNT(*) FROM books;
SELECT title FROM books ORDER BY title ASC;
SELECT title FROM books ORDER BY pages DESC;
SELECT type, release_date FROM books;
SELECT MAX(chapters) ,  MIN(chapters) FROM books
SELECT title FROM books WHERE genre != 'Poet';
SELECT AVG(rating) FROM Review
SELECT T1.title, T2.rating FROM books AS T1 INNER JOIN book_id AS T2 ON T1.id = T2.book_id;
SELECT MAX(rating) FROM Book WHERE chapters = ( SELECT MAX(chapters) FROM Book );
SELECT MIN pages FROM books WHERE id IN (SELECT id FROM book_ids)
SELECT T1.title FROM books AS T1 INNER JOIN reviews AS T2 ON T1.id = T2.book_id ORDER BY T2.rank DESC LIMIT 1;
SELECT AVG(r) FROM book WHERE type IN ('Novel')
SELECT type, COUNT(*) FROM books GROUP BY type;
SELECT type FROM books GROUP BY type ORDER BY COUNT(type) DESC LIMIT 1;
SELECT DISTINCT T1.type FROM book AS T1 INNER JOIN book AS T2 ON T1.id = T2.id INNER JOIN book AS T3 ON T1.id = T3.id WHERE T1.id IN ( SELECT id FROM book GROUP BY id HAVING COUNT(id) >= 3 );
SELECT T1.title FROM books AS T1 INNER JOIN reviews AS T2 ON T1.id = T2.book_id ORDER BY T2.rating ASC;
SELECT T1.title, T2.audio_length FROM books AS T1 INNER JOIN readers AS T2 ON T1.id = T2.book_id GROUP BY T1.id ORDER BY COUNT(T2.reader_id) DESC;
SELECT COUNT(*) FROM books WHERE id NOT IN (SELECT book_id FROM reviews)
SELECT book_type FROM books WHERE chapters > 75 INTERSECT SELECT book_type FROM books WHERE chapters < 50;
SELECT COUNT(DISTINCT type) FROM books;
SELECT type, title FROM books WHERE rating IS NULL;
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM customer;
SELECT name FROM customer WHERE level IN ('Member', 'Premium Member', 'VIP') ORDER BY level ASC;
SELECT name FROM customer WHERE level IN ('Member', 'Premium Member') ORDER BY level ASC;
SELECT nationality, card_credit FROM customer
SELECT nationality, card_credit FROM customers
SELECT name FROM customer WHERE nationality IN ('England', 'Australia')
SELECT name FROM customer WHERE nationality IN ('England', 'Australia')
SELECT AVG(card_credit) FROM customer WHERE membership_level > 1;
SELECT AVG(CARD_CREDIT) FROM CUSTOMER WHERE MEMBERSHIP_LEVEL > 1;
SELECT card_credit FROM customer WHERE membership_level = ( SELECT MAX(membership_level) FROM customer );
SELECT c.customer_id, c.card_credit FROM customer AS c INNER JOIN membership AS m ON c.customer_id = m.customer_id WHERE m.membership_level = ( SELECT MAX(membership_level) FROM membership );
SELECT nationality, COUNT(*) FROM customer GROUP BY nationality;
SELECT nationality, COUNT(*) FROM customers GROUP BY nationality;
SELECT nationality FROM customers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nationality FROM customers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.id = T2.customer_id WHERE T2.card_credit < 50 AND T2.card_credit > 75;
SELECT T1.nation FROM customer AS T1 INNER JOIN card_credit AS T2 ON T1.customer_id = T2.customer_id WHERE T2.credit > 50 AND T2.credit < 75
SELECT T1.name, T2.dish_name FROM customer AS T1 INNER JOIN order_details AS T2 ON T1.customer_id = T2.customer_id
SELECT T1.customer_name, T2.dish_name FROM customer AS T1 INNER JOIN order_details AS T2 ON T1.customer_id = T2.customer_id
SELECT C.name, D.name FROM Customer C JOIN OrderDetails OD ON C.customer_id = OD.customer_id JOIN Dish D ON OD.dish_id = D.dish_id ORDER BY OD.quantity DESC
SELECT C.customer_name, D.dish_name FROM orders o JOIN customer_order c_o ON o.order_id = c_o.order_id JOIN customer c ON c_o.customer_id = c.customer_id JOIN dish d ON c_o.dish_id = d.dish_id GROUP BY o.order_id ORDER BY SUM(c_o.quantity) DESC
SELECT c.customer_name, SUM(o.quantity) FROM customer c JOIN order_item oi ON c.customer_id = oi.customer_id JOIN order o ON oi.order_id = o.order_id GROUP BY c.customer_name;
SELECT c.customer_name, SUM(o.quantity) FROM customer c JOIN order_item oi ON c.customer_id = oi.customer_id JOIN order o ON oi.order_id = o.order_id GROUP BY c.customer_name
SELECT c.customer_id, COUNT(o.order_id) AS total_quantity FROM customer c JOIN order_item oi ON c.customer_id = oi.customer_id JOIN order o ON oi.order_id = o.order_id GROUP BY c.customer_id HAVING COUNT(o.order_id) > 1;
SELECT T1.customer_name FROM customer AS T1 INNER JOIN orderder AS T2 ON T1.customer_id = T2.customer_id WHERE T2.total_order_quantity > 1
SELECT DISTINCT T2.manager FROM branches AS T1 INNER JOIN branch_managers AS T2 ON T1.id = T2.branch_id
SELECT DISTINCT T2.name FROM branches AS T1 INNER JOIN branch_managers AS T2 ON T1.id = T2.branch_id
SELECT DISTINCT c.customer_id FROM customer AS c LEFT JOIN order_details AS od ON c.customer_id = od.customer_id_id WHERE od.customer_id IS NULL;
SELECT DISTINCT c.customer_name FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE o.customer_id IS NULL;
SELECT COUNT(*) FROM members;
SELECT name FROM members ORDER BY age ASC;
SELECT name, nationality FROM members;
SELECT name FROM member WHERE nationality != 'England';
SELECT name FROM age WHERE age = 19 OR age = 20;
SELECT name FROM members WHERE age = ( SELECT MIN(age) FROM members );
SELECT nationality, COUNT(*) FROM members GROUP BY nationality;
SELECT nationality FROM members GROUP BY nationality ORDER BY COUNT(nationality) DESC LIMIT 1;
SELECT nation FROM member GROUP BY nation HAVING COUNT(nation_id) >= 2;
SELECT T1.name, T2.name FROM club AS T1 INNER JOIN club_leader AS T2 ON T1.id = T2.club_id
SELECT T1.name FROM club AS T1 INNER JOIN leader AS T2 ON T1.id = T2.club_id WHERE T2.overall_ranking > 100;
SELECT T1.name FROM club AS T1 INNER JOIN member AS T2 ON T1.id = T2.club_id WHERE T2.join_date < '2018-01-01'
SELECT leader FROM club WHERE name = 'Houston';
SELECT name FROM members WHERE id NOT IN (SELECT club_id FROM leaders)
SELECT nation FROM member WHERE age > 22 INTERSECT SELECT nation FROM member WHERE age < 19;
SELECT AVG(T1.age) FROM club AS T1 INNER JOIN leader AS T2 ON T1.id = T2.club_id
SELECT club_name FROM clubs WHERE club_name LIKE '%state%'
SELECT name FROM collections WHERE id IN ( SELECT parent_id FROM subsets );
SELECT name FROM collection_subsets;
SELECT detail FROM collection_subset WHERE name = 'Top collection';
SELECT * FROM collection_subset WHERE name = 'Top collection';
SELECT subset_name FROM documents WHERE document_id IN (SELECT document_id FROM subsets)
SELECT document_subset_name FROM document_subsets;
SELECT detail FROM document_subsets WHERE name = 'Best for 2000';
SELECT document_subsets.id, document_subsets.name, document_subsets.description, document_subsets.varchar_id FROM document_subsets WHERE name = 'Best for 2000';
SELECT document_id FROM documents;
SELECT objcet_id FROM document_objects;
SELECT parent_document_id FROM documents WHERE document_id IN (SELECT owned_by FROM documents WHERE document_id = 'document_obejct_id')
SELECT document_object_id FROM documents WHERE owner = 'Marlin';
SELECT owner FROM documents WHERE description = 'Braeden Collection';
SELECT T2.owner FROM document AS T1 INNER JOIN document_owner AS T2 ON T1.id = T2.document_id WHERE T1.name = 'Braeden Collection';
SELECT T2.owner FROM document AS T1 INNER JOIN parent_document AS T2 ON T1.id = T2.document_id WHERE T1.name = 'Marlin';
SELECT T2.owner FROM documents AS T1 INNER JOIN parent_document AS T2 ON T1.id = T2.id WHERE T1.owner = 'Marlin'
SELECT DISTINCT description FROM document
SELECT DISTINCT description FROM documents WHERE type IN ('parent_document', 'object_id')
SELECT COUNT(DISTINCT document_id) FROM documents WHERE owner = 'Marlin';
SELECT COUNT(DISTINCT document_id) FROM documents WHERE owner = 'Marlin';
SELECT document_id FROM documents WHERE parent_id IS NULL;
SELECT id FROM documents WHERE parent_id IS NULL;
SELECT T2.parent_id, COUNT(T1.id) FROM documents AS T1 INNER JOIN parent_document AS T2 ON T1.id = T2.document_id GROUP BY T2.parent_id;
SELECT COUNT(id), id FROM documents WHERE type = 'object' GROUP BY id;
SELECT name FROM sqlite_master WHERE type='table';
SELECT name FROM sqlite_master WHERE type='table';
SELECT description FROM collections WHERE name = 'Best';
SELECT description FROM collections WHERE name = 'Best';
SELECT parent_collection FROM collections WHERE id = 'NICE'
SELECT name FROM collections WHERE id IN (SELECT parent_id FROM collections WHERE name = 'Nice')
SELECT name FROM collections WHERE parent_id IS NULL;
SELECT name FROM sqlite_master WHERE type='table' AND name NOT IN (parent_collection_id, parent_collection_name)
SELECT document_id FROM documents WHERE parent_id IN (SELECT id FROM children) GROUP BY parent_id HAVING COUNT(id) > 1
SELECT document_id FROM documents WHERE id IN ( SELECT parent_id FROM children );
SELECT COUNT(DISTINCT collection_id) FROM collections WHERE name = 'Best';
SELECT COUNT(DISTINCT collection_id) FROM collections WHERE name = 'Best';
SELECT document_id FROM document WHERE owner_id IN (SELECT id FROM owner WHERE name = 'Ransom')
SELECT document_id FROM document WHERE owner_id IN (SELECT id FROM document_owner WHERE user_id = 'Ransom')
SELECT subset_id, name, COUNT(*) FROM collection_subset GROUP BY subset_id;
SELECT subset_id, name, COUNT(*) FROM collections WHERE id IN (SELECT id FROM subsets) GROUP BY subset_id;
SELECT document_id, COUNT(*) FROM documents WHERE id IN ( SELECT parent_id FROM objs ) GROUP BY document_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM document_objects WHERE parent_id IS NOT NULL;
SELECT document_id, COUNT(*) FROM document_subsets GROUP BY document_id ORDER BY COUNT(*) LIMIT 1;
SELECT document_object_id FROM document_subsets ORDER BY COUNT(document_object_id) LIMIT 1;
SELECT document_id, COUNT(document_id) FROM documents WHERE document_id IN ( SELECT document_id FROM documents GROUP BY document_id HAVING COUNT(document_id) BETWEEN 2 AND 4 )
SELECT document_id FROM document WHERE (document_id IN ( SELECT related_document_id FROM document_relationship WHERE num_related_documents BETWEEN 2 AND 4 ) OR document_id IN ( SELECT related_document_id FROM document_relationship WHERE num_related_documents = 0 )) AND document_id NOT IN ( SELECT related_document_id FROM document_relationship WHERE num_related_documents > 4 );
SELECT DISTINCT T2.owner FROM documents AS T1 INNER JOIN owner_jec_tids AS T2 ON T1.id = T2.document_id WHERE T1.id IN ( SELECT document_id FROM documents WHERE id IN ( SELECT document_id FROM documents WHERE owner_id = 12345 ) );
SELECT DISTINCT T2.owner FROM documents AS T1 INNER JOIN owners AS T2 ON T1.id = T2.document_id WHERE T1.owner_id IN ( SELECT owner_id FROM documents WHERE owner_id IN ( SELECT owner_id FROM documents ) );
SELECT DISTINCT subset_name FROM document WHERE owner = 'Braeden';
SELECT DISTINCT subset_name FROM document WHERE owner = 'Braeden'
SELECT DISTINCT subset_id, name, COUNT(DISTINCT document_id) FROM subsets GROUP BY subset_id;
SELECT DISTINCT subset_id, name, COUNT(DISTINCT document_id) FROM subsets GROUP BY subset_id;
SELECT subset_id, name, COUNT(*) FROM document_subset GROUP BY subset_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.id, T1.name, COUNT(*) FROM document_subset AS T1 INNER JOIN document_subset_integrener AS T2 ON T1.id = T2.id WHERE T2.integrener NOT IN ('NUL', 'NOT') GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1
SELECT document_id FROM document_subset WHERE name = 'Best for 2000';
SELECT document_id FROM document_subset WHERE name = 'Best for 2000';
SELECT T1.name, T2.id FROM document_subset AS T1 INNER JOIN document AS T2 ON T1.id = T2.id WHERE T1.subset IN ('MEMBERS', 'FOREIGN')
SELECT T1.id, T2.name FROM document AS T1 INNER JOIN document_subset AS T2 ON T1.id = T2.document_id WHERE T2.subset IN ('INTEGRE', 'NOT', 'NULL')
SELECT T2.collection_name FROM documents AS T1 INNER JOIN collections AS T2 ON T1.collection_id = T2.id WHERE T1.document_id = 'Ransom ';
SELECT collection_name FROM documents WHERE owner = 'Ransom';
SELECT COUNT(DISTINCT documents_collection_id) ,  documents_id FROM documents GROUP BY documents_collection_id
SELECT COUNT(DISTINCT collection_id) FROM documents;
SELECT COUNT(*) FROM collections WHERE name = 'Best';
SELECT COUNT(DISTINCT collection_id) FROM documents WHERE name = 'Best';
SELECT document_id FROM collections WHERE name = 'Best'
SELECT COUNT(DISTINCT document_object_id) FROM collections WHERE name = 'Best';
SELECT collection_id, name, COUNT(*) FROM collections GROUP BY collection_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.name, T2.id, COUNT(T2.id) FROM collections AS T1 INNER JOIN documents AS T2 ON T1.id = T2.collection_id GROUP BY T2.collection_id ORDER BY COUNT(T2.id) DESC LIMIT 1;
SELECT id FROM documents WHERE collection = 'Best' AND document_subset = '2000';
SELECT DISTINCT document_id FROM documents WHERE subset = 'Best for 2000' INTERSECT SELECT DISTINCT document_id FROM collections WHERE name = 'Best';
SELECT id FROM collections WHERE name = 'Best' AND id NOT IN (SELECT id FROM documents WHERE subset = 'Best for 2000')
SELECT DISTINCT document_object_id FROM collections WHERE name = 'Best' EXCEPT SELECT DISTINCT document_object_id FROM subsets WHERE name = 'Best for 2000';
SELECT id FROM documents WHERE document_subset = 'Best for 2000' OR collection_id IN ('collection_ID', 'collection_ID')
SELECT DISTINCT document_id FROM documents WHERE collection_name = 'Best' OR collection_name = 'Best for 2000';
SELECT name FROM collections WHERE id IN (SELECT id FROM collections WHERE name = 'Best')
SELECT name FROM collections WHERE id IN (SELECT id FROM collections WHERE name = 'Best') AND type != 'NUL' AND type != 'FOREIGN KEY';
SELECT COUNT(*) FROM collections WHERE ID IN (SELECT ID FROM collections WHERE name = 'Best')
SELECT COUNT(DISTINCT T1.collection_id) FROM collection AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.id WHERE T2.name = 'Best';
SELECT collection_subset_name FROM collections WHERE collection_name = 'Best';
SELECT collection_name FROM collections WHERE id IN (SELECT subset_id FROM subsets WHERE collection_id = 'Best')
SELECT COUNT(*) FROM songs WHERE name LIKE '%Love%'
SELECT name FROM songs ORDER BY name ASC;
SELECT name, language FROM songs;
SELECT MAX(voice_sound_quality_score) ,  MIN(voice_sound_quality_score) FROM performances
SELECT v.sounds_quality_score, r.rhythm_tempo_score, s.stage_presence_score FROM performances p JOIN recordings r ON p.id = r.performance_id JOIN songs s ON r.song_id = s.id WHERE p.participant_id = 'Freeway'
SELECT id, language, original_artist FROM songs WHERE name != 'Love'
SELECT T1.name, T2.original_artist FROM songs AS T1 INNER JOIN translations AS T2 ON T1.id = T2.song_id WHERE T2.translation = 'All the streets of love';
SELECT DISTINCT stage_presence_score FROM songs WHERE language = 'English'
SELECT p.participant_id, p.name FROM performances AS p JOIN songs AS s ON p.songs_id = s.id GROUP BY p.participant_id HAVING COUNT(p.songs_id) >= 2;
SELECT p.participant_id, p.name, s.popularity FROM participants p JOIN songs s ON p.participant_id = s.participant_id GROUP BY p.participant_id ORDER BY SUM(s.popularity) DESC;
SELECT id, name FROM participants WHERE score IN (5, 10) AND sound_quality = 'good' OR rhythm_tempo = 'fast';
SELECT voice_sound_quality_score FROM songs WHERE song_name = 'The Balkan Girls' AND language = 'English';
SELECT T1.id, T2.name FROM songs AS T1 INNER JOIN participants AS T2 ON T1.id = T2.song_id GROUP BY T2.song_id ORDER BY COUNT(T2.participant_id) DESC LIMIT 1;
SELECT COUNT(*) FROM performances WHERE stage_presence_score < 7 OR stage_presence_score > 9;
SELECT COUNT(*) FROM songs WHERE id NOT IN ( SELECT id FROM performances );
SELECT AVG(rhythm_score) FROM songs WHERE language IN ('C', 'R', 'E', 'A', 'T', 'B', 'L')
SELECT DISTINCT T1.name FROM participants AS T1 INNER JOIN songs AS T2 ON T1.id = T2.participant_id WHERE T2.language = 'English';
SELECT T1.name, COUNT(T2.id) FROM participants AS T1 INNER JOIN songs AS T2 ON T1.id = T2.participant_id WHERE T2.language = 'Croatian' AND T2.id IN ( SELECT T3.id FROM songs AS T3 INNER JOIN songs AS T4 ON T3.id = T4.id WHERE T4.language = 'English' )
SELECT song_name FROM songs WHERE song_name LIKE '%Is%'
SELECT T1.artist FROM songs AS T1 INNER JOIN artists AS T2 ON T1.id = T2.id WHERE T1.rhythm_tempo > 5 ORDER BY T2.voice_sound_quality DESC;
SELECT COUNT(*) FROM city;
SELECT COUNT(*) FROM city;
SELECT DISTINCT state FROM states;
SELECT DISTINCT state FROM category
SELECT COUNT(DISTINCT country) FROM countries;
SELECT COUNT(*) FROM COUNTRY
SELECT name, code, state, country FROM city
SELECT name, code, state, country FROM city
SELECT latitude, longitude FROM cities WHERE name = 'Baltimore';
SELECT latitude, longitude FROM cities WHERE name = 'Baltimore';
SELECT T1.name FROM city AS T1 INNER JOIN state AS T2 ON T1.state_id = T2.id WHERE T2.name = 'PA';
SELECT city FROM cities WHERE state = 'PA';
SELECT COUNT(*) FROM city WHERE country='Canada';
SELECT COUNT(T2.city) FROM COUNTRY AS T1 INNER JOIN CITY AS T2 ON T1.id = T2.country_id WHERE T1.name = 'Canada';
SELECT T1.name FROM city AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.name = 'USA' ORDER BY latitude;
SELECT city FROM city WHERE country = 'USA' ORDER BY latitude;
SELECT T1.name, COUNT(T2.state_id) FROM states AS T1 INNER JOIN cities AS T2 ON T1.id = T2.state_id GROUP BY T1.name;
SELECT COUNT(*) , T1.state FROM city AS T1 INNER JOIN state AS T2 ON T1.state_id = T2.id GROUP BY T2.id;
SELECT T1.name, COUNT(T2.city_id) FROM countries AS T1 INNER JOIN cities AS T2 ON T1.id = T2.country_id GROUP BY T1.name;
SELECT COUNT(*) , T FROM city GROUP BY T
SELECT state FROM cities GROUP BY state HAVING COUNT(city) >= 2;
SELECT state FROM cities GROUP BY state HAVING COUNT(city) >= 2;
SELECT state FROM cities GROUP BY state ORDER BY COUNT(city) DESC LIMIT 1;
SELECT state FROM city GROUP BY state ORDER BY COUNT(state) DESC LIMIT 1;
SELECT country FROM city GROUP BY country ORDER BY COUNT(city_id) LIMIT 1;
SELECT country FROM cities GROUP BY country ORDER BY COUNT(city) LIMIT 1;
SELECT first_name, last_name FROM students WHERE state = 'MD'
SELECT full_name FROM students WHERE city = 'MD'
SELECT COUNT(*) FROM Student WHERE country='China'
SELECT COUNT(*) FROM Student WHERE Country = 'China'
SELECT T1.first_name, T2.major FROM students AS T1 INNER JOIN city ON T1.city_id = T2.city_id WHERE T2.name = 'Baltimore'
SELECT T1.first_name, T2.major FROM students AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T2.name = 'Baltimore'
SELECT COUNT(*) , c FROM student GROUP BY c
SELECT COUNT(*) , c FROM student GROUP BY c
SELECT COUNT(*) ,  c FROM students GROUP BY c
SELECT city, COUNT(*) FROM student GROUP BY city;
SELECT state FROM students GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT state FROM students ORDER BY student_count DESC LIMIT 1;
SELECT country FROM students ORDER BY student_count ASC LIMIT 1;
SELECT country FROM students ORDER BY student_count ASC LIMIT 1;
SELECT T1.city FROM TABLE2 AS T1 INNER JOIN TABLE3 AS T2 ON T1.id = T2.student_id GROUP BY T1.city HAVING COUNT(T1.id) >= 3;
SELECT city FROM student WHERE student_id IN ( SELECT student_id FROM city WHERE city_id IN ( SELECT city_id FROM student WHERE student_count >= 3 ) );
SELECT state FROM student WHERE student IN ( SELECT student FROM city WHERE city IN ( SELECT city FROM student WHERE student > 5 ) );
SELECT state FROM students WHERE student_count > 5;
SELECT id FROM students WHERE country != 'USA'
SELECT student_id FROM students WHERE country != 'USA'
SELECT T1.id FROM students AS T1 INNER JOIN gender AS T2 ON T1.sex = T2.sex WHERE T2.name = 'F' AND T1.state = 'PA';
SELECT student_id FROM students WHERE gender = 'F' AND state = 'PA';
SELECT T1.id FROM students AS T1 INNER JOIN citizenship AS T2 ON T1.id = T2.student_id WHERE T2.country != 'USA' AND T2.integrate_grade = 3;
SELECT T1.id FROM students AS T1 INNER JOIN citizenship AS T2 ON T1.id = T2.student_id WHERE T2.country != 'USA' AND T2.integrate_type = 'PRIMARY'
SELECT distance FROM routes WHERE origin_city = 'BAL' AND destination_city = 'CHI';
SELECT distance FROM TAB WHERE city1 = 'BAL' AND city2 = 'CHI';
SELECT distance FROM Citi WHERE city1 = 'Boston' AND city2 = 'Newark';
SELECT T2.distance FROM CITY AS T1 INNER JOIN DISTANCE_TABLE AS T2 ON T1.city = T2.city WHERE T1.name = 'Boston' AND T2.city_name = 'Newark';
SELECT AVG(distance), MIN(distance), MAX(distance) FROM cities;
SELECT AVG(distance), MIN(distance), MAX(distance) FROM cities;
SELECT city1_code FROM distance WHERE city2_code IN ( SELECT city2_code FROM distance ORDER BY distance DESC LIMIT 1 )
SELECT city1_code FROM cities WHERE distance = ( SELECT MAX(distance) FROM cities );
SELECT city1_code FROM distance WHERE city1_distance > (SELECT AVG(city1_distance) FROM distance) INTERSECT SELECT city2_code FROM distance WHERE city2_distance > (SELECT AVG(city2_distance) FROM distance)
SELECT city1_code FROM distance INTO city1_code, city2_code, INTEGEFOREIGNKEY(city1_code), FOREIGNKEY(city2_code) WHERE distance > (SELECT AVG(distance) FROM distance);
SELECT city1_code FROM distance WHERE city2_distance < 1000 UNION SELECT city2_code FROM distance WHERE city1_distance < 1000;
SELECT city1_code FROM distance WHERE city2_distance < 1000;
SELECT SUM(T2.distance) FROM city AS T1 INNER JOIN distance AS T2 ON T1.city = T2.city WHERE T1.city = 'BAL';
SELECT SUM(T2.distance) FROM T1 AS T1 INNER JOIN T2 ON T1.city = T2.city WHERE T1.city != 'BAL'
SELECT AVG(T2.distance) FROM T1 AS T1 INNER JOIN T2 ON T1.city = T2.city WHERE T1.city != 'Boston'
SELECT AVG(T2.distance) FROM T1 AS T1 INNER JOIN T2 ON T1.city = T2.city WHERE T1.city != 'Boston'
SELECT city FROM cities WHERE distance FROM chicago = (SELECT MIN(distance FROM cities))
SELECT city FROM cities WHERE distance > (SELECT MIN(distance) FROM cities WHERE name = 'Chicago')
SELECT city FROM cities WHERE distance_to_boston = ( SELECT MAX(distance_to_boston) FROM cities );
SELECT T2.city FROM TABLE1 AS T1 INNER JOIN TABLE2 AS T2 ON T1.id = T2.id ORDER BY T1.distance DESC LIMIT 1;
SELECT city1_code, SUM(distance) FROM ( SELECT city1_code, distance FROM flights WHERE city2_code IN ( SELECT city1_code FROM flights ) GROUP BY city1_code UNION SELECT city2_code, -distance FROM flights WHERE city2_code IN ( SELECT city1_code FROM flights ) GROUP BY city2_code ) GROUP BY city1_code
SELECT city_code, SUM(distance) FROM route WHERE distance IS NOT NULL GROUP BY city_code;
SELECT T1.city, AVG(T2.distance) FROM city AS T1 INNER JOIN distance AS T2 ON T1.city = T2.city GROUP BY T1.city;
SELECT city_name, AVG(distance) FROM cities GROUP BY city_name;
SELECT AVG(distance) FROM (  SELECT distance   FROM users   WHERE first_name = 'Linda' AND last_name = 'Smith'  UNION ALL  SELECT distance   FROM users   WHERE first_name = 'Tracy' AND last_name = 'Kim')
SELECT sqrt((6371*acos(cos(lat2)*cos(lat1)*cos(diff_lat)) + sin(lat2)*sin(lat1))*6371) FROM city1 AS T1 INNER JOIN city2 AS T2 ON T1.city = T2.city WHERE T1.name = 'Linda Smith' AND T2.name = 'Tracy Kim';
SELECT T1.first_name, T1.last_name FROM students AS T1 INNER JOIN districts AS T2 ON T1.district_id = T2.district_id WHERE T2.foreign_key IN ( SELECT foreign_key FROM districts WHERE name = 'Linda Smith' ) ORDER BY T1.district_id DESC LIMIT 1;
SELECT T1.name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.student_id = T2.student_id ORDER BY ST_Distance_Sphere(T2.lat, T2.lng) DESC LIMIT 1;
SELECT T1.state FROM student AS T1 INNER JOIN address AS T2 ON T1.student_id = T2.student_id WHERE T1.first_name = 'Linda'
SELECT T2.state FROM student AS T1 INNER JOIN student_table AS T2 ON T1.student_id = T2.student_id WHERE T1.first_name = 'Linda'
SELECT * FROM sailors WHERE age > 30;
SELECT * FROM sailors WHERE age > 30;
SELECT name, age FROM sailors WHERE age < 30;
SELECT name, age FROM sailors WHERE age < 30;
SELECT b.id FROM boats AS b JOIN reservations AS r ON b.id = r.bid WHERE r.sailor_id = 1;
SELECT b.id FROM boats AS b JOIN reservations AS r ON b.id = r.bid WHERE r.sailor_id = 1;
SELECT t2.reserved_by FROM boats AS t1 INNER JOIN reservations AS t2 ON t1.id = t2.boat_id WHERE t1.id = 102;
SELECT sailor_name FROM sailors WHERE id IN (SELECT reservation_id FROM reservations WHERE boat_id = 102)
SELECT DISTINCT bid FROM boats WHERE id IN ( SELECT bid FROM reservations );
SELECT b.id FROM boats AS b JOIN reservations AS r ON b.id = r.bid WHERE r.day = 'today'
SELECT name FROM sailors WHERE name LIKE '%e%'
SELECT name FROM sailors WHERE name LIKE '%e%'
SELECT sailor_id FROM sailors WHERE sailor_id NOT IN ( SELECT MIN(sailor_id) FROM sailors );
SELECT DISTINCT id FROM sailors WHERE id NOT IN (SELECT MIN(id) FROM sailors);
SELECT DISTINCT T1.name FROM sailors AS T1 INNER JOIN ratings AS T2 ON T1.id = T2.sailor_id WHERE T1.age > ( SELECT MAX(age) FROM sailors WHERE rating < 7 )
SELECT DISTINCT s.name FROM sailors s JOIN ratings r ON s.id = r.sailor_id WHERE s.age > (SELECT MAX(age) FROM sailors WHERE rating < 7) AND r.rating > 7;
SELECT sailor_id, name FROM sailors WHERE id IN (SELECT bid FROM boats)
SELECT s.name, b.id FROM sailors s JOIN reservations r ON s.id = r.sailor_id JOIN boats b ON r.boarding_key = b.id WHERE r.boarding_key IS NOT NULL;
SELECT s.id, s.name FROM sailors AS s JOIN reservations AS r ON s.id = r.sailor_id GROUP BY s.id HAVING COUNT(r.reservation_id) > 1;
SELECT DISTINCT sailor FROM boats WHERE id IN ( SELECT bid FROM reservations );
SELECT sid FROM BoatReservations WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red' OR color = 'blue')
SELECT sid FROM reservations WHERE boat_id IN (SELECT bid FROM boats WHERE color = 'red' OR color = 'blue')
SELECT T1.name, T2.sid FROM boats AS T1 INNER JOIN reservations AS T2 ON T1.bid = T2.bid WHERE T1.color IN ('red', 'blue')
SELECT sailor_id, name FROM sailors WHERE boat_type IN ('red', 'blue')
SELECT sid FROM BoatReservations WHERE bid IN (SELECT bid FROM Boats WHERE color = 'red') INTERSECT SELECT sid FROM BoatReservations WHERE bid IN (SELECT bid FROM Boats WHERE color = 'blue')
SELECT sailor_id FROM boats WHERE color = 'red' INTERSECT SELECT sailor_id FROM boats WHERE color = 'blue'
SELECT T1.name, T2.sid FROM boats AS T1 INNER JOIN reservations AS T2 ON T1.bid = T2.bid WHERE T1.color IN ('red', 'blue')
SELECT sailor_id, name FROM boats WHERE color = 'red' OR color = 'blue';
SELECT s.id FROM sailors WHERE id NOT IN ( SELECT bid FROM boats )
SELECT id FROM sailors WHERE id NOT IN (SELECT bid FROM boats)
SELECT sailor_id, name FROM sailors WHERE id NOT IN (SELECT bid FROM boats)
SELECT sailors.name, sailors.id FROM sailors WHERE sailors.id NOT IN (SELECT bid FROM boatreservations)
SELECT s.id FROM sailors WHERE s.id NOT IN ( SELECT b.sailor_id FROM boats )
SELECT id FROM sailors WHERE id NOT IN (SELECT sailor_id FROM boat_reservations)
SELECT sailor_name FROM sailors WHERE id IN (SELECT bid FROM boats WHERE id = 103)
SELECT sailor_name FROM sailors WHERE id IN (SELECT bid FROM boats WHERE id = 103)
SELECT name FROM sailors WHERE rating > (SELECT rating FROM sailors WHERE name = 'Luis')
SELECT T1.name FROM sailors AS T1 INNER JOIN ratings AS T2 ON T1.id = T2.sailor_id WHERE T2.rating > ( SELECT MAX(rating) FROM ratings WHERE sailor_id IN ( SELECT id FROM sailors WHERE name = 'Luis' ) );
SELECT name FROM sailors WHERE rating > (SELECT rating FROM sailors WHERE name = 'Luis')
SELECT name FROM sailors WHERE rating > (SELECT MIN(rating) FROM sailors WHERE name = 'Luis')
SELECT sailor_id, name FROM sailors WHERE rating > 2 AND reserved_boat = 1;
SELECT sailors.name, sailors.id FROM sailors JOIN bookings ON sailors.id = bookings.sailor_id WHERE bookings.rating >= 3 AND bookings.type = 'boat'
SELECT name, age FROM sailors WHERE age = ( SELECT MAX(age) FROM sailors );
SELECT name, age FROM sailors WHERE age = ( SELECT MAX(age) FROM sailors );
SELECT COUNT(sailors) FROM sailors;
SELECT COUNT(*) FROM sailors;
SELECT AVG(T1.age) FROM sailors AS T1 INNER JOIN ratings AS T2 ON T1.id = T2.sailor_id WHERE T2.rating = 7;
SELECT AVG(T1.age) FROM sailors AS T1 INNER JOIN ratings AS T2 ON T1.id = T2.sailor_id WHERE T2.rating = 7;
SELECT COUNT(*) FROM sailors WHERE name LIKE 'D%'
SELECT COUNT(*) FROM sailors WHERE name LIKE 'D%'
SELECT AVG(rating), MAX(age) FROM sailors
SELECT AVG(rating) ,  MAX(age) FROM sailors
SELECT COUNT(bid) FROM reservations
SELECT COUNT(bid) FROM reservations
SELECT COUNT(*) FROM Reservations WHERE boat_id > 50;
SELECT COUNT(*) FROM reservations WHERE boat_id > 50;
SELECT COUNT(bid) FROM reservations WHERE sid IN ( SELECT sid FROM boats GROUP BY sid HAVING COUNT(sid) > 1 );
SELECT COUNT(bid) FROM reservations WHERE bid IN ( SELECT bid FROM reservations GROUP BY bid HAVING COUNT(resid) > 1 );
SELECT COUNT(DISTINCT T1.sailor_id) AS sailor_count , T2.boat_id FROM sailors AS T1 INNER JOIN reservations AS T2 ON T1.sailor_id = T2.sailor_id WHERE T1.sailor_id > 1 GROUP BY T2.boat_id
SELECT COUNT(bid) FROM reservations WHERE sid IN (SELECT id FROM sailors WHERE id > 1);
SELECT T1.rating, AVG(T2.age) FROM Boats AS T1 INNER JOIN Sailors AS T2 ON T1.id = T2.boat_id WHERE T1.color = 'red' GROUP BY T1.rating
SELECT T1.rating, AVG(T2.age) FROM Boats AS T1 INNER JOIN Sailors AS T2 ON T1.id = T2.boat_id WHERE T1.color = 'red' GROUP BY T1.rating;
SELECT name, rating, age FROM sailors ORDER BY rating, age;
SELECT name, rating, age FROM sailors ORDER BY rating, age;
SELECT COUNT(*) FROM boats;
SELECT COUNT(*) FROM boats;
SELECT COUNT(*) FROM boats WHERE color = 'red';
SELECT COUNT(*) FROM boats WHERE color = 'red';
SELECT T1.name FROM boats AS T1 INNER JOIN sailors AS T2 ON T1.bid = T2.bid WHERE T2.age BETWEEN 20 AND 30;
SELECT T1.name FROM boats AS T1 INNER JOIN bookings AS T2 ON T1.id = T2.boat_id INNER JOIN customers AS T3 ON T2.customer_id = T3.id WHERE T3.age BETWEEN 20 AND 30;
SELECT T1.name FROM sailors AS T1 INNER JOIN boats AS T2 ON T1.sailor_id = T2.sailor_id INNER JOIN boat_types AS T3 ON T2.boat_type_id = T3.boat_type_id WHERE T3.name = 'red' AND T1.rating < ( SELECT MAX(T1.rating) FROM sailors AS T1 INNER JOIN boats AS T2 ON T1.sailor_id = T2.sailor_id INNER JOIN boat_types AS T3 ON T2.boat_type_id = T3.boat_type_id WHERE T3.name = 'red' )
SELECT T1.name FROM sailors AS T1 INNER JOIN boats AS T2 ON T1.sailor_id = T2.sailor_id WHERE T2.color != 'red' AND T1.rating < (SELECT MAX(T3.rating) FROM bookings AS T3 INNER JOIN boats AS T4 ON T3.boat_id = T4.boat_id WHERE T4.color = 'red')
SELECT MAX(T1.rating) FROM sailors AS T1 INNER JOIN ratings AS T2 ON T1.id = T2.sailor_id
SELECT MAX(rating) FROM sailors
SELECT T1.name FROM sailors AS T1 INNER JOIN boats AS T2 ON T1.sid = T2.sid WHERE T2.name = 'Melon';
SELECT sailor_name FROM boats WHERE boat_name = 'Melon'
SELECT T1.name, T2.age FROM sailors AS T1 INNER JOIN ratings AS T2 ON T1.id = T2.sailor_id ORDER BY T2.rating DESC;
SELECT T1.name, T2.age FROM sailors AS T1 INNER JOIN ratings AS T2 ON T1.id = T2.sailor_id ORDER BY T2.rating DESC;
SELECT model FROM headphone WHERE price = ( SELECT MAX(price) FROM headphone );
SELECT MAX(price) FROM headphone
SELECT DISTINCT model FROM headphones ORDER BY model;
SELECT DISTINCT model FROM headphone ORDER BY model;
SELECT class FROM headphones GROUP BY class ORDER BY COUNT(*) DESC LIMIT 1;
SELECT class FROM headphones GROUP BY class ORDER BY COUNT(*) DESC LIMIT 1;
SELECT class FROM headphones WHERE COUNT(headphone_id) > 2;
SELECT class FROM headphone WHERE COUNT(*) <= 2;
SELECT COUNT(*) , c FROM headphones WHERE price > 200 GROUP BY c;
SELECT COUNT(*) FROM headphones WHERE price > 200;
SELECT COUNT(DISTINCT earpad) FROM headphone
SELECT COUNT(DISTINCT earpad) FROM headphone
SELECT earpad_id, COUNT(*) FROM earpads GROUP BY earpad_id ORDER BY COUNT(*) DESC LIMIT 2;
SELECT earpad, COUNT(*) FROM headphones GROUP BY earpad ORDER BY COUNT(*) DESC LIMIT 2;
SELECT model, class, construction FROM headphone WHERE price = ( SELECT MIN(price) FROM headphone );
SELECT model, class, construction FROM headphone WHERE price = ( SELECT MIN(price) FROM headphone );
SELECT AVG(price) FROM headphones WHERE construction IN ('ID', 'Modell', 'Classs', 'Earpad')
SELECT AVG(cost) FROM headphones WHERE construction IN ('ID', 'Modular', 'Classical', 'Divematch', 'Construktion', 'Earpad')
SELECT class FROM headphones WHERE earpad = 'Bowls' INTERSECT SELECT class FROM headphones WHERE earpad = 'Comfort Pads';
SELECT class FROM headphone WHERE earpad IN ('Bowls', 'Comfort Pads')
SELECT earpad FROM heaphone WHERE earpad NOT LIKE '%PRIME%'
SELECT earpad FROM materials WHERE name = 'plastic'
SELECT model FROM headphone WHERE price < (SELECT AVG(price) FROM headphone)
SELECT model FROM headphone WHERE price < (SELECT AVG(price) FROM headphone)
SELECT store_name FROM store WHERE open_date = ( SELECT MIN(open_date) FROM store );
SELECT store_name FROM store WHERE open_date IN (SELECT min(open_date) FROM store UNION SELECT max(open_date) FROM store);
SELECT T1.name, T2.parking_info FROM store AS T1 INNER JOIN parking AS T2 ON T1.store_id = T2.store_id WHERE T1.neighborhood IN ('Tarzana', 'North', 'South')
SELECT store_name, parking FROM stores WHERE neighborhood = 'Tarzana';
SELECT COUNT(DISTINCT T2.neighborhood) FROM store AS T1 INNER JOIN neighborhood AS T2 ON T1.store_id = T2.store_id;
SELECT COUNT(DISTINCT neighborhood) FROM store
SELECT COUNT(*) ,  n FROM store GROUP BY n
SELECT COUNT(DISTINCT n.name) FROM store AS s JOIN neighborhood AS n ON s.neighborhood_id = n.id
SELECT s.store_id, COUNT(h.headphones_id) FROM store s JOIN headphones h ON s.store_id = h.store_id GROUP BY s.store_id ORDER BY COUNT(h.headphones_id) DESC LIMIT 1;
SELECT T1.store_name, T2.quantity FROM store AS T1 INNER JOIN stock AS T2 ON T1.store_id = T2.store_id WHERE T2.product_id = (SELECT product_id FROM headphones) AND T2.in_stock = 1;
SELECT T1.name FROM store AS T1 INNER JOIN headphone AS T2 ON T1.store_id = T2.store_id WHERE T2.headphone_id IS NULL
SELECT DISTINCT store_name FROM stores WHERE id IN ( SELECT store_id FROM products WHERE product_id NOT IN ( SELECT product_id FROM headphones ) );
SELECT * FROM headphone WHERE stock = 0;
SELECT * FROM headphone WHERE stock = 'N'
SELECT model FROM store WHERE stock = ( SELECT MAX(stock) FROM store )
SELECT model FROM headphone WHERE stock = ( SELECT MAX(stock) FROM headphone );
SELECT COUNT(*) FROM Store WHERE ID IN (SELECT ID FROM Product WHERE Category = 'Headphones' AND StoreID = 'Woodman')
SELECT SUM(T2.quantity) FROM Store AS T1 INNER JOIN Product AS T2 ON T1.store_id = T2.store_id WHERE T2.product_id IN ( SELECT product_id FROM Product WHERE category = 'Headphones' AND store_id = 1 )
SELECT n.Neighborhood FROM Neighborhoods AS n LEFT JOIN Headphones AS h ON n.ID = h.NeighborhoodID WHERE h.ID IS NULL
SELECT n.Namely FROM Neighborhood AS n JOIN Stock AS s ON n.Id = s.NeighborhoodId WHERE s.ProductName IN ('Headphones', 'Headphones') AND s.Quantity < 1;
SELECT COUNT(DISTINCT author_id) FROM authors;
SELECT COUNT(*) FROM authors;
SELECT COUNT(paper_id) FROM papers;
SELECT COUNT(*) FROM papers;
SELECT COUNT(*) FROM affiliations;
SELECT COUNT(*) FROM affiliations;
SELECT COUNT(*) FROM papers WHERE id IN (SELECT paper_id FROM venues WHERE name = 'NAACL 2000')
SELECT COUNT(*) FROM papers WHERE id IN ( SELECT paper_id FROM NAACL_2000 );
SELECT COUNT(*) FROM papers WHERE publication_year = 2009 AND university = 'Columbia University';
SELECT COUNT(DISTINCT T1.paper_id) FROM CREATORS AS T1 INNER JOIN PAPERS AS T2 ON T1.id = T2.creator_id WHERE T2.year = 2009 AND T1.institution_id = 'Columbia University';
SELECT T1.name, T2.address FROM affiliation AS T1 INNER JOIN address AS T2 ON T1.id = T2.affiliation_id
SELECT name, address FROM affiliation
SELECT v.name, y.year FROM venue v JOIN paper_id ON v.id = paper_id.venue_id JOIN paper p ON paper_id.id = p.id JOIN year y ON p.id = y.paper_id ORDER BY y.year;
SELECT DISTINCT T2.venue FROM papers AS T1 INNER JOIN venue AS T2 ON T1.id = T2.paper_id ORDER BY T2.year;
SELECT T1.title, T2.paper_id FROM papers AS T2 INNER JOIN authors AS T1 ON T2.author_id = T1.id WHERE T1.name = 'Harvard University';
SELECT T1.title, T2.paper_id FROM papers AS T2 INNER JOIN affiliations AS T1 ON T2.affiliation_id = T1.id WHERE T1.name = 'Harvard University';
SELECT T1.title, T2.paper_id FROM papers AS T1 INNER JOIN authors AS T2 ON T1.author_id = T2.author_id WHERE T2.name = 'Mckeown'
SELECT T1.title, T2.paper_id FROM authors AS T1 INNER JOIN papers AS T2 ON T1.author_id = T2.author_id WHERE T1.name = 'Mckeown'
SELECT T1.title FROM papers AS T1 INNER JOIN authors AS T2 ON T1.paper_id = T2.paper_id WHERE T2.university_id IN (1, 2) AND T1.title LIKE '%Stanford%' OR T1.title LIKE '%Columbia%';
SELECT T1.title, T2.paper_id FROM papers AS T1 INNER JOIN affiliations AS T2 ON T1.id = T2.paper_id WHERE T2.university_id IN (1, 2) AND T2.type = 'affiliation';
SELECT T1.title FROM papers AS T1 INNER JOIN authors AS T2 ON T1.paper_id = T2.author_id WHERE T2.first_name = 'Mckeown' AND T2.last_name = 'Kathleen' AND T2.id IN ( SELECT author_id FROM authors WHERE first_name = 'Rambow' AND last_name = 'Owen' )
SELECT T1.title, T2.paper_id FROM authors AS T1 INNER JOIN papers AS T2 ON T1.author_id = T2.author_id WHERE T1.name = 'Mckeown, Kathleen' AND T1.id = (SELECT author_id FROM papers WHERE name = 'Rambow, Owen')
SELECT T1.title, T2.paper_id FROM authors AS T1 INNER JOIN papers AS T2 ON T1.author_id = T2.author_id WHERE T1.name LIKE '%Mckeown%' AND T1.name NOT LIKE '%Rambow%'
SELECT T1.title, T2.paper_id FROM authors AS T1 INNER JOIN papers AS T2 ON T1.author_id = T2.author_id WHERE T1.name = 'Mckeown' AND T1.id NOT IN ( SELECT author_id FROM papers WHERE name = 'Rambow' )
SELECT T1.title, T2.paper_id FROM authors AS T1 INNER JOIN papers AS T2 ON T1.author_id = T2.author_id WHERE T1.name IN ('McKeown', 'Rambow')
SELECT T1.title, T2.paper_id FROM authors AS T1 INNER JOIN papers AS T2 ON T1.author_id = T2.author_id WHERE T1.name IN ('McKeown', 'Rambow')
SELECT author_id, COUNT(*) FROM papers GROUP BY author_id ORDER BY COUNT(*) DESC;
SELECT COUNT(*) ,  a.author_id FROM papers AS p JOIN authors AS a ON p.author_id = a.author_id GROUP BY a.author_id ORDER BY COUNT(*) DESC;
SELECT affiliation_id, COUNT(*) FROM affiliations GROUP BY affiliation_id ORDER BY COUNT(*) ASC;
SELECT affiliation FROM affiliations ORDER BY COUNT(paper_id) DESC;
SELECT author_id FROM authors WHERE id IN ( SELECT paper_id FROM papers GROUP BY author_id HAVING COUNT(*) > 50 )
SELECT author FROM authors WHERE id IN ( SELECT id FROM papers GROUP BY author HAVING COUNT(*) > 50 );
SELECT author FROM authors WHERE id IN ( SELECT id FROM papers GROUP BY author HAVING COUNT(id) = 1 )
SELECT T1.author_id FROM authors AS T1 INNER JOIN papers AS T2 ON T1.id = T2.author_id GROUP BY T1.author_id HAVING COUNT(T2.paper_id) = 1;
SELECT venue, year FROM publications GROUP BY venue ORDER BY COUNT(*) DESC LIMIT 1;
SELECT venue, YEAR FROM publication GROUP BY venue ORDER BY COUNT(*) DESC LIMIT 1;
SELECT venue FROM publications GROUP BY venue ORDER BY COUNT(*) LIMIT 1;
SELECT venue FROM publications GROUP BY venue ORDER BY COUNT(*) LIMIT 1;
SELECT COUNT(*) FROM papers WHERE id IN (SELECT cited_id FROM citations WHERE paper_id IN (SELECT id FROM papers WHERE id BETWEEN 'A00-1002' AND 'A99-1002'))
SELECT COUNT(*) FROM papers WHERE id IN ( SELECT cited_id FROM citations );
SELECT COUNT(T2.id) FROM paper AS T1 INNER JOIN reference_paper AS T2 ON T1.id = T2.paper_id WHERE T1.id = 'D12-1027'
SELECT COUNT T1.id FROM paper AS T1 INNER JOIN reference AS T2 ON T1.id = T2.paper_id WHERE T1.id = 'D12-1027';
SELECT id, COUNT(citation_id) FROM papers GROUP BY id ORDER BY COUNT(citation_id) DESC LIMIT 1;
SELECT id, COUNT(citation_id) FROM papers GROUP BY id ORDER BY COUNT(citation_id) DESC LIMIT 1;
SELECT T1.paper_id FROM Cite AS T1 INNER JOIN Cite AS T2 ON T1.citation_id = T2.citation_id WHERE T1.id > T2.id GROUP BY T1.paper_id ORDER BY COUNT(T1.paper_id) DESC LIMIT 1;
SELECT T1.title FROM papers AS T1 INNER JOIN cites AS T2 ON T1.id = T2.paper_id GROUP BY T1.id ORDER BY COUNT(T2.cited_paper_id) DESC LIMIT 1;
SELECT paper_id, COUNT(citation_id) FROM citation GROUP BY paper_id ORDER LIMIT 10;
SELECT p.id, COUNT(c.cited_paper_id) FROM citation c JOIN paper p ON c.paper_id = p.id GROUP BY p.id ORDER LIMIT 10;
SELECT COUNT(T2.citation_id) FROM authors AS T1 INNER JOIN citations AS T2 ON T1.author_id = T2.author_id WHERE T1.name = 'Mckeown , Kathleen'
SELECT COUNT(*) FROM CREATORS WHERE id IN (SELECT creator_id FROM REFERENCES WHERE name = 'Mckeown, Kathleen')
SELECT COUNT ( DISTINCT T1.id ) FROM Cite AS T1 INNER JOIN Paper AS T2 ON T1.paper_id = T2.id WHERE T1.author_id IN ( SELECT id FROM Author WHERE name = 'Mckeown , Kathleen' );
SELECT COUNT(T1.id) FROM papers AS T1 INNER JOIN authors AS T2 ON T1.author_id = T2.id WHERE T2.name = 'Mckeown, Kathleen'
SELECT T1.name, COUNT(T2.citation_id) FROM authors AS T1 INNER JOIN citations AS T2 ON T1.author_id = T2.author_id GROUP BY T1.name ORDER BY COUNT(T2.citation_id) DESC LIMIT 1;
SELECT T1.author_id, COUNT(T2.citation_id) FROM authors AS T1 INNER JOIN citations AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_id ORDER BY COUNT(T2.citation_id) DESC LIMIT 1;
SELECT T1.venue, T2.year FROM author_id AS T1 INNER JOIN paper_id AS T2 ON T1.id = T2.author_id WHERE T1.name = 'Mckeown , Kathleen'
SELECT T1.venue, T2.year FROM author_id AS T1 INNER JOIN paper_id AS T2 ON T1.id = T2.author_id WHERE T1.name = 'Mckeown , Kathleen'
SELECT T1.venue, T2.year FROM venues AS T1 INNER JOIN papers AS T2 ON T1.id = T2.venue_id WHERE T2.university = 'Columbia University';
SELECT T1.venue, T2.year FROM venues AS T1 INNER JOIN papers AS T2 ON T1.id = T2.venue_id WHERE T2.university = 'Columbia University';
SELECT author FROM papers WHERE year = 2009 GROUP BY author ORDER BY COUNT(*) DESC LIMIT 1;
SELECT author_id FROM papers WHERE year = 2009 GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT affiliation_id, COUNT(*) as num_papers FROM papers WHERE year = 2009 GROUP BY affiliation_id ORDER BY num_papers DESC LIMIT 3;
SELECT affiliation_id, COUNT(*) as num_papers FROM papers WHERE year = 2009 GROUP BY affiliation_id ORDER BY num_papers DESC LIMIT 3;
SELECT COUNT(*) FROM papers WHERE publication_date BETWEEN '2009-01-01' AND '2009-12-31';
SELECT COUNT(*) FROM CRESTA_TABLE WHERE YEAR IN (2009, 2010, 2011)
SELECT COUNT(*) FROM papers WHERE university = 'Stanford University' AND year BETWEEN 2000 AND 2009;
SELECT COUNT(*) FROM papers WHERE university = 'Stanford University' AND year BETWEEN 2000 AND 2009;
SELECT T2.title FROM authors AS T1 INNER JOIN papers AS T2 ON T1.paper_id = T2.id GROUP BY T2.id ORDER BY COUNT(T1.author_id) DESC LIMIT 1;
SELECT T1.title FROM paper AS T1 INNER JOIN author AS T2 ON T1.id = T2.paper_id GROUP BY T1.title ORDER BY COUNT(T2.author_id) DESC LIMIT 1;
SELECT COUNT(T1.id) FROM collaborators AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.id WHERE T2.name = 'Mckeown , Kathleen';
SELECT COUNT(T1.id) FROM collaborators AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.id WHERE T2.name = 'Mckeown , Kathleen'
SELECT au.id FROM authors a JOIN publications p ON a.id = p.auth_id WHERE p.paper_id IN ( SELECT paper_id FROM publications WHERE author_id = 'Mckeown , Kathleen' ) GROUP BY a.id ORDER BY COUNT(p.paper_id) DESC LIMIT 1;
SELECT T1.author_id FROM authors AS T1 INNER JOIN papers AS T2 ON T1.author_id = T2.author_id WHERE T2.mckeown_kathleen = 1 GROUP BY T1.author_id ORDER BY COUNT(T1.author_id) DESC LIMIT 1
SELECT p.id FROM papers AS p JOIN variant AS v ON p.id = v.paper_id WHERE v.title LIKE '%translation%'
SELECT id FROM papers WHERE title LIKE '%translation%'
SELECT p.id, p.title FROM papers WHERE id NOT IN ( SELECT cited_paper_id FROM citations );
SELECT p.id, p.title FROM papers WHERE cited_paper_id IS NULL;
SELECT affiliation FROM affiliation WHERE address LIKE '%China%' AND publication_id IN ( SELECT publication_id FROM publication GROUP BY publication_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT affiliation FROM papers WHERE address LIKE '%China%' GROUP BY affiliation ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT YEAR) FROM PAPER GROUP BY YEAR;
SELECT venue, YEAR, COUNT(paper_id) FROM papers GROUP BY venue, YEAR;
SELECT affiliation, COUNT(*) FROM papers GROUP BY affiliation;
SELECT COUNT(*) FROM affiliation AS T1 INNER JOIN paper AS T2 ON T1.id = T2.affiliation_id GROUP BY T1.id
SELECT title FROM papers WHERE citation > 50;
SELECT title FROM paper WHERE citation > 50;
SELECT COUNT(DISTINCT author_id) FROM authors WHERE id IN ( SELECT author_id FROM papers GROUP BY author_id HAVING COUNT(*) > 50 )
SELECT COUNT(DISTINCT author_id) FROM authors WHERE publications_count < 50;
SELECT T1.name FROM authors AS T1 INNER JOIN papers AS T2 ON T1.id = T2.author_id WHERE T2.year = 2009 AND T2.conference_name IN ('NAACL', 'ACL')
SELECT T1.author_id FROM authors AS T1 INNER JOIN publications AS T2 ON T1.author_id = T2.author_id WHERE T2.name IN ('NAACL', 'ACL') AND T2.year = 2009;
SELECT DISTINCT author_id FROM authors WHERE id NOT IN ( SELECT author_id FROM papers )
SELECT author_id FROM authors WHERE id IN ( SELECT author_id FROM papers WHERE name NOT LIKE '%ACL%' )
SELECT COUNT(*) FROM conferences;
SELECT COUNT(*) FROM conferences;
SELECT DISTINCT conference_name FROM conferences;
SELECT DISTINCT conference_name FROM conferences;
SELECT conference_name, year, location FROM conferences;
SELECT name, year, location FROM conference;
SELECT conference_name, COUNT(*) FROM conferences GROUP BY conference_name;
SELECT COUNT(*) FROM conferences;
SELECT YEAR, COUNT(*) FROM conferences GROUP BY YEAR;
SELECT COUNT(DISTINCT YEAR) FROM conferences;
SELECT YEAR FROM conferences GROUP BY YEAR ORDER BY COUNT(*) LIMIT 1;
SELECT MIN(YEAR) FROM conferences;
SELECT location FROM conferences WHERE id IN ( SELECT id FROM conferences GROUP BY location HAVING COUNT(*) >= 2 );
SELECT location FROM conferences GROUP BY location HAVING COUNT(*) >= 2;
SELECT institution_name, location, founded_year FROM institutions
SELECT name, location, founding_year FROM institution
SELECT COUNT(*) FROM institution WHERE founded BETWEEN '1850' AND '1900';
SELECT COUNT(DISTINCT institution_id) FROM institutions WHERE founded BETWEEN '1850' AND '1900';
SELECT institution_name, location FROM institutions ORDER BY founded_date DESC LIMIT 1;
SELECT institution_name, location FROM institutions ORDER BY id DESC LIMIT 1;
SELECT institution_name, COUNT(staff_id) FROM institutions WHERE founded_after = 1800 GROUP BY institution_name;
SELECT T2.name FROM institution AS T1 INNER JOIN staff AS T2 ON T1.id = T2.institution_id WHERE T1.founded_after = 1800 GROUP BY T1.id
SELECT institution_name FROM institutions WHERE id NOT IN (SELECT staff_id FROM staff)
SELECT institution FROM staff WHERE institution NOT IN (SELECT institution FROM staff)
SELECT staff_name FROM staff WHERE age > (SELECT AVG(age) FROM staff)
SELECT name FROM staff WHERE age > (SELECT AVG(age) FROM staff)
SELECT MAX(age) ,  MIN(age) FROM staff WHERE country='United States'
SELECT MAX(age) ,  MIN(age) FROM staff
SELECT c.name FROM conference AS c JOIN staff AS s ON c.id = s.conference_id WHERE s.country = 'Canada';
SELECT c.name FROM conferences AS c JOIN staff AS s ON c.id = s.conference_id WHERE s.country = 'Canada'
SELECT staff_name FROM conference WHERE staff_id IN ( SELECT speaker_id FROM conference WHERE role = 'speaker' ) AND staff_id IN ( SELECT sponsor_id FROM conference WHERE role = 'sponsor' );
SELECT staff_id FROM conference_staff WHERE staff_id IN (SELECT speaker_id FROM conferences WHERE id = 'C' AND role = 'speaker') INTERSECT SELECT staff_id FROM conference_staff WHERE staff_id IN (SELECT sponsor_id FROM conferences WHERE id = 'C' AND role = 'sponsor')
SELECT T1.name FROM ACL AS T1 INNER JOIN Naccl AS T2 ON T1.id = T2.id
SELECT T1.name FROM conference AS T1 INNER JOIN participant AS T2 ON T1.id = T2.conference_id WHERE T1.name IN ('ACL', 'NACCL') GROUP BY T2.conference_id HAVING COUNT(T2.conference_id) > 1;
SELECT T1.name FROM staff AS T1 INNER JOIN conference AS T2 ON T1.staff_id = T2.staff_id WHERE T2.conference_id IN (2003, 2004)
SELECT T1.staff_name FROM conferences AS T2 JOIN staff AS T1 ON T2.staff_id = T1.staff_id WHERE T2.conference_id IN ( SELECT conference_id FROM conference_participation WHERE participation_type = 'staff' AND year BETWEEN 2003 AND 2004 );
SELECT conference_name, year, COUNT(*) as num_participants FROM conferences GROUP BY conference_name, year;
SELECT T1.name, T2.year, COUNT(T3.PRIMARY_KEY) FROM conferences AS T1 INNER JOIN conference_participations AS T2 ON T1.conference_id = T2.conference_id INNER JOIN participants AS T3 ON T2.participation_id = T3.participation_id GROUP BY T1.conference_id
SELECT conference_name FROM conferences WHERE id IN ( SELECT id FROM attendees GROUP BY id ORDER BY COUNT(*) DESC LIMIT 2 )
SELECT conference_name FROM conferences WHERE id IN ( SELECT id FROM registrations GROUP BY registration_id ORDER BY COUNT(*) DESC LIMIT 2 )
SELECT name, nationality FROM conference WHERE id NOT IN (SELECT id FROM participant)
SELECT T1.name, T2.nationality FROM conference AS T1 INNER JOIN participant AS T2 ON T1.id = T2.conference_id WHERE T2.id IS NULL;
SELECT T1.name, T2.location FROM universities AS T1 INNER JOIN conferences AS T2 ON T1.id = T2.university_id WHERE T2.staff_id IS NULL AND T2.year = 2004;
SELECT T1.name, T2.location FROM universities AS T1 JOIN conferences AS T2 ON T1.id = T2.university_id WHERE T2.staff_id IS NULL AND T2.year = 2004;
SELECT name FROM pilots ORDER BY age ASC LIMIT 1;
SELECT name FROM pilots ORDER BY age DESC LIMIT 1;
SELECT name FROM pilots WHERE age < (SELECT AVG(age) FROM pilots);
SELECT name FROM pilots WHERE age < (SELECT AVG(age) FROM pilots) ORDER BY age ASC;
SELECT * FROM pilots WHERE age < 30;
SELECT * FROM pilots WHERE age < 30;
SELECT T1.name FROM pilots AS T1 JOIN planes AS T2 ON T1.id = T2.pilot_id WHERE T2.model_name = 'Piper Cub' AND T1.age < 35;
SELECT pilot_name FROM pilots WHERE age < 35 AND plane_name = 'Piper Cub';
SELECT location FROM planes WHERE plane_name = 'F-14 Fighter';
SELECT location FROM aircraft WHERE type = 'hangar' AND plane = 'F-14 Fighter';
SELECT COUNT(DISTINCT T2.place) FROM planes AS T1 INNER JOIN places AS T2 ON T1.place_id = T2.id
SELECT COUNT(DISTINCT location) FROM hangar;
SELECT plane FROM pilot WHERE name = 'Jones' AND age = 32;
SELECT T1.name FROM planes AS T1 JOIN pilots AS T2 ON T1.id = T2.plane_id WHERE T2.name = 'Jones' AND T2.age = 32;
SELECT COUNT(*) FROM pilots WHERE age > 40;
SELECT COUNT(*) FROM Pilots WHERE age > 40;
SELECT COUNT(*) FROM planes WHERE age INTEGER < 35 AND owner IN (SELECT pilot_name FROM pilots) AND plane_type = 'B-52 Bomber';
SELECT COUNT(*) FROM Pilots WHERE Age < 35 AND Plane = 'B-52 Bomber';
SELECT MIN age FROM pilots WHERE plane_name = 'Piper Cub'
SELECT MIN(age) FROM pilots WHERE plane_name = 'Piper Cub' AND plane_type = 'single engine';
SELECT name FROM planes WHERE popularity = ( SELECT MAX(popularity) FROM planes );
SELECT plane_name FROM flights WHERE frequency = ( SELECT MAX(frequency) FROM flights );
SELECT name FROM planes WHERE popularity = ( SELECT MIN(popularity) FROM planes );
SELECT plane_name FROM flights WHERE frequency < (SELECT MIN(frequency) FROM flights);
SELECT COUNT(*) FROM PLANE WHERE CITY = 'CHICAGO';
SELECT COUNT(*) FROM PLANE WHERE CITY = 'CHICAGO';
SELECT plane FROM pilot WHERE name = 'Smith' AND age = 41;
SELECT T1.name FROM Plane AS T1 JOIN Pilot AS T2 ON T1.pilot_name = T2.pilot_name WHERE T2.age = 41 AND T2.name = 'Smith';
SELECT COUNT(DISTINCT T1.plane_id) FROM planes AS T1 INNER JOIN pilots AS T2 ON T1.pilot_id = T2.pilot_id
SELECT COUNT(DISTINCT T1.plane_name) FROM pilots AS T1 INNER JOIN planes AS T2 ON T1.plane_id = T2.id
SELECT COUNT(*) FROM pilot AS p JOIN plane AS pl ON p.id = pl.pilot_id WHERE p.name = 'Smith';
SELECT COUNT(*) FROM planes WHERE owner = 'Smith';
SELECT COUNT(*) FROM pilots WHERE age > 40;
SELECT COUNT(*) FROM flights WHERE pilot_name IN ( SELECT pilot_name FROM pilots WHERE age > 40 );
SELECT name FROM pilots WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;
SELECT name FROM pilots WHERE age BETWEEN 30 AND 40 ORDER BY age ASC;
SELECT pilot_name FROM pilots ORDER BY age DESC;
SELECT name FROM pilots ORDER BY age DESC;
SELECT location FROM planes ORDER BY name;
SELECT location FROM planes ORDER BY name;
SELECT DISTINCT T1.plane_type FROM planes AS T1 INNER JOIN pilots AS T2 ON T1.pilot_id = T2.pilot_id ORDER BY T1.plane_type;
SELECT name FROM plane ORDER BY name;
SELECT COUNT(*) FROM pilots WHERE age < 30 OR age > 40;
SELECT COUNT(*) FROM pilots WHERE age > 40 OR age < 30;
SELECT T1.name, T2.age FROM pilots AS T1 INNER JOIN planes AS T2 ON T1.id = T2.pilot_id WHERE T2.model_name IN ('Piper Cub', 'F-14 Fighter') AND (T1.age > 35 OR T1.age < 30)
SELECT T1.name, T2.age FROM pilots AS T1 INNER JOIN flights AS T2 ON T1.id = T2.pilot_id WHERE T2.plane_name IN ('Piper Cub', 'F-14 Fighter') AND (T1.age > 35 OR T1.age < 30)
SELECT pilot FROM planes WHERE plane_name = 'Piper Cub' EXCEPT SELECT pilot FROM planes WHERE plane_name = 'B-52 Bomber';
SELECT T1.name FROM pilots AS T1 JOIN aircraft AS T2 ON T1.id = T2.pilot_id WHERE T2.model_name IN ('Piper Cub', 'B-52 Bomber') AND T2.model_name != 'B-52 Bomber';
SELECT pilot_name FROM planes WHERE plane_name IN ('Piper Cub', 'B-52 Bomber')
SELECT T1.name FROM Pilots AS T1 INNER JOIN Aircraft AS T2 ON T1.id = T2.pilot_id WHERE T2.model_name IN ('Piper Cub', 'B-52 Bomber')
SELECT AVG(age), MIN(age) FROM pilots
SELECT AVG(age), MIN(age) FROM pilots
SELECT T1.name FROM Pilots AS T1 INNER JOIN Planes AS T2 ON T1.id = T2.pilot_id WHERE T2.airport IN ('Austin', 'Boston') GROUP BY T1.name HAVING COUNT(T2.airport) > 1;
SELECT T1.name FROM PLANE AS T1 JOIN AIRPORTS AS T2 ON T1.city = T2.city WHERE T2.name IN ('Austin', 'Boston')
SELECT pilot FROM planes WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')
SELECT pilot_name FROM pilots WHERE plane_name IN ('Piper Cub', 'F-14 Fighter')
SELECT AVG(age) FROM pilots WHERE plane_name IN ('Cessna', 'Cessna')
SELECT AVG(T1.age) FROM Pilots AS T1 INNER JOIN Planes AS T2 ON T1.plane_name = T2.plane_name GROUP BY T2.plane_name
SELECT COUNT(*) , type FROM planes GROUP BY type;
SELECT COUNT(*) , plane_name FROM planes GROUP BY plane_name;
SELECT T1.name, T2.plane_name FROM pilots AS T1 INNER JOIN planes AS T2 ON T1.id = T2.id ORDER BY T2.plane_name
SELECT T1.plane_name, T2.pilot_name FROM planes AS T1 INNER JOIN pilots AS T2 ON T1.id = T2.plane_id ORDER BY T1.plane_name
SELECT T1.name, T2.type FROM pilots AS T1 INNER JOIN planes AS T2 ON T1.id = T2.id ORDER BY T1.age DESC LIMIT 5;
SELECT T1.name, MAX(T2.age) FROM planes AS T1 INNER JOIN pilots AS T2 ON T1.id = T2.plane_id GROUP BY T1.name;
SELECT MAX(age) FROM pilots GROUP BY name
SELECT pilot_name, MAX(age) FROM pilots GROUP BY pilot_name;
SELECT COUNT(DISTINCT T1.city), AVG(T2.age) FROM CITIES AS T1 INNER JOIN PLANE AS T2 ON T1.id = T2.city INNER JOIN PILOTS AS T3 ON T2.id = T3.plane_id GROUP BY T1.city;
SELECT hangar_location, COUNT(pilot_id) AS num_pilots, AVG(age) FROM pilots GROUP BY hangar_location;
SELECT COUNT(*) FROM flights WHERE AVG(age_ingether) < 35;
SELECT T1.plane_name, COUNT(T2.pilot_id) FROM planes AS T1 INNER JOIN pilots AS T2 ON T1.id = T2.plane_id WHERE AVG(T2.age) < 35 GROUP BY T1.plane_name;
SELECT location FROM planes WHERE owner = ( SELECT MIN(age) FROM pilots )
SELECT location FROM flights WHERE age IN ( SELECT MIN(age) FROM pilots );
SELECT T1.name, T2.age FROM Pilots AS T1 INNER JOIN Planes AS T2 ON T1.pilot_name = T2.pilot_name WHERE T2.city = 'Austin';
SELECT T1.name, T2.age FROM Pilots AS T1 INNER JOIN Planes AS T2 ON T1.plane_name = T2.plane_name WHERE T2.location = 'Austin';
SELECT name FROM pilots WHERE age > (SELECT MIN(age) FROM pilots WHERE plane_name = 'Piper Cub') ORDER BY name;
SELECT name FROM pilots WHERE age > (SELECT MAX(age) FROM pilots WHERE plane_name = 'Piper Cub') ORDER BY name;
SELECT COUNT(*) FROM pilots WHERE age < (SELECT MIN(age) FROM pilots WHERE plane = 'F-14 Fighter')
SELECT COUNT(*) FROM Pilots WHERE age < (SELECT MIN(age) FROM Pilots WHERE plane_name = 'F-14 Fighter')
SELECT DISTINCT plane FROM planes WHERE name LIKE '%Bomber%'
SELECT plane_name FROM planes WHERE plane_name LIKE '%Bomber%'
SELECT COUNT(*) FROM pilots WHERE age > (SELECT MIN(age) FROM pilots WHERE plane_name = 'Piper Cub')
SELECT COUNT(*) FROM pilots WHERE age > ( SELECT MIN(age) FROM pilots WHERE plane_name = 'Piper Cub' )
SELECT district_name FROM districts WHERE area = ( SELECT MAX(area) FROM districts );
SELECT T1.area, T2.government_website FROM district AS T1 INNER JOIN district_id AS T2 ON T1.id = T2.district_id ORDER BY T1.population ASC LIMIT 1;
SELECT T1.name, T2.population FROM district AS T1 INNER JOIN area AS T2 ON T1.id = T2.district_id WHERE T2.area > (SELECT AVG(area) FROM area);
SELECT MAX(area), AVG(area) FROM districts
SELECT SUM(T2.population) FROM district AS T1 INNER JOIN area AS T2 ON T1.id = T2.district_id ORDER BY T2.area DESC LIMIT 3;
SELECT id, name, government_website FROM districts ORDER BY population;
SELECT name FROM districts WHERE government_link LIKE '%gov%'
SELECT id, name FROM district WHERE population > 4000 OR area > 3000;
SELECT spokesman_name, speech_title FROM speeches
SELECT AVG(T1.points) ,  AVG(T2.age) FROM speakers AS T1 INNER JOIN rank_position AS T2 ON T1.id = T2.spokesman_id WHERE T2.rank_position = 1;
SELECT name, points FROM spokesmen WHERE age < 40;
SELECT spokesman FROM spokesmen WHERE age = ( SELECT MAX(age) FROM spokesmen );
SELECT spokesman FROM spokesmen WHERE points < (SELECT AVG(points) FROM spokesmen);
SELECT district FROM spokesmen GROUP BY district ORDER BY COUNT(district) DESC LIMIT 1;
SELECT s.name FROM spokesmen AS s JOIN district AS d ON s.spokesman_id = d.spokesman_id WHERE d.district_id IN ( SELECT district_id FROM history WHERE year < 2004 )
SELECT s.spokesman_id, d.district_name, COUNT(s.spokesman_id) FROM spokesmen s JOIN district d ON s.district_id = d.district_id GROUP BY s.spokesman_id
SELECT DISTINCT d.name FROM district AS d JOIN spokesman AS s ON d.id = s.district_id WHERE s.rank_position_1 IN (SELECT rank_position_1 FROM spokesman) AND s.rank_position_2 IN (SELECT rank_position_2 FROM spokesman);
SELECT DISTINCT district FROM spokesman WHERE spokesman_id IN ( SELECT spokesman_id FROM spokesman GROUP BY spokesman_id HAVING COUNT(*) > 1 );
SELECT COUNT(DISTINCT district_id) FROM spokesmen WHERE district_id NOT IN ( SELECT district_id FROM spokesman );
SELECT s.name FROM spokesmen WHERE id NOT IN (SELECT district_id FROM districts)
SELECT SUM(T1.population), AVG(T1.population) FROM district AS T1 INNER JOIN spokesman AS T2 ON T1.id = T2.district_id WHERE T2.spokesman_id IS NOT NULL;
SELECT T2.title FROM sculptures AS T1 INNER JOIN artists AS T2 ON T1.artist_id = T2.id WHERE STRFTIME('%Y', T1.year) = (SELECT MAX(STRFTIME('%Y', year)) FROM sculptures)
SELECT name FROM sculptures ORDER BY created DESC LIMIT 1;
SELECT T2.title, T2.location FROM paintings AS T1 INNER JOIN artists AS T2 ON T1.artist_id = T2.id ORDER BY T1.date_int DESC LIMIT 1;
SELECT T2.name, T1.location FROM paintings AS T1 INNER JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T1.age >= ( SELECT MAX(age) FROM paintings );
SELECT name FROM sculptures WHERE ID IN (SELECT gallery_id FROM galleries WHERE name = 'Gallery 226')
SELECT name FROM sculptures WHERE gallery_id = 226;
SELECT title, location FROM paintings
SELECT T2.name, T1.location FROM paintings AS T1 INNER JOIN artists AS T2 ON T1.artist_id = T2.id
SELECT title, location FROM sculptures;
SELECT name, location FROM sculptures;
SELECT medium_type FROM paintings WHERE id = 80;
SELECT medium FROM paintings WHERE ID = 80;
SELECT first_name, last_name FROM artists WHERE birth_year > 1850;
SELECT T1.full_name FROM artists AS T1 INNER JOIN birth_year AS T2 ON T1.artist_id = T2.artist_id WHERE T2.birth_year > 1850;
SELECT name, year FROM sculptures WHERE location != 226
SELECT T1.name, T2.date_created FROM sculptures AS T1 INNER JOIN exhibit_info AS T2 ON T1.sculpture_id = T2.sculpture_id WHERE T2.exhibit_id != 226;
SELECT DISTINCT T1.first_name, T1.last_name FROM artists AS T1 INNER JOIN sculptures AS T2 ON T1.artist_id = T2.artist_id WHERE T2.date > '1900-12-31'
SELECT DISTINCT first_name, last_name FROM artists WHERE date_born < '1900'
SELECT DISTINCT birth_year FROM artists WHERE sculpture_id IN ( SELECT sculpture_id FROM sculptures WHERE year > 1920 )
SELECT DISTINCT birth_year FROM artists WHERE medium = 'sculpture' AND year > 1920;
SELECT T1.first_name, T1.last_name FROM artists AS T1 INNER JOIN longest_lived_artist AS T2 ON T1.artist_id = T2.artist_id ORDER BY T2.lifetime DESC LIMIT 1;
SELECT T1.full_name FROM artists AS T1 INNER JOIN longest_lived_artist AS T2 ON T1.artist_id = T2.artist_id ORDER BY T2.lifetime DESC LIMIT 1;
SELECT MIN(T2.age) FROM artists AS T1 INNER JOIN artist_integrener AS T2 ON T1.artist_id = T2.artist_id
SELECT MIN(death_year) FROM artists WHERE death_year = ( SELECT MIN(death_year) FROM artists );
SELECT T1.first_name, T2.age FROM artists AS T1 INNER JOIN life_times AS T2 ON T1.artist_id = T2.artist_id ORDER BY T2.longest_life DESC LIMIT 1;
SELECT T1.first_name, T2.age FROM artists AS T1 INNER JOIN longest_lived_artist AS T2 ON T1.artist_id = T2.artist_id ORDER BY T2.death_year ASC LIMIT 1;
SELECT COUNT(*) FROM paintings WHERE gallery_id = 240;
SELECT COUNT(T1.paintingID) FROM paintings AS T1 INNER JOIN gallery AS T2 ON T1.galleryID = T2.galleryID WHERE T2.galleryID = 240;
SELECT COUNT(*) FROM artists WHERE artist_id IN ( SELECT artist_id FROM paintings GROUP BY artist_id ORDER BY MAX(death_year) LIMIT 1 )
SELECT COUNT(T2.paintingID) FROM artists AS T1 INNER JOIN paintings AS T2 ON T1.artistID = T2.artistID ORDER BY T1.life expectancy DESC LIMIT 1;
SELECT T1.name, T2.year FROM artists AS T1 INNER JOIN paintings AS T2 ON T1.artist_id = T2.artist_id WHERE T1.first_name = 'Mary'
SELECT T1.name, T2.year FROM artists AS T1 INNER JOIN paintings AS T2 ON T1.artist_id = T2.artist_id WHERE T1.first_name = 'Mary'
SELECT width_mm FROM paintings WHERE artist_id IN (SELECT artist_id FROM artists WHERE birth_year < 1850)
SELECT width_mm FROM paintings WHERE artist_id IN (SELECT artist_id FROM artists WHERE birth_year < 1850)
SELECT location, medium_type FROM paintings WHERE artist_first_name = 'Pablo'
SELECT T2.location, T2.medium FROM artists AS T1 INNER JOIN paintings AS T2 ON T1.artistID = T2.artistID WHERE T1.first_name = 'Pablo'
SELECT T1.first_name, T1.last_name FROM artists AS T1 INNER JOIN paintings AS T2 ON T1.artist_id = T2.artist_id INNER JOIN sculptures AS T3 ON T1.artist_id = T3.artist_id WHERE T2.painting_id IN (SELECT painting_id FROM sculptures)
SELECT T1.full_name FROM artists AS T1 INNER JOIN paintings AS T2 ON T1.artist_id = T2.artist_id INNER JOIN sculptures AS T3 ON T1.artist_id = T3.artist_id
SELECT first_name, last_name FROM artists WHERE painting_id IN ( SELECT painting_id FROM paintings WHERE medium = 'lithographic' INTERSECT SELECT painting_id FROM paintings WHERE medium = 'oil' )
SELECT first_name, last_name FROM artists WHERE medium_id IN (SELECT medium_id FROM painting WHERE medium = 'oil' AND medium = 'lithographic')
SELECT T2.birth_year FROM TABLE1 AS T1 INNER JOIN TABLE2 AS T2 ON T1.artist_id = T2.artist_id WHERE T1.painting_id IN (SELECT painting_id FROM TABLE3 WHERE year = 1884) AND T2.type = 'painting';
SELECT T2.year FROM artists AS T1 INNER JOIN paintings AS T2 ON T1.artistID = T2.artistID WHERE T2.year = 1884;
SELECT DISTINCT T1.first_name FROM artists AS T1 INNER JOIN paintings AS T2 ON T1.artist_id = T2.artist_id WHERE T2.painting_id IN ( SELECT painting_id FROM gallery WHERE gallery_id = 241 AND medium = 'oil' )
SELECT T1.first_name FROM artists AS T1 INNER JOIN paintings AS T2 ON T1.artist_id = T2.artist_id WHERE T2.painting_id IN (SELECT painting_id FROM gallery WHERE gallery_id = 241 AND type = 'oil')
SELECT COUNT(*) FROM works WHERE medium_type IN ('painting', 'sculpture')
SELECT COUNT(*) FROM works WHERE medium IN ('painting', 'text')
SELECT AVG(height_mm) FROM paintings GROUP BY medium_ID
SELECT AVG(h) FROM paintings WHERE mediumID IN (SELECT ID FROM mediums WHERE name = 'Painting')
SELECT COUNT(*) FROM paintings WHERE created_before = 1900 GROUP BY place_id;
SELECT COUNT(*) FROM paintings WHERE location IN ('INTENT', 'TITLE', 'YEAR') AND INTENT = 'FOREIGN' AND ARTISTID IN (SELECT ID FROM artists) AND YEAR < 1900;
SELECT T1.title FROM paintings AS T1 INNER JOIN artists AS T2 ON T1.artist_id = T2.artist_id WHERE T1.year > 1910 AND T1.medium IN ('oil', 'oil on canvas')
SELECT T2.name FROM paintings AS T1 INNER JOIN artist AS T2 ON T1.artist_id = T2.id WHERE T1.date_int >= 1910;
SELECT DISTINCT painter_id FROM paintings WHERE medium = 'oil' AND gallery_id = 240;
SELECT p.painterID FROM paintings AS p JOIN exhibitions AS e ON p.exhibitionID = e.exhibitionID WHERE e.galleryID = 240 AND p.medium = 'oil'
SELECT DISTINCT T2.title FROM paintings AS T1 INNER JOIN painting_ID AS T2 ON T1.painting_id = T2.painting_id WHERE T1.height_mm > (SELECT MAX(height_mm) FROM paintings);
SELECT DISTINCT T2.title FROM paintings AS T1 INNER JOIN painting_ID AS T2 ON T1.painting_id = T2.painting_id WHERE T1.height_mm > (SELECT MAX(height_mm) FROM paintings);
SELECT DISTINCT painting_id FROM paintings WHERE painting_id IN ( SELECT painting_id FROM paintings WHERE location_id = 240 AND year > ( SELECT MAX(year) FROM paintings ) );
SELECT DISTINCT painting_id FROM paintings WHERE painting_id IN ( SELECT painting_id FROM paintings WHERE height_mm > ( SELECT AVG(height_mm) FROM paintings ) );
SELECT paintingID FROM paintings ORDER BY date INT DESC LIMIT 1;
SELECT MIN(paintingID) FROM paintings
SELECT T1.first_name, T1.last_name FROM artists AS T1 INNER JOIN sculptures AS T2 ON T1.artist_id = T2.artist_id WHERE T2.title LIKE '%female%'
SELECT T1.full_name FROM artists AS T1 INNER JOIN sculptures AS T2 ON T1.artist_id = T2.artist_id WHERE T2.title LIKE '%female%'
SELECT DISTINCT name FROM paintings ORDER BY name;
SELECT DISTINCT name FROM paintings ORDER BY name;
SELECT DISTINCT painting FROM paintings ORDER BY length;
SELECT DISTINCT painting FROM paintings ORDER BY height_mm ASC;
SELECT T2.name FROM paintings AS T1 INNER JOIN artworks AS T2 ON T1.id = T2.painting_id WHERE T2.integre_date BETWEEN '1900-01-01' AND '1950-12-31';
SELECT T1.name FROM paintings AS T1 INNER JOIN artworks AS T2 ON T1.id = T2.painting_id WHERE T2.integre_date BETWEEN '1900-01-01' AND '1950-12-31';
SELECT T1.title FROM paintings AS T1 INNER JOIN artists AS T2 ON T1.artist_id = T2.artist_id WHERE T2.artist_id = 222;
SELECT T1.title FROM paintings AS T1 INNER JOIN artists AS T2 ON T1.artist_id = T2.artist_id WHERE T2.artist_id = 222;
SELECT artist_id FROM paintings WHERE date >= '1900-01-01' GROUP BY artist_id ORDER BY COUNT(painting_id) DESC LIMIT 1;
SELECT artistID FROM paintings WHERE year < 1900 GROUP BY artistID ORDER BY COUNT(paintingID) DESC LIMIT 1;
SELECT T1.first_name FROM artists AS T1 INNER JOIN sculptures AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY COUNT(T2.sculpture_id) DESC LIMIT 1
SELECT T1.first_name FROM sculptors AS T1 INNER JOIN artists AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.first_name ORDER BY COUNT(T1.sculptor_id) DESC LIMIT 1
SELECT name FROM paintings WHERE width < 600 OR height > 800;
SELECT T2.title FROM paintings AS T1 INNER JOIN painting_ID AS T2 ON T1.painting_id = T2.painting_id WHERE T1.width < 600 OR T1.height > 800;
SELECT location FROM paintings WHERE created BETWEEN '1885-01-01' AND '1930-12-31'
SELECT location FROM works WHERE date BETWEEN '1885-01-01' AND '1930-12-31'
SELECT paintingID FROM paintings WHERE height_mm BETWEEN 500 AND 2000
SELECT paintingID FROM paintings WHERE height_mm BETWEEN 500 AND 2000
SELECT location FROM paintings WHERE medium IN ('on panel', 'on canvas')
SELECT location FROM paintings WHERE medium IN ('on panel', 'on canvas')
SELECT location FROM locations WHERE painting_id IN (SELECT painting_id FROM paintings WHERE created BETWEEN '1885-01-01' AND '1930-12-31')
SELECT location FROM paintings WHERE date BETWEEN '1885-01-01' AND '1930-12-31'
SELECT AVG(height_mm) ,  AVG(width_mm) FROM paintings WHERE medium = 'oil' AND gallery_id = 241;
SELECT AVG(height_mm) ,  AVG(width_mm) FROM paintings WHERE medium = 'oil' AND gallery_id = 241;
SELECT MAX(height_mm) ,  MAX(id) FROM paintings WHERE year INT >= 1900;
SELECT height_mm, id FROM paintings WHERE year INT >= 1900 ORDER BY height_mm DESC LIMIT 1;
SELECT MAX(height_mm) ,  MAX(width_mm) FROM paintings WHERE year IN (SELECT DISTINCT year FROM paintings);
SELECT MAX(height_mm), MAX(width_mm) FROM paintings GROUP BY year
SELECT AVG(h_height_mm), AVG(w_width_mm) FROM paintings GROUP BY painterID ORDER BY painterID
SELECT AVG(h_height_mm), AVG(w_width_mm) FROM paintings GROUP BY painter_ID ORDER BY name
SELECT T1.first_name, COUNT(T2.artist_id) FROM artists AS T1 INNER JOIN paintings AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.first_name HAVING COUNT(T2.painting_id) >= 2;
SELECT T1.first_name, COUNT(T2.work_id) FROM artists AS T1 INNER JOIN paintings AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.first_name HAVING COUNT(T2.work_id) >= 2;
SELECT death_year FROM artists WHERE COUNT(painting_id) <= 3;
SELECT D FROM ARTISTS WHERE ID IN ( SELECT ID FROM PAINTINGS GROUP BY ID HAVING COUNT(DISTINCT artistID) < 4 )
SELECT death_year FROM artists WHERE sculpture_id = ( SELECT MIN(sculpture_id) FROM sculptures );
SELECT MIN(death_year) FROM artists WHERE sculpture_id IN (SELECT MAX(sculpture_id) FROM sculptures);
SELECT id, height FROM paintings WHERE gallery_id = 240 ORDER BY width DESC LIMIT 1;
SELECT height_mm, id FROM paintings WHERE gallery_id = 240 ORDER BY width_mm DESC LIMIT 1;
SELECT painting_id FROM paintings WHERE painting_id NOT IN (SELECT MIN(painting_id) FROM paintings WHERE gallery_id = 240)
SELECT paintingID FROM paintings WHERE paintingID NOT IN (SELECT MIN(paintingID) FROM paintings WHERE galleryID = 240)
SELECT paintingID FROM paintings WHERE height > ( SELECT MAX(height) FROM paintings WHERE year > 1900 )
SELECT paintingID FROM paintings WHERE height_mm > ( SELECT MAX(height_mm) FROM paintings WHERE yearINT >= 1900 )
SELECT T1.artistID, COUNT(T2.paintingID) AS num_paintings FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID = T2.artistID WHERE T2.medium = 'oil' GROUP BY T1.artistID ORDER BY num_paintings DESC LIMIT 3;
SELECT artist FROM paintings GROUP BY artist ORDER BY COUNT(paintingID) DESC LIMIT 1;
SELECT painting_id, location, title FROM paintings WHERE medium IN ('oil', 'water_mill') ORDER BY year;
SELECT ID, LOCATION, TITLE FROM paintings ORDER BY date_of_creation;
SELECT T2.year, T2.location, T2.title FROM paintings AS T1 INNER JOIN paintings_ID AS T2 ON T1.paintingID = T2.paintingID WHERE T1.height_mm > 1000 ORDER BY T2.title;
SELECT T2.year, T2.location, T1.name FROM paintings AS T1 INNER JOIN attributes AS T2 ON T1.id = T2.painting_id WHERE T2.height_mm > 1000 ORDER BY T1.name
SELECT first_name, last_name FROM artists WHERE painting_id IN (SELECT painting_id FROM paintings) AND sculpture_id IS NULL;
SELECT first_name, last_name FROM artists WHERE sculpt_id IS NULL AND painting_id IN ( SELECT id FROM paintings )
SELECT location FROM paintings WHERE date < '1885' AND medium = 'none';
SELECT painting_id FROM paintings WHERE created_before = '1885' AND medium != 'canvas'
SELECT COUNT(*) FROM races;
SELECT COUNT(*) FROM races;
SELECT T1.driver, T2.team FROM race AS T1 INNER JOIN driver_team AS T2 ON T1.id = T2.race_id ORDER BY T2.team ASC;
SELECT T1.team, T2.driver FROM races AS T1 JOIN drivers AS T2 ON T1.driver_id = T2.id ORDER BY T1.team;
SELECT DISTINCT race_name FROM races WHERE pole_position != 'Junior Strous'
SELECT DISTINCT T1.driver FROM races AS T1 INNER JOIN drivers AS T2 ON T1.driver_id = T2.id WHERE T1.race_name != 'Junior Strous' AND T1.winning_driver IS NOT NULL
SELECT constructor FROM driver ORDER BY age ASC;
SELECT constructor FROM driver ORDER BY age ASC
SELECT DISTINCT entrant_type FROM driver WHERE age >= 20;
SELECT DISTINCT entrant_type FROM driver WHERE age >= 20;
SELECT MAX(age) ,  MIN(age) FROM driver
SELECT MAX(age), MIN(age) FROM driver
SELECT COUNT(DISTINCT T1.engine) FROM Driver AS T1 INNER JOIN Age AS T2 ON T1.age = T2.age WHERE T2.age < 20 OR T2.age > 30;
SELECT COUNT(DISTINCT T1.engine) FROM Driver AS T1 INNER JOIN Age AS T2 ON T1.id = T2.driver_id WHERE T2.age > 30 OR T2.age < 20;
SELECT name FROM driver ORDER BY name DESC;
SELECT name FROM driver ORDER BY name DESC;
SELECT T1.name, T2.race_name FROM driver AS T1 INNER JOIN race_driver AS T2 ON T1.id = T2.driver_id
SELECT T1.name, T2.race FROM driver AS T1 INNER JOIN race_driver AS T2 ON T1.id = T2.driver_id
SELECT T1.name, COUNT(T2.race_id) FROM driver AS T1 INNER JOIN race_driver AS T2 ON T1.driver_id = T2.driver_id GROUP BY T1.name
SELECT COUNT(r.race_id) FROM race AS r JOIN driver AS d ON r.driver_id = d.driver_id
SELECT T1.age FROM race AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.id GROUP BY T1.driver_id ORDER BY COUNT(T1.race_id) DESC LIMIT 1
SELECT T1.age FROM race AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.id GROUP BY T1.driver_id ORDER BY COUNT(T1.race_id) DESC LIMIT 1
SELECT T1.name, T2.age FROM driver AS T1 INNER JOIN race AS T2 ON T1.driver_id = T2.driver_id GROUP BY T1.driver_id HAVING COUNT(T2.race_id) >= 2
SELECT T1.name, T2.age FROM driver AS T1 INNER JOIN race AS T2 ON T1.driver_id = T2.driver_id GROUP BY T1.driver_id HAVING COUNT(T2.race_name) >= 2
SELECT race FROM races WHERE driver_id IN ( SELECT driver_id FROM drivers WHERE age >= 26 )
SELECT race FROM races WHERE driver_id IN (SELECT id FROM drivers WHERE age >= 26)
SELECT name FROM driver WHERE constructor != 'Bugatti'
SELECT name FROM driver WHERE constructor NOT LIKE '%Bugatti%'
SELECT COUNT(DISTINCT constructor) ,  COUNT(*) FROM driver WHERE driver_id IN (1,2,3,4,5,6,7,8,9,10);
SELECT COUNT(DISTINCT constructor) FROM driver
SELECT T2.type FROM Driver AS T1 INNER JOIN Engine AS T2 ON T1.id = T2.driver_id GROUP BY T2.type ORDER BY COUNT(T2.type) DESC LIMIT 1;
SELECT TYPE FROM ENGINE WHERE NAME = 'diver' GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT T1.type FROM Driver AS T1 INNER JOIN Driver_Engine AS T2 ON T1.id = T2.driver_id GROUP BY T1.type HAVING COUNT(T1.type) > 1;
SELECT DISTINCT T1.engine_type FROM driver AS T1 INNER JOIN driver_engine AS T2 ON T1.id = T2.driver_id GROUP BY T1.engine_type HAVING COUNT(T1.id) > 1;
SELECT DISTINCT d.driver_name FROM driver AS d WHERE d.driver_id NOT IN ( SELECT driver_id FROM race );
SELECT DISTINCT driver_name FROM races WHERE driver_id NOT IN (SELECT driver_id FROM results)
SELECT DISTINCT constructor FROM driver WHERE age < 20 INTERSECT SELECT DISTINCT constructor FROM driver WHERE age > 30
SELECT constructor FROM driver WHERE age < 20 INTERSECT SELECT constructor FROM driver WHERE age > 30
SELECT T1.name FROM teams AS T1 INNER JOIN results AS T2 ON T1.id = T2.team_id GROUP BY T1.name HAVING COUNT(T2.match_id) > 1;
SELECT T1.team FROM races AS T1 INNER JOIN teams AS T2 ON T1.team = T2.name WHERE T1.team IN ( SELECT team FROM races GROUP BY team HAVING COUNT(team) > 1 )
SELECT DISTINCT d.driver_id FROM driver d JOIN race r ON d.driver_id = r.driver_id WHERE r.race_name IN ('James Hinchcliffe', 'Carl Skerlong')
SELECT driver_name FROM race WHERE pole_position = (SELECT MIN(pole_position) FROM race WHERE driver_id IN (SELECT id FROM driver)) AND pole_position = (SELECT MAX(pole_position) FROM race WHERE driver_id IN (SELECT id FROM driver));
SELECT DISTINCT d.driver_name FROM driver d JOIN race r ON d.driver_id = r.driver_id WHERE r.race_name NOT IN ('James Hinchcliffe', 'James Hinchcliffe')
SELECT name FROM driver WHERE id NOT IN (SELECT id FROM driver WHERE name = 'James Hinchcliffe')
SELECT COUNT(DISTINCT language) FROM languages;
SELECT COUNT(*) FROM languages;
SELECT name FROM languages ORDER BY name ASC;
SELECT name FROM languages ORDER BY name;
SELECT name FROM languages WHERE name LIKE '%ish%'
SELECT name FROM lang WHERE name LIKE '%ish%'
SELECT name FROM countries ORDER BY overall_score DESC;
SELECT name FROM countries ORDER BY overall_score DESC;
SELECT AVG justice_score FROM countries;
SELECT AVG(justice_score) FROM countries;
SELECT MAX(health_score) FROM countries WHERE country != 'Norway' AND health_score IS NOT NULL AND health_score > 0 UNION SELECT MIN(health_score) FROM countries WHERE country != 'Norway' AND health_score IS NOT NULL AND health_score > 0;
SELECT MAX(health_score) ,  MIN(health_score) FROM countries WHERE country != 'Norway'
SELECT COUNT(DISTINCT language_id) FROM languages WHERE is_official = 1;
SELECT COUNT(DISTINCT language_id) FROM languages
SELECT country FROM countries ORDER BY education_score DESC;
SELECT name FROM countries ORDER BY education_score DESC;
SELECT country FROM scores ORDER BY score DESC LIMIT 1;
SELECT country FROM politics WHERE score = ( SELECT MAX(score) FROM politics );
SELECT T1.name, T2.languages FROM countries AS T1 INNER JOIN languages AS T2 ON T1.id = T2.country_id
SELECT T1.name, T2.language FROM countries AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.country_id
SELECT language, COUNT(country_id) FROM official_languages GROUP BY language;
SELECT T1.name, COUNT(T2.country_id) FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.language_id GROUP BY T1.name;
SELECT T1.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.language_id GROUP BY T1.name ORDER BY COUNT(T2.country_id) DESC LIMIT 1;
SELECT lang_id FROM languages WHERE count(*) = ( SELECT MAX(count) FROM languages );
SELECT T1.official_language FROM COUNTRY AS T1 INNER JOIN LANGUAGE AS T2 ON T1.id = T2.country_id GROUP BY T1.official_language HAVING COUNT(T1.id) >= 2;
SELECT T1.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.language_id WHERE T2.country_id IN ( SELECT country_id FROM countries GROUP BY country_id HAVING COUNT(country_id) > 1 );
SELECT AVG(lainguages.id) FROM languages WHERE lainguages.id IN ( SELECT country_id FROM countries WHERE official_language = 'English' )
SELECT AVG(languages_official) FROM countries WHERE languages = 'English'
SELECT T1.name FROM languages AS T1 INNER JOIN official_languages AS T2 ON T1.id = T2.language_id WHERE T2.name IN ( SELECT name FROM official_languages GROUP BY name ORDER LIMIT 3 )
SELECT T1.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.language_id WHERE T2.num_cities > 3 GROUP BY T1.name ORDER BY COUNT(T2.num_cities) DESC LIMIT 3;
SELECT c.official_language, AVG(s.overall_score) FROM countries AS s JOIN languages AS c ON s.id = c.country_id GROUP BY c.official_language ORDER BY AVG(s.overall_score) DESC;
SELECT T1.name FROM languages AS T1 INNER JOIN scores AS T2 ON T1.id = T2.language_id ORDER BY AVG(T2.score) DESC;
SELECT c.name FROM countries AS c JOIN languages AS l ON c.id = l.country_id GROUP BY c.id ORDER BY COUNT(l.id) DESC LIMIT 1;
SELECT country FROM countries WHERE official_languages = ( SELECT MAX(id) FROM languages );
SELECT T1.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.language_id WHERE T2.country_id NOT IN ( SELECT country_id FROM official_languages )
SELECT T1.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.language_id WHERE T2.country_id NOT IN ( SELECT country_id FROM official_languages )
SELECT country FROM countries WHERE official_language IS NULL;
SELECT country FROM countries WHERE official_language IS NULL;
SELECT T1.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.language_id WHERE T2.score > 95 INTERSECT SELECT T1.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.language_id WHERE T2.score < 90
SELECT T1.name FROM languages AS T1 INNER JOIN countries AS T2 ON T1.id = T2.language_id WHERE T2.overall_score > 95 OR T2.overall_score < 90;
SELECT T1.country, T1.city FROM addresses AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id
SELECT T1.countries, T1.cities FROM addresses AS T1 INNER JOIN countries AS T2 ON T1.country_id = T2.id
SELECT T1.state FROM properties AS T1 INNER JOIN states AS T2 ON T1.state_id = T2.id WHERE T1.property_type IN ('C', 'R', 'E', 'A', 'T');
SELECT T1.state FROM properties AS T1 INNER JOIN states AS T2 ON T1.state_id = T2.id WHERE T1.id IN ( SELECT id FROM properties WHERE state LIKE '%New York%' )
SELECT description FROM features WHERE name = 'rooftop';
SELECT description FROM features WHERE name = 'rooftop';
SELECT T1.feature_name, T2.description FROM features AS T1 INNER JOIN properties AS T2 ON T1.id = T2.feature_id GROUP BY T1.feature_name ORDER BY COUNT(T2.property_id) DESC LIMIT 1;
SELECT T1.feature_name, T2.description FROM features AS T1 INNER JOIN properties AS T2 ON T1.id = T2.feature_id GROUP BY T1.feature_name ORDER BY COUNT(T2.property_id) DESC LIMIT 1;
SELECT MIN(T1.rooms) FROM properties AS T1 INNER JOIN rooms AS T2 ON T1.id = T2.property_id
SELECT MIN(T1.room_count) FROM properties AS T1 INNER JOIN rooms AS T2 ON T1.id = T2.property_id
SELECT COUNT(DISTINCT property_id) FROM properties WHERE parking_lot_id IN (SELECT id FROM parking_lots) OR garage_id IN (SELECT id FROM garages);
SELECT COUNT(*) FROM properties WHERE id IN ( SELECT property_id FROM parking_lot UNION SELECT property_id FROM garage );
SELECT category FROM users WHERE description LIKE '%Mother%'
SELECT category FROM users WHERE description LIKE '%Mother%'
SELECT T1.first_name FROM users AS T1 INNER JOIN properties AS T2 ON T1.id = T2.user_id GROUP BY T1.id ORDER BY COUNT(T2.property_id) DESC LIMIT 1;
SELECT T1.first_name FROM users AS T1 INNER JOIN properties AS T2 ON T1.id = T2.user_id GROUP BY T1.first_name ORDER BY COUNT(T2.property_id) DESC LIMIT 1;
SELECT AVG(VARCHAR(8) * 1) FROM properties WHERE VARCHAR(7) = 'garden'
SELECT AVG(VARCHAR(8) + VARCHAR(10)) FROM properties
SELECT T2.city FROM properties AS T1 INNER JOIN features AS T2 ON T1.id = T2.property_id WHERE T2.name IN ('swimming pool')
SELECT DISTINCT T2.city FROM properties AS T1 INNER JOIN features AS T2 ON T1.id = T2.property_id WHERE T2.feature_name IN ('swimming pool')
SELECT id, price FROM properties ORDER BY price LIMIT 1;
SELECT property_id, MIN(requested_price) FROM properties WHERE type = 'INTRODUCTION' GROUP BY property_id;
SELECT AVG(T1.rooms) FROM properties AS T1 INNER JOIN rooms AS T2 ON T1.id = T2.property_id
SELECT AVG(T1.rooms) FROM properties AS T1 INNER JOIN rooms AS T2 ON T1.property_id = T2.property_id
SELECT COUNT(DISTINCT room_size) FROM rooms;
SELECT COUNT(DISTINCT room_size) FROM rooms;
SELECT s.id, s.search FROM searches AS s JOIN users AS u ON s.user_id = u.id GROUP BY s.user_id HAVING COUNT(s.id) > 1;
SELECT s.id, s.search_sequence FROM searches AS s JOIN users AS u ON s.user_id = u.id GROUP BY s.user_id HAVING COUNT(s.id) >= 2;
SELECT MAX(search_time) FROM searches;
SELECT MAX(search_time) FROM searches;
SELECT content FROM user_searches ORDER BY content DESC;
SELECT search_string, timestamp FROM user_searches ORDER BY search_string DESC;
SELECT DISTINCT T1.zip_code FROM properties AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.id WHERE T2.num_properties > 2;
SELECT DISTINCT T1.zip_code FROM properties AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.user_id WHERE T2.num_properties <= 2;
SELECT s.category, u.user_id FROM searches s JOIN users u ON s.user_id = u.id WHERE s.searches_count = 1;
SELECT T1.id, T3.category_code FROM searches AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.id INNER JOIN search_details AS T3 ON T1.id = T3.search_id WHERE T3.num_searches = 1;
SELECT age_category FROM users WHERE id IN (SELECT min(id) FROM searches);
SELECT MIN(age_category) FROM users WHERE id IN (SELECT user_id FROM search_history)
SELECT login_name FROM users WHERE age_category IN ('senior', 'senior') ORDER BY first_name;
SELECT login_name FROM users WHERE age_category IN ('senior', 'senior') ORDER BY first_name;
SELECT COUNT(T1.id) FROM searches AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.id WHERE T2.searches INTIGGER NOT NULL;
SELECT COUNT(T1.id) FROM searches AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.id WHERE T2.role IN ('buyer', 'seller') AND T1.search_type IN ('search', 'search_detail', 'search_stringe', 'search_detailed', 'search_string', 'search_prime_key', 'search_category', 'search_date_time', 'search_date_time_index', 'search_date_time_index2', 'search_date_time_index3', 'search_date_time_index4')
SELECT registration_date FROM users WHERE login_name = 'ratione';
SELECT registration_date FROM users WHERE login_name = 'ratione';
SELECT first_name, middle_name, last_name, login_name FROM users WHERE seller = 1;
SELECT first_name, middle_name, last_name, login_name FROM users WHERE user_type = 'seller';
SELECT T1.building, T1.street, T1.city FROM TABLE AS T1 INNER JOIN VARCHAR(8) AS T2 ON T1.id = T2.id WHERE T2.name IN ('Senior Citizens')
SELECT T1.building, T2.street, T3.city FROM buildings AS T1 INNER JOIN addresses AS T2 ON T1.id = T2.address_id INNER JOIN cities AS T3 ON T2.city_id = T3.id WHERE T2.is_senior = 1;
SELECT COUNT(DISTINCT T2.property_id) FROM T1 AS T1 INNER JOIN T2 ON T1.id = T2.feature_id WHERE T2.feature_count >= 2;
SELECT COUNT(DISTINCT p.property_id) FROM properties p JOIN property_types pt ON p.property_type_id = pt.property_type_id WHERE pt.property_type_name IN ('INTEGRENER', 'NOT INTEGRENER') AND p.feature_count >= 2;
SELECT COUNT(*) FROM photos;
SELECT COUNT(*) FROM property_photos WHERE property_id IN ( SELECT id FROM properties );
SELECT COUNT(*) , u.id FROM users u JOIN properties p ON u.id = p.user_id JOIN property_types pt ON p.property_type_id = pt.id WHERE pt.name IN ('owner', 'renter') GROUP BY u.id;
SELECT T1.user_id, COUNT(T2.property_id) FROM users AS T1 INNER JOIN property_owners AS T2 ON T1.user_id = T2.user_id INNER JOIN property_photos AS T3 ON T2.property_id = T3.property_id WHERE T3.property_id IS NOT NULL GROUP BY T1.user_id
SELECT SUM(T1.price) FROM properties AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.user_id WHERE T2.user_type IN ('single_mother', 'student')
SELECT SUM(T1.price) FROM properties AS T1 INNER JOIN users AS T2 ON T1.user_id = T2.id WHERE T2.gender IN ('single', 'student')
SELECT property_history_id, datestamp, property_name FROM property_history ORDER BY datestamp;
SELECT property_id, date_stamp FROM property_history ORDER BY date_stamp;
SELECT description FROM property_types ORDER BY COUNT(*) DESC LIMIT 1;
SELECT property_type, description FROM properties ORDER BY COUNT(*) DESC LIMIT 1;
SELECT description FROM age_category WHERE code = 'Over 60'
SELECT category_description FROM age_category WHERE category_name = 'Over 60';
SELECT V.ARMATURE, COUNT(V.VAR_SIZE) FROM VARIATION AS V INNER JOIN ROOMS AS R ON V.ROOM_ID = R.ROOM_ID GROUP BY V.VAR_SIZE;
SELECT COUNT(r.id) ,  r.size FROM rooms AS r GROUP BY r.size;
SELECT T1.country FROM users AS T1 INNER JOIN addresses AS T2 ON T1.id = T2.user_id WHERE T1.first_name = 'Robbie';
SELECT T1.country FROM users AS T1 INNER JOIN addresses AS T2 ON T1.id = T2.user_id WHERE T1.first_name = 'Robbie';
SELECT T1.first_name, T1.middle_name, T1.last_name FROM users AS T1 INNER JOIN properties AS T2 ON T1.user_id = T2.owner_id WHERE T2.property_type_id IN ( SELECT property_type_id FROM properties WHERE property_type_name = 'owner' )
SELECT T1.full_name FROM users AS T1 INNER JOIN properties AS T2 ON T1.user_id = T2.owner_id WHERE T2.property_id IN ( SELECT property_id FROM properties WHERE owner_type = 'INTEGNER' AND is_not_null = 0 )
SELECT T2.search_content FROM users AS T1 INNER JOIN properties AS T2 ON T1.user_id = T2.user_id WHERE T2.property_type_id NOT IN ( SELECT property_type_id FROM properties )
SELECT search_string FROM users WHERE property_id IN (SELECT id FROM properties WHERE owner_id IS NULL)
SELECT T1.last_name, T1.id FROM users AS T1 INNER JOIN properties AS T2 ON T1.id = T2.user_id GROUP BY T1.id HAVING COUNT(T2.property_id) >= 2 AND T2.searches < 2
SELECT T1.last_name, T1.id FROM users AS T1 INNER JOIN property_owners AS T2 ON T1.id = T2.user_id WHERE T2.property_id IN ( SELECT property_id FROM property_owners GROUP BY property_id HAVING COUNT(property_id) >= 2 ) AND T1.search_count <= 2;
SELECT COUNT(*) FROM bike WHERE weight > 780;
SELECT name, weight FROM bike WHERE price ORDER BY price ASC;
SELECT heat, name, nation FROM cyclists
SELECT MAX(w) ,  MIN(w) FROM bike;
SELECT AVG(p.price) FROM product p JOIN material m ON p.material_id = m.id WHERE m.name = 'Carbon CC';
SELECT name, result FROM cyclists WHERE country != 'Russia'
SELECT DISTINCT b.id, p.name FROM bikes AS b JOIN products AS p ON b.id = p.bike_id WHERE p.year > 2015;
SELECT T1.id, T2.name FROM RACING_BIKES AS T1 INNER JOIN CYCLISTS AS T2 ON T1.bike_id = T2.bike_id GROUP BY T1.id HAVING COUNT(T2.cyclist_id) >= 4;
SELECT c.yclist_id, c.name FROM cyclist AS c JOIN bike AS b ON c.yclist_id = b.yclist_id GROUP BY c.yclist_id ORDER BY COUNT(b.yclist_id) DESC LIMIT 1;
SELECT DISTINCT T1.name FROM Cycles AS T1 INNER JOIN Riders AS T2 ON T1.id = T2.cyclist_id WHERE T2.country IN ('Russia', 'Great Britain')
SELECT COUNT(DISTINCT heat) FROM cyclists;
SELECT COUNT(*) FROM cyclists WHERE id IN (SELECT bike_id FROM bikes WHERE purchase_year > 2015)
SELECT DISTINCT T1.name FROM T2 AS T1 INNER JOIN T3 AS T2 ON T1.id = T2.cyclist_id INNER JOIN T4 AS T3 ON T3.id = T2.race_id WHERE T3.result < '4:21.558'
SELECT T1.name, T2.price FROM bikes AS T1 INNER JOIN cyclists AS T2 ON T1.id = T2.bike_id WHERE T2.cyclist_id IN ( SELECT cyclist_id FROM cyclists WHERE name = 'Bradley Wiggins' ) AND T2.cyclist_id IN ( SELECT cyclist_id FROM cyclists WHERE name = 'Antonio Tauler' );
SELECT name, nation, result FROM cyclists WHERE id NOT IN (SELECT id FROM bikes)
SELECT T1.name FROM bike AS T1 INNER JOIN material AS T2 ON T1.id = T2.bike_id WHERE T2.material LIKE '%fiber%'
SELECT COUNT(bike_id) FROM cyclists WHERE id IN (SELECT cyclist_id FROM bikes);
SELECT T2.flavor FROM Cakes AS T1 INNER JOIN Flavors AS T2 ON T1.id = T2.id ORDER BY T1.price DESC LIMIT 1;
SELECT id, flavor FROM cakes WHERE price = ( SELECT MAX(price) FROM cakes );
SELECT MIN(price) FROM cookies WHERE flavor = 'flavor' AND type = 'TEXXT';
SELECT id, flavor FROM cookies WHERE price = ( SELECT MIN(price) FROM cookies );
SELECT id FROM goods WHERE flavor = 'apple';
SELECT id FROM flavors WHERE name = 'apple';
SELECT id FROM goods WHERE price < 3;
SELECT id FROM goods WHERE price < 3;
SELECT DISTINCT T1.id FROM customers AS T1 INNER JOIN orders AS T2 ON T1.id = T2.customer_id WHERE T2.item_name IN ('Cake', 'Cake with lemon flavor')
SELECT DISTINCT c.id FROM customers c JOIN orders o ON c.id = o.customer_id JOIN order_items oi ON o.id = oi.order_id WHERE oi.product_name = 'lemon flavored cake';
SELECT COUNT(cust_id) FROM orders WHERE food_id IN ( SELECT food_id FROM foods );
SELECT COUNT(c.id) FROM customers c JOIN orders o ON c.id = o.customer_id JOIN order_items oi ON o.id = oi.order_id JOIN foods f ON oi.food_id = f.id GROUP BY f.name
SELECT customers.id FROM customers JOIN receipts ON customers.id = receipts.customer_id GROUP BY customers.id HAVING COUNT(receipts.id) >= 15;
SELECT customer_id FROM receipts GROUP BY customer_id HAVING COUNT(receipt_id) >= 15;
SELECT T1.last_name FROM customers AS T1 INNER JOIN bakery AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(T1.customer_id) > 10;
SELECT T1.last_name FROM customers AS T1 INNER JOIN bakery_visits AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(T2.visit_id) > 10;
SELECT COUNT(DISTINCT T1.type) FROM Cake AS T1 INNER JOIN Type AS T2 ON T1.type_id = T2.id;
SELECT COUNT(DISTINCT T1.type) FROM Cake AS T1 INNER JOIN Type AS T2 ON T1.type = T2.id;
SELECT flavor FROM Croissant
SELECT flavor FROM croissant
SELECT DISTINCT items FROM orders WHERE customer_id = 15;
SELECT DISTINCT items FROM customer WHERE id = 15;
SELECT AVG(price), MAX(price), MIN(price) FROM foods GROUP BY type;
SELECT AVG(price), MIN(price), MAX(price) FROM foods
SELECT receipt_number FROM receipts WHERE cake = 1 AND cookie = 1;
SELECT T1.receipt_number FROM Receipt AS T1 INNER JOIN Items AS T2 ON T1.receipt_id = T2.receipt_id WHERE T2.item_name IN ('Cake', 'Cookies') GROUP BY T1.receipt_number HAVING COUNT(T2.item_name) = 2;
SELECT DISTINCT r.receipt_number FROM receipts r JOIN customers c ON r.customer_id = c.customer_id WHERE c.last_name = 'LOGAN' AND r.item = 'Croissant';
SELECT T1.receipt_number FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customer_id = T2.customer_id INNER JOIN receipts AS T3 ON T2.order_id = T3.order_id WHERE T1.last_name = 'Logan' AND T3.item = 'croissant';
SELECT T1.receipt_number, T2.date FROM receipts AS T1 INNER JOIN receipt_items AS T2 ON T1.receipt_id = T2.receipt_id ORDER BY T2.price DESC LIMIT 1;
SELECT T1.receipt_number, T2.date FROM receipts AS T1 INNER JOIN receipt_items AS T2 ON T1.receipt_id = T2.receipt_id ORDER BY T2.cost DESC LIMIT 1;
SELECT item FROM purchases GROUP BY item ORDER BY COUNT(item) LIMIT 1;
SELECT item FROM purchases GROUP BY item ORDER BY COUNT(item) LIMIT 1;
SELECT COUNT(goods_id) FROM goods WHERE food_type IN ('g', 'o', 'd')
SELECT COUNT(T1.food_type), T2.good_name FROM goods AS T1 INNER JOIN foods AS T2 ON T1.food_id = T2.id GROUP BY T1.food_type;
SELECT AVG(price) FROM orders GROUP BY food_type;
SELECT AVG(price) FROM orders
SELECT id FROM goods WHERE flavor = 'Apricot' AND price < 5;
SELECT id FROM goods WHERE flavor = 'Apricot' AND price < 5;
SELECT flavor FROM cakes WHERE price > 10;
SELECT flavor FROM cakes WHERE price > 10;
SELECT DISTINCT id, price FROM goods WHERE price < (SELECT AVG(price) FROM goods)
SELECT DISTINCT id, price FROM goods WHERE price < (SELECT AVG(price) FROM goods);
SELECT DISTINCT T1.id FROM goods AS T1 INNER JOIN T2 AS T3 ON T1.id = T3.id WHERE T3.name = 'Tart' AND T1.price > ( SELECT AVG(price) FROM goods WHERE name = 'Tart' );
SELECT DISTINCT T1.id FROM goods AS T1 JOIN TART AS T2 ON T1.id = T2.good_id WHERE T1.price < ( SELECT MIN(price) FROM TART );
SELECT DISTINCT r.receipt_number FROM receipts r JOIN details d ON r.receipt_number = d.receipt_number WHERE d.price > 13;
SELECT DISTINCT r.receipt_number FROM receipts r JOIN items i ON r.id = i receipt_id WHERE i.price > 13;
SELECT date FROM customers WHERE total > 15
SELECT T1.date FROM orders AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.total_cost > 15;
SELECT id FROM goods WHERE id LIKE '%APP%'
SELECT id FROM goods WHERE id LIKE '%APP%'
SELECT good_id, price FROM goods WHERE id LIKE '%70%'
SELECT id, price FROM goods WHERE id LIKE '%70%'
SELECT last_name FROM customers ORDER BY last_name;
SELECT last_name FROM customers ORDER BY last_name;
SELECT id FROM good ORDER BY id;
SELECT DISTINCT good_id FROM orders
SELECT * FROM receipts WHERE flavor = 'apple' OR customer_id = 12
SELECT r.receipt_number FROM receipts AS r JOIN customers AS c ON r.customer_id = c.id WHERE r.flavor IN ('apple', 'fruit') OR c.id = 12
SELECT T1.date, MAX(T2.date) FROM receipts AS T1 INNER JOIN receipts AS T2 ON T1.id = T2.id WHERE T1.id != T2.id GROUP BY T1.id;
SELECT receipt_number, date FROM receipts ORDER BY date DESC LIMIT 1;
SELECT * FROM receipts WHERE date = (SELECT MIN(date) FROM receipts) OR good_with_price > 10
SELECT receipt_number FROM receipts WHERE price > 10 OR date = ( SELECT MIN(date) FROM receipts );
SELECT id FROM Cookie WHERE price BETWEEN 3 AND 7 UNION SELECT id FROM Cake WHERE price BETWEEN 3 AND 7;
SELECT id FROM Cookies WHERE price BETWEEN 3 AND 7 UNION SELECT id FROM Cakes WHERE price BETWEEN 3 AND 7;
SELECT T1.first_name, T1.last_name FROM customers AS T1 INNER JOIN visits AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.visit_date ASC LIMIT 1;
SELECT T1.full_name, MIN(T2.visit_date) FROM customers AS T1 INNER JOIN visits AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY visit_date ASC LIMIT 1;
SELECT AVG(price) FROM goods WHERE flavor IN ('blackberry', 'blueberry');
SELECT AVG(price) FROM goods WHERE flavor IN ('blackberry', 'blueberry');
SELECT MIN(price) FROM goods WHERE flavor = 'cheese';
SELECT MIN price FROM goods WHERE flavor = 'cheese';
SELECT AVG(price), MIN(price), MAX(price) FROM goods GROUP BY flavor ORDER BY flavor;
SELECT MAX(price), MIN(price), AVG(price) FROM goods GROUP BY flavor ORDER BY flavor;
SELECT MIN(price), MAX(price) FROM goods GROUP BY food_type ORDER BY food_type;
SELECT MIN(price), MAX(price) FROM food ORDER BY name;
SELECT T1.date, COUNT(T2.id) FROM receipts AS T1 INNER JOIN payments AS T2 ON T1.date = T2.date GROUP BY T1.date ORDER BY COUNT(T2.id) DESC LIMIT 3;
SELECT T1.date FROM receipts AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.id GROUP BY T1.date ORDER BY COUNT(T1.receipt_number) DESC LIMIT 3;
SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT customer_id, COUNT(*) FROM purchases GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT customers) FROM visits WHERE date = (SELECT MIN(date) FROM visits);
SELECT COUNT(DISTINCT date) ,  COUNT(*) FROM receipts WHERE customer_id IN (SELECT id FROM customers)
SELECT T1.first_name, T1.last_name FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.product_id IN ( SELECT product_id FROM products WHERE name = 'Apple flavor Tart' )
SELECT T1.full_name FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customer_id = T2.customer_id INNER JOIN order_items AS T3 ON T2.order_id = T3.order_id WHERE T3.product_name = 'Apple flavored Tart'
SELECT T1.id FROM Cookies AS T1 INNER JOIN Croissants AS T2 ON T1.price > T2.price
SELECT c.id FROM cookes c JOIN croissants cr ON c.id = cr.croissant_id WHERE c.price > ( SELECT MIN(price) FROM croissants );
SELECT T1.id FROM Cakes AS T1 JOIN Prices AS T2 ON T1.id = T2.cake_id WHERE T2.price >= (SELECT AVG(price) FROM Prices);
SELECT T1.id FROM Cakes AS T1 INNER JOIN Tarts AS T2 ON T1.price >= (SELECT AVG(price) FROM Tarts)
SELECT id FROM goods WHERE price > (SELECT AVG(price) FROM goods) * 2;
SELECT id FROM goods WHERE price > (SELECT AVG(price) FROM goods) * 2;
SELECT id, flavor, type FROM goods ORDER BY price;
SELECT id, flavor, food_type FROM goods ORDER BY price;
SELECT id, flavor FROM Cakes ORDER BY flavor;
SELECT id, flavor FROM cakes ORDER BY flavor;
SELECT * FROM items WHERE flavor = 'chocolate' AND quantity < 10;
SELECT items FROM purchases WHERE flavor = 'chocolate' GROUP BY items HAVING COUNT(*) <= 10;
SELECT flavor FROM Cake EXCEPT SELECT flavor FROM Tart;
SELECT flavor FROM cakes WHERE flavor NOT IN (SELECT flavor FROM tart)
SELECT goods FROM ingredients GROUP BY goods ORDER LIMIT 3;
SELECT item_name FROM ingredients GROUP BY item_name ORDER BY COUNT(ingredient_id) DESC LIMIT 3;
SELECT customer_id FROM customers WHERE total_spent > 150;
SELECT id FROM customers WHERE total_spent > 150;
SELECT c.id FROM customers c JOIN orders o ON c.id = o.customer_id JOIN order_items oi ON o.id = oi.order_id JOIN goods g ON oi.good_id = g.id GROUP BY g.id HAVING AVG(oi.price) > 5;
SELECT c.id FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.id HAVING AVG(o.total) > 5
SELECT date FROM sales WHERE SUM(price) > 100
SELECT T1.date FROM sales AS T1 INNER JOIN receipts AS T2 ON T1.id = T2.id WHERE T2.total_amount > 100
SELECT COUNT(*) FROM driver
SELECT COUNT(DISTINCT driver_id) FROM drivers
SELECT COUNT(DISTINCT T1.make) FROM Driver AS T1 INNER JOIN Points AS T2 ON T1.driver_id = T2.driver_id WHERE T2.points > 150 GROUP BY T1.make;
SELECT COUNT(DISTINCT T1.make), T1.make FROM Driver AS T1 INNER JOIN Points AS T2 ON T1.driver_id = T2.driver_id WHERE T2.points > 150 GROUP BY T1.make
SELECT AVG(T1.age) FROM Driver AS T1 INNER JOIN Make AS T2 ON T1.make_id = T2.id GROUP BY T2.name
SELECT AVG(age) ,  make FROM driver GROUP BY make
SELECT AVG Laps FROM Driver WHERE Age < 20;
SELECT AVG(Laps) FROM Driver WHERE Age < 20;
SELECT T1.name, T2.name FROM Team AS T1 INNER JOIN Manager AS T2 ON T1.team_id = T2.team_id INNER JOIN Sponsor AS T3 ON T1.team_id = T3.team_id ORDER BY T3.car_owner
SELECT T1.name AS manager, T2.name AS sponsor FROM team AS T1 INNER JOIN team_member AS T2 ON T1.id = T2.team_id INNER JOIN car_owner AS T3 ON T2.car_owner_id = T3.id ORDER BY T3.name;
SELECT make FROM team GROUP BY make HAVING COUNT(team_id) > 1;
SELECT make FROM teams WHERE id IN (SELECT team_id FROM teams) GROUP BY make HAVING COUNT(team_id) > 1;
SELECT T1.make FROM teams AS T1 INNER JOIN car_owners AS T2 ON T1.team_id = T2.team_id WHERE T2.owner = 'Buddy Arrington';
SELECT make FROM team WHERE car_owner = 'Buddy Arrington';
SELECT MAX(points) FROM driver, race, county WHERE driver.id = race.driver_id AND race.county_id = county.id; SELECT MIN(points) FROM driver, race, county WHERE driver.id = race.driver_id AND race.county_id = county.id;
SELECT MAX(Latitude), MIN(Latitude) FROM Driver
SELECT COUNT(DISTINCT driver_id) FROM drivers WHERE points < 150;
SELECT COUNT(*) FROM driver WHERE points < 150;
SELECT driver_name FROM drivers ORDER BY age ASC;
SELECT driver_name FROM driver ORDER BY age ASC;
SELECT driver_name FROM races ORDER BY points DESC
SELECT driver_id, points FROM drivers ORDER BY points DESC
SELECT T1.name, T2.country FROM driver AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id
SELECT T1.name, T2.country FROM driver AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id
SELECT MAX(T1.points) FROM T2 AS T1 INNER JOIN T3 AS T2 ON T1.country_id = T2.id WHERE T2.capital = 'Dublin'
SELECT MAX(T1.points) FROM Driver AS T1 INNER JOIN Country AS T2 ON T1.country_id = T2.id WHERE T2.capital = 'Dublin'
SELECT AVG(T1.age) FROM Country AS T1 INNER JOIN Driver AS T2 ON T1.country_id = T2.country_id WHERE T1.native_language = 'English'
SELECT AVG(T1.age) FROM Country AS T1 INNER JOIN Driver AS T2 ON T1.country_id = T2.country_id WHERE T1.language = 'English'
SELECT country FROM driver WHERE points > 150;
SELECT T1.country FROM Country AS T1 INNER JOIN Driver AS T2 ON T1.id = T2.country_id WHERE T2.points > 150
SELECT c.captial FROM country AS c JOIN driver AS d ON c.country_id = d.country_id WHERE d.driver_id IN ( SELECT MAX(driver_id) FROM driver );
SELECT T2.country, T1.capital FROM driver AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.points IS (SELECT MAX(points) FROM driver)
SELECT make, COUNT(*) FROM driver GROUP BY make;
SELECT make, COUNT(*) FROM driver GROUP BY make;
SELECT make FROM driver GROUP BY make ORDER BY COUNT(*) DESC LIMIT 1;
SELECT make FROM driver GROUP BY make ORDER BY COUNT(make) DESC LIMIT 1;
SELECT DISTINCT driver_make FROM drivers WHERE COUNT(driver_id) >= 3;
SELECT make FROM driver GROUP BY make HAVING COUNT(*) >= 3;
SELECT T1.name FROM teams AS T1 INNER JOIN drivers AS T2 ON T1.id = T2.team_id WHERE T2.driver_id IS NULL
SELECT team FROM teams WHERE id NOT IN ( SELECT driver_id FROM drivers )
SELECT country FROM drivers WHERE make IN ('Dodge', 'Chevrolet') GROUP BY country HAVING COUNT(DISTINCT driver_id) > 1;
SELECT country FROM driver WHERE make IN ('Dodge', 'Chevrolet')
SELECT SUM(points), AVG(points) FROM driver
SELECT SUM(T1.points), AVG(T2.points) FROM driver AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.race_id
SELECT country FROM driver WHERE country NOT IN ( SELECT country FROM country )
SELECT country FROM driver WHERE country NOT IN (SELECT country FROM driver)
SELECT T1.team, T2.manager, T2.sponsor FROM team AS T1 INNER JOIN driver AS T2 ON T1.id = T2.team_id ORDER BY COUNT(T2.driver_id) DESC LIMIT 1;
SELECT T1.manager, T1.sponsor FROM team AS T1 INNER JOIN driver AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY COUNT(T2.driver_id) DESC LIMIT 1;
SELECT T1.team, T2.manager, T2.car_owner FROM team AS T1 INNER JOIN driver AS T2 ON T1.id = T2.team_id WHERE T2.driver_id IN ( SELECT driver_id FROM driver GROUP BY driver_id HAVING COUNT(*) >= 2 )
SELECT T1.manager, T2.car_owner FROM teams AS T1 INNER JOIN drivers AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id HAVING COUNT(T2.driver_id) >= 2
SELECT COUNT(*) FROM institutions;
SELECT COUNT(*) FROM institutions;
SELECT name FROM institution ORDER BY name ASC;
SELECT name FROM institution ORDER BY name;
SELECT name FROM institution ORDER BY founded_year ASC;
SELECT institution_name FROM institutions ORDER BY founded_year;
SELECT city, province FROM institutions
SELECT city, province FROM institutions
SELECT MAX(enrollment) FROM institutions, institutions_teachers AS T1 INNER JOIN institutions_teacher_id AS T2 ON T1.id = T2.institution_id WHERE T2.teacher_id IN ( SELECT teacher_id FROM institutions_teacher_id );
SELECT MAX(enrollment) , MIN(enrollment) FROM institution
SELECT affiliation FROM institutions WHERE city != 'Vancouver';
SELECT affiliation FROM institutions WHERE city != 'Vancouver'
SELECT stadium FROM institutions ORDER BY capacity DESC;
SELECT stadium FROM institutions ORDER BY capacity DESC;
SELECT s.stadium FROM institution i JOIN stadium s ON i.id = s.institution_id ORDER BY i.enrollment DESC LIMIT 1;
SELECT T1.stadium FROM institution AS T1 INNER JOIN enrollment AS T2 ON T1.id = T2.institution_id ORDER BY T2.enrollment DESC LIMIT 1;
SELECT name, nickname FROM institutions
SELECT institution_name, nickname FROM institutions
SELECT T1.nickname FROM institutions AS T1 INNER JOIN enrollment AS T2 ON T1.id = T2.institution_id ORDER BY T2.enrollment ASC LIMIT 1;
SELECT T1.nickname FROM institutions AS T1 INNER JOIN enrollment AS T2 ON T1.id = T2.institution_id ORDER BY T2.enrollment ASC LIMIT 1;
SELECT institution_name FROM championships ORDER BY count(*) DESC
SELECT institution_name FROM championships ORDER BY count(*) DESC;
SELECT institution FROM championships WHERE id IN ( SELECT id FROM institutions )
SELECT T1.name FROM institutions AS T1 INNER JOIN championships AS T2 ON T1.id = T2.institution_id GROUP BY T1.name HAVING COUNT(T2.championship_id) >= 1;
SELECT COUNT(*) FROM institutions WHERE affiliation = 'public' AND type = 'championship';
SELECT COUNT(T1.championship) FROM institutions AS T1 INNER JOIN affiliations AS T2 ON T1.id = T2.institution_id WHERE T2.affiliation = 'Public';
SELECT affiliation, COUNT(institution) FROM institutions GROUP BY affiliation;
SELECT affiliation, COUNT(*) FROM institutions GROUP BY affiliation;
SELECT affiliation FROM institutions GROUP BY affiliation ORDER BY COUNT(affiliation) DESC LIMIT 1;
SELECT affiliation FROM institutions GROUP BY affiliation ORDER BY COUNT(affiliation) DESC LIMIT 1;
SELECT DISTINCT YEAR FROM institutions WHERE COUNT(YEAR) > 1;
SELECT year, COUNT(*) FROM institutions GROUP BY year HAVING COUNT(*) > 1;
SELECT nickname FROM institutions ORDER BY capacity DESC;
SELECT nickname FROM institutions ORDER BY capacity DESC;
SELECT COUNT(*) FROM institutions WHERE city IN ('Vancouver', 'Calgary');
SELECT * FROM institution WHERE city IN ('Vancouver', 'Calgary')
SELECT province FROM institutions WHERE founded_before = '1920' AND founded_after = '1950';
SELECT province FROM institutions WHERE founded_before = '1920' AND founded_after = '1950';
SELECT COUNT(DISTINCT T2.province) FROM institutions AS T1 INNER JOIN provinces AS T2 ON T1.province = T2.name
SELECT COUNT(DISTINCT province) FROM institutions
SELECT * FROM warehouses;
SELECT * FROM warehouses;
SELECT DISTINCT T2.content FROM CREATETABLE AS T1 INNER JOIN TABLE AS T2 ON T1.id = T2.id WHERE T2.city = 'New York';
SELECT T1.box_id, T2.contents FROM boxes AS T1 INNER JOIN contents AS T2 ON T1.box_id = T2.box_id WHERE T2.null = 'N' AND T2.null IN ('NULL', 'NEW YORK');
SELECT T1.box, T2.value FROM boxes AS T1 INNER JOIN contents AS T2 ON T1.id = T2.box WHERE T2.value > 150;
SELECT value FROM boxes WHERE value > 150;
SELECT T1.warehouse_code, AVG(T2.value) FROM boxes AS T1 INNER JOIN warehouse_codes AS T2 ON T1.warehouse_code = T2.code GROUP BY T1.warehouse_code;
SELECT AVG(T1.boxes) FROM ( SELECT T2.boxes FROM warehouses AS T2 INNER JOIN boxes AS T1 ON T2.warehouse = T1.warehouse )
SELECT AVG(CASE WHEN TblName = 'boxes' THEN value ELSE NULL END) , SUM(CASE WHEN TblName = 'boxes' THEN value ELSE NULL END) FROM information_schema.tables;
SELECT AVG(value) ,  SUM(value) FROM boxes;
SELECT AVG(capacity) ,  SUM(capacity) FROM warehouses;
SELECT AVG(capacity), SUM(capacity) FROM warehouses;
SELECT AVG(CASE WHEN Tabele = 'C' THEN C ELSE NULL END) AS avg_c, MAX(CASE WHEN Tabele = 'C' THEN C ELSE NULL END) AS max_c FROM Table WHERE Tabele IN ('C', 'R', 'B') GROUP BY Tabele;
SELECT AVG(content_type) AS avg_content_type, MAX(content_type) AS max_content_type FROM boxes GROUP BY content_type;
SELECT content FROM boxes WHERE total_value = ( SELECT MAX(total_value) FROM boxes );
SELECT MAX(C) FROM BOXES;
SELECT AVG(boxes) FROM table;
SELECT AVG(boxes) FROM tables;
SELECT DISTINCT contents FROM boxes;
SELECT DISTINCT T1.box_id FROM boxes AS T1 INNER JOIN contents AS T2 ON T1.id = T2.box_id;
SELECT COUNT(DISTINCT T1.content) FROM boxes AS T1 INNER JOIN contents AS T2 ON T1.id = T2.box_id;
SELECT COUNT(DISTINCT T1.box_id) FROM boxes AS T1 INNER JOIN contents AS T2 ON T1.id = T2.box_id;
SELECT DISTINCT location FROM warehouses;
SELECT DISTINCT location FROM warehouses;
SELECT box_code FROM boxes WHERE warehouse IN ('Chicago', 'New York')
SELECT T2.code FROM warehouses AS T1 INNER JOIN boxes AS T2 ON T1.code = T2.warehouse_code WHERE T1.city IN ('Chicago', 'New York')
SELECT SUM(F(kEY) FROM warehouses WHERE F(LOCATION) IN ('Chicago', 'New York')
SELECT SUM(T1.value) FROM boxes AS T1 INNER JOIN locations AS T2 ON T1.id = T2.box_id WHERE T2.city IN ('Chicago', 'New York')
SELECT T1.contents FROM contents AS T1 INNER JOIN warehouses AS T2 ON T1.warehouse_id = T2.id WHERE T2.city IN ('Chicago', 'New York')
SELECT * FROM C WHERE C.INDIGENOUS = 'TRUE' AND C.COUNTY IN ('CHICAGO', 'NEW YORK')
SELECT T2.type FROM CREATETABLE AS T1 INNER JOIN CONTENTS AS T2 ON T1.id = T2.contents_id WHERE T1.warehouse_id NOT IN (SELECT warehouse_id FROM WAREHOUSES WHERE city = 'New York')
SELECT DISTINCT c.name FROM contents c JOIN warehouses w ON c.warehouse_id = w.id WHERE w.state = 'NY' AND c.type NOT IN ('VAUNCHAR', 'FOREIGNKEY')
SELECT location FROM warehouses WHERE contents LIKE '%Rocks%' AND contents NOT LIKE '%Scissors%'
SELECT T2.location FROM boxes AS T1 INNER JOIN warehouses AS T2 ON T1.warehouse_id = T2.id WHERE T1.box_type IN ('Rocks') AND T1.box_type NOT IN ('Scissors')
SELECT warehouse FROM contents WHERE type IN ('Rocks', 'Scissors')
SELECT DISTINCT T2.warehouse FROM boxes AS T1 INNER JOIN warehouses AS T2 ON T1.warehouse = T2.warehouse WHERE T1.contents IN ('Rocks', 'Scissors')
SELECT location FROM warehouses WHERE contents IN ('Rocks', 'Scissors')
SELECT T2.location FROM boxes AS T1 INNER JOIN warehouses AS T2 ON T1.warehouse_id = T2.id WHERE T1.box_type IN ('Rocks', 'Scissors')
SELECT box_value FROM boxes ORDER BY box_value;
SELECT code, contents FROM boxes ORDER BY value;
SELECT box_code, contents FROM boxes WHERE code = ( SELECT MIN(code) FROM boxes );
SELECT box_code FROM boxes WHERE code = ( SELECT MIN(code) FROM boxes );
SELECT DISTINCT T2.value FROM boxes AS T1 INNER JOIN ( SELECT AVG(value) FROM boxes ) AS T2 ON T1.value > T2.value
SELECT T1.box, T2.value FROM boxes AS T1 JOIN ( SELECT box, AVG(value) AS avg_value FROM boxes GROUP BY box ) AS T2 ON T1.box = T2.box WHERE T2.avg_value > T1.value;
SELECT DISTINCT contents FROM types ORDER BY contents;
SELECT box FROM boxes ORDER BY box;
SELECT code FROM boxes WHERE value > ( SELECT MAX(value) FROM boxes WHERE content = 'Rocks' )
SELECT box_code FROM boxes WHERE box_code NOT IN ( SELECT box_code FROM rocks );
SELECT code FROM boxes WHERE value > ( SELECT MAX(value) FROM boxes WHERE content = 'Scissors' )
SELECT box_code, content FROM boxes WHERE value > (SELECT MAX(value) FROM boxes WHERE name = 'Scissors')
SELECT SUM(CASE WHEN T2.CAPACITY = (SELECT MAX(CAPACITY) FROM TABLES) THEN T1.VALUE END) AS total_value FROM TABLES T1 INNER JOIN BOXES T2 ON T1.WAREHOUSE_ID = T2.WAREHOUSE_ID
SELECT SUM(CASE WHEN C.OVERALL_CAPACITY = (SELECT MAX(OVERALL_CAPACITY) FROM boxes) THEN C.CAPACITY END) AS total_value FROM boxes
SELECT T2.warehouse_code, AVG(T1.value) FROM boxes AS T1 INNER JOIN warehouses AS T2 ON T1.warehouse_id = T2.warehouse_id WHERE T1.value > 150 GROUP BY T2.warehouse_code;
SELECT AVG(T1.box) FROM TABLE AS T1 INNER JOIN WAREHOUSE AS T2 ON T1.warehouse = T2.code WHERE T2.referencenull = 0 AND T1.box > 150 GROUP BY T2.code
SELECT SUM(value) AS total_value, COUNT(*) AS num_boxes FROM boxes WHERE content_type IN (NULL, NULL, NULL, NULL, NULL);
SELECT SUM(T1.value) AS total_value, COUNT(T2.box_id) AS num_boxes FROM content AS T1 INNER JOIN boxes AS T2 ON T1.id = T2.content_id
SELECT SUM(capacity), AVG(capacity), MAX(capacity) FROM locations
SELECT SUM(capacity), AVG(capacity), MAX(capacity) FROM warehouses
SELECT SUM(capacity) FROM warehouses;
SELECT SUM(capacity) FROM warehouses;
SELECT T2.box_id, T1.warehouse_location, SUM(T3.price) FROM boxes AS T1 INNER JOIN warehouses AS T2 ON T1.warehouse_location = T2.warehouse_location INNER JOIN costs AS T3 ON T1.box_id = T3.box_id GROUP BY T2.warehouse_location ORDER BY SUM(T3.price) DESC LIMIT 1
SELECT MAX(box) FROM boxes WHERE warehouse IN (SELECT id FROM warehouses);
SELECT warehouse_code, COUNT(box_id) FROM boxes GROUP BY warehouse_code;
SELECT COUNT(T1.box_id) ,  T2.warehouse_id FROM boxes AS T1 INNER JOIN warehouses AS T2 ON T1.warehouse_id = T2.warehouse_id GROUP BY T2.warehouse_id;
SELECT COUNT(DISTINCT T2.location) FROM CREATE TABLE AS T1 INNER JOIN RAKE TABLE AS T2 ON T1.id = T2.rock_id;
SELECT COUNT(DISTINCT T2.boxes) FROM CREATE TABLE AS SELECT * FROM CREATABLES WHERE name = 'WAREHOUSE' AND type = 'BOXES';
SELECT box_code, city FROM CREATABLES WHERE code IN (SELECT code FROM BOXES)
SELECT T1.box_code, T2.location FROM boxes AS T1 INNER JOIN warehouses AS T2 ON T1.code = T2.code
SELECT code FROM boxes WHERE city = 'Chicago';
SELECT T2.box_code FROM warehouses AS T1 INNER JOIN boxes AS T2 ON T1.code = T2.warehouse_code WHERE T1.city = 'Chicago';
SELECT COUNT(C) FROM boxes WHERE warehouse IN (SELECT code FROM warehouses);
SELECT COUNT(T1.box_id) FROM boxes AS T1 INNER JOIN warehouses AS T2 ON T1.warehouse_id = T2.warehouse_id GROUP BY T2.warehouse_id;
SELECT COUNT(DISTINCT T2.type) FROM warehouses AS T1 INNER JOIN contents AS T2 ON T1.id = T2.warehouse_id;
SELECT COUNT(DISTINCT T2.type) FROM CREATETABLE AS T1 INNER JOIN CONTENTS AS T2 ON T1.id = T2.warehouse_id;
SELECT warehouse_code FROM warehouses WHERE capacity < (SELECT MAX(capacity) FROM warehouses);
SELECT w.code FROM warehouses AS T1 INNER JOIN boxes AS T2 ON T1.code = T2.warehouse_code WHERE T2.capacity > T2.box_count;
SELECT SUM(T1.value) FROM boxes AS T1 INNER JOIN warehouses AS T2 ON T1.warehouse_id = T2.id WHERE T2.city != 'Chicago'
SELECT SUM(T1.value) FROM locations AS T1 INNER JOIN boxes AS T2 ON T1.id = T2.location_id WHERE T1.name != 'Chicago'
SELECT name, city, state FROM universities ORDER BY name;
SELECT name, city, state FROM universities ORDER BY name;
SELECT COUNT(*) FROM universities WHERE state IN ('Illinois', 'Ohio')
SELECT COUNT(*) FROM universities WHERE state IN ('Illinois', 'Ohio')
SELECT MAX(enrollment), AVG(enrollment), MIN(enrollment) FROM universities;
SELECT MAX(enrollment), AVG(enrollment), MIN(enrollment) FROM universities;
SELECT T1.team_name FROM universities AS T1 INNER JOIN enrollments AS T2 ON T1.university_id = T2.university_id WHERE T2.enrollment > (SELECT AVG(enrollment) FROM enrollments)
SELECT T1.name FROM teams AS T1 INNER JOIN universities AS T2 ON T1.university_id = T2.university_id WHERE T2.enrollment > ( SELECT AVG(enrollment) FROM universities )
SELECT name FROM conferences WHERE home = 1;
SELECT home_conference FROM university;
SELECT conference_name, COUNT(*) FROM home_conferences GROUP BY conference_name;
SELECT COUNT(T1.university_id) FROM home_conference AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.university_id GROUP BY T1.university_id;
SELECT state FROM universities WHERE count(*) = ( SELECT MAX(count) FROM universities );
SELECT state FROM universities GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT home_conference FROM conferences WHERE avg_enrollment > 2000;
SELECT home_conference FROM conferences WHERE avg_university_enrollment > 2000;
SELECT conference FROM conferences WHERE total_enrollment = ( SELECT MIN(total_enrollment) FROM conferences );
SELECT conference_name FROM home_conferences ORDER BY enrolled_people ASC LIMIT 1;
SELECT major_name, major_code FROM major ORDER BY major_code;
SELECT name, code FROM major ORDER BY code;
SELECT T1.major, T2.rank FROM university AS T1 INNER JOIN major AS T2 ON T1.id = T2.university_id WHERE T1.name = 'Augustana College';
SELECT rank, name FROM majors;
SELECT T1.name, T2.city, T2.state FROM universities AS T1 INNER JOIN majors AS T2 ON T1.id = T2.university_id WHERE T2.rank = 1 AND T2.major_name = 'Accounting';
SELECT T1.name, T2.city, T2.state FROM majors AS T1 INNER JOIN universities AS T2 ON T1.university_id = T2.id WHERE T1.major_rank = 1 AND T1.major_name = 'Accounting';
SELECT T1.name FROM university AS T1 INNER JOIN major AS T2 ON T1.id = T2.university_id WHERE T2.rank = 1 GROUP BY T1.name ORDER BY COUNT(T2.major_id) DESC LIMIT 1;
SELECT T1.name FROM university AS T1 INNER JOIN major AS T2 ON T1.id = T2.university_id WHERE T2.rank = 1 GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT university FROM universities WHERE major NOT IN (SELECT major FROM majors WHERE rank = 1)
SELECT T1.name FROM universities AS T1 INNER JOIN majors AS T2 ON T1.id = T2.university_id WHERE T2.major_rank != 1;
SELECT T1.name FROM university AS T1 INNER JOIN major AS T2 ON T1.id = T2.university_id WHERE T2.major_name IN ('Accounting', 'Urban Education')
SELECT T1.name FROM universities AS T1 INNER JOIN majors AS T2 ON T1.id = T2.university_id WHERE T2.major_name IN ('Accounting', 'Urban Education')
SELECT T1.name, RANK() OVER (ORDER BY COUNT(T2.id) DESC) FROM universities AS T1 INNER JOIN states AS T2 ON T1.state_id = T2.id WHERE T2.name = 'Wisconsin'
SELECT T1.name, T2.rank FROM universities AS T1 INNER JOIN ranks AS T2 ON T1.id = T2.university_id WHERE T2.state = 'WI';
SELECT university FROM research_points ORDER BY research_point DESC LIMIT 1;
SELECT T1.name FROM universities AS T1 INNER JOIN research_points AS T2 ON T1.id = T2.university_id GROUP BY T1.name ORDER BY SUM(T2.research_points) DESC LIMIT 1;
SELECT name FROM universities ORDER BY reputation_points ASC;
SELECT name FROM universities ORDER BY reputation_points ASC;
SELECT T1.name FROM university AS T1 INNER JOIN major AS T2 ON T1.id = T2.university_id WHERE T2.rank >= 3;
SELECT T1.name FROM university AS T1 INNER JOIN major AS T2 ON T1.id = T2.university_id WHERE T2.ranking >= 3;
SELECT SUM(T1.enrollment) FROM universities AS T1 INNER JOIN rankings AS T2 ON T1.university_id = T2.university_id WHERE T2.rank <= 5;
SELECT COUNT(*) FROM students WHERE rank <= 5;
SELECT T1.name, T2.citation_point FROM universities AS T1 INNER JOIN reputation_points AS T2 ON T1.university_id = T2.university_id WHERE T2.reputation_point >= 3;
SELECT T1.name, T2.reputation_point FROM universities AS T1 INNER JOIN reputation_points AS T2 ON T1.university_id = T2.university_id ORDER BY T2.reputation_point DESC LIMIT 3;
SELECT state FROM universities WHERE COUNT(DISTINCT university) > 2 AND enrollment < 3000;
SELECT state FROM universities WHERE enrollment < 3000 GROUP BY state HAVING COUNT(*) > 2;
SELECT T1.title FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.id = T2.movie_id WHERE T2.rating IS NULL;
SELECT name FROM movies WHERE rating IS NULL;
SELECT name FROM movies WHERE rating = 'G';
SELECT movie FROM movies WHERE rating = 'G';
SELECT T1.title FROM movies AS T1 INNER JOIN theaters AS T2 ON T1.movie_id = T2.movie_id WHERE T2.theater_name = 'Odeon';
SELECT T1.title FROM movies AS T1 INNER JOIN theaters AS T2 ON T1.theater_id = T2.theater_id WHERE T2.name = 'Odeon';
SELECT T1.name, T2.theater FROM movies AS T1 INNER JOIN theaters AS T2 ON T1.id = T2.id
SELECT T1.name, T2.theater FROM movies AS T1 INNER JOIN theaters AS T2 ON T1.theater_id = T2.id
SELECT COUNT(*) FROM movies WHERE rating = 'G';
SELECT COUNT(*) FROM movies WHERE rating = 'G';
SELECT COUNT(DISTINCT movie) FROM theaters;
SELECT COUNT(DISTINCT movie) FROM theaters WHERE showing IN (SELECT id FROM showtimes);
SELECT COUNT(DISTINCT movie) FROM movies WHERE INTHEATER = 1;
SELECT COUNT(DISTINCT movie) FROM movies WHERE INTENT = 'PRIMARILY' AND NOT NULL
SELECT COUNT(DISTINCT theater) FROM movie_theaters;
SELECT COUNT(DISTINCT movie_theaters) FROM information_schema.tables;
SELECT rating FROM movies WHERE name LIKE '%Citizen%'
SELECT T1.rating FROM movies AS T1 INNER JOIN titles AS T2 ON T1.id = T2.movie_id WHERE T2.name LIKE '%Citizen%'
SELECT T1.name FROM cinemas AS T1 INNER JOIN movies AS T2 ON T1.id = T2.cinema_id WHERE T2.rating IN ('G', 'PG');
SELECT T1.name FROM movie_theaters AS T1 INNER JOIN showtimes AS T2 ON T1.id = T2.movie_theater_id WHERE T2.rating IN ('G', 'PG')
SELECT T1.name FROM movies AS T1 INNER JOIN cinemas AS T2 ON T1.cinema_id = T2.id WHERE T2.name IN ('Odeon', 'Imperial')
SELECT T1.title FROM movies AS T1 INNER JOIN theaters AS T2 ON T1.theater_key = T2.theater_key WHERE T2.name IN ('Odeon', 'Imperial')
SELECT T1.name FROM movies AS T1 INNER JOIN theaters AS T2 ON T1.movieid = T2.movieid WHERE T2.theatername IN ('Odeon', 'Imperial') GROUP BY T1.name HAVING COUNT(T1.movieid) > 1;
SELECT T1.movie FROM movies AS T1 INNER JOIN theaters AS T2 ON T1.id = T2.movie_id WHERE T2.name IN ('Odeon', 'Imperial') GROUP BY T1.movie HAVING COUNT(T2.name) > 1;
SELECT T1.name FROM movies AS T1 INNER JOIN theaters AS T2 ON T1.id = T2.movie_id WHERE T2.name != 'Odeon'
SELECT T1.name FROM movies AS T1 INNER JOIN theaters AS T2 ON T1.id = T2.movie_id WHERE T2.name != 'Odeon'
SELECT title FROM movies ORDER BY title;
SELECT name FROM movies ORDER BY name;
SELECT title FROM movies ORDER BY rating DESC;
SELECT name FROM movies ORDER BY rating;
SELECT T2.name FROM movies AS T1 INNER JOIN theaters AS T2 ON T1.theater_id = T2.id GROUP BY T2.id ORDER BY COUNT(T1.movie_id) DESC LIMIT 1;
SELECT T1.name FROM theaters AS T1 INNER JOIN movies AS T2 ON T1.id = T2.theater_id GROUP BY T1.id ORDER BY COUNT(T2.movie_id) DESC LIMIT 1;
SELECT T1.name FROM movies AS T1 INNER JOIN theaters AS T2 ON T1.id = T2.movie_id GROUP BY T1.name ORDER BY COUNT(T2.theater_id) DESC LIMIT 1;
SELECT T2.name FROM T1 THEATER FOR INTEGERS n, T2 MOVIES (n) WHERE (n) = ( SELECT MAX(n) FROM T1 THEATER FOR INTEGERS n )
SELECT COUNT(rating) FROM movies GROUP BY rating;
SELECT COUNT(rating) FROM movies GROUP BY rating;
SELECT COUNT(DISTINCT T1.movie_id) FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T2.rating IS NOT NULL;
SELECT COUNT(*) FROM movies WHERE rating IS NOT NULL;
SELECT T2.name FROM movies AS T1 INNER JOIN theaters AS T2 ON T1.theater_id = T2.id WHERE T1.movie_id IS NOT NULL;
SELECT T2.name FROM movies AS T1 INNER JOIN theaters AS T2 ON T1.theater_id = T2.id
SELECT T2.name FROM movie_theaters AS T1 INNER JOIN shows AS T2 ON T1.id = T2.movie_theater_id WHERE T2.showing IS NULL;
SELECT T1.name FROM cinemas AS T1 JOIN movie_theaters AS T2 ON T1.id = T2.cinema_id WHERE T2.showing IS NULL;
SELECT T2.name FROM movies AS T1 INNER JOIN theaters AS T2 ON T1.movie_id = T2.movie_id WHERE T1.rating = 'G';
SELECT T1.name FROM theaters AS T1 INNER JOIN movies AS T2 ON T1.id = T2.theater_id WHERE T2.rating IN ('G')
SELECT title FROM movies;
SELECT movie_name FROM movies
SELECT DISTINCT rating FROM ratings;
SELECT DISTINCT rating FROM movies;
SELECT * FROM movies WHERE rating IS NULL;
SELECT * FROM movies WHERE rating = 'NR' OR rating = 'UNRATED';
SELECT T1.title FROM movies AS T1 INNER JOIN showtimes AS T2 ON T1.movieid = T2.movieid WHERE T2.showtimeid NOT IN ( SELECT showtimeid FROM showtimes )
SELECT T1.name FROM movies AS T1 INNER JOIN theaters AS T2 ON T1.id = T2.movie_id WHERE T2.showing IS NULL;
SELECT MAX(package_number) FROM packages WHERE package_weight = ( SELECT MAX(package_weight) FROM packages );
SELECT T1.client FROM TABLE1 AS T1 INNER JOIN TABLE2 AS T2 ON T1.package_id = T2.package_id ORDER BY T2.weight DESC LIMIT 1;
SELECT SUM(T2.weight) FROM customer AS T1 INNER JOIN package AS T2 ON T1.id = T2.customer_id WHERE T1.name = 'Leo Wong';
SELECT SUM(T2.weight) FROM C WHERE T1.name = 'Leo Wong';
SELECT position FROM employees WHERE name = 'Amy Wong';
SELECT position FROM employees WHERE name = 'Amy Wong';
SELECT salary, position FROM employees WHERE name = 'Turanga Leela';
SELECT salary, position FROM employees WHERE name = 'Turanga Leela';
SELECT AVG(salary) FROM employee WHERE job = 'intern'
SELECT AVG(salary) FROM employees WHERE position = 'Intern'
SELECT level FROM information_schema.tables WHERE table_name = 'physician'
SELECT clearance_level FROM Clearance WHERE job_title = 'Physician'
SELECT package_number FROM packages WHERE sender = 'Leo Wong';
SELECT COUNT(*) FROM packages WHERE sender = 'Leo Wong';
SELECT package_number FROM packages WHERE name = 'Leo Wong'
SELECT package_number FROM packages WHERE name = 'Leo Wong'
SELECT package_name FROM packages WHERE sender = 'Leo Wong' OR receiver = 'Leo Wong';
SELECT DISTINCT package_number FROM packages WHERE sender = 'Leo Wong' OR receiver = 'Leo Wong';
SELECT COUNT(*) FROM packages AS p JOIN shipments AS s ON p.id = s.package_id JOIN recipients AS r ON s.recipient_id = r.id WHERE r.name = 'Ogden Wernstrom' AND p.sender_id = (SELECT id FROM recipients WHERE name = 'Leo Wong')
SELECT COUNT(*) FROM packages AS T1 INNER JOIN shipments AS T2 ON T1.id = T2.package_id INNER JOIN recipients AS T3 ON T2.recipient_id = T3.id WHERE T1.sender_name = 'Ogden Wernstrom' AND T3.name = 'Leo Wong';
SELECT package FROM packages WHERE sender = 'John Zoidfarb';
SELECT package_contents FROM packages WHERE sender = 'John Zoidfarb'
SELECT package_number, weight FROM packages WHERE client LIKE '%John%' ORDER BY weight DESC LIMIT 1;
SELECT package_number, weight FROM packages WHERE client_name LIKE '%John%' OR client_name LIKE '%john%' ORDER BY weight DESC LIMIT 1;
SELECT package_number, weight FROM packages ORDER BY weight LIMIT 3;
SELECT package_number, weight FROM packages ORDER BY weight LIMIT 3;
SELECT client_name, COUNT(*) FROM packages GROUP BY client_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.client_name, COUNT(T2.package_id) FROM client AS T1 INNER JOIN package AS T2 ON T1.client_id = T2.client_id GROUP BY T1.client_name ORDER BY COUNT(T2.package_id) DESC LIMIT 1;
SELECT client, COUNT(*) FROM packages GROUP BY client ORDER BY COUNT(*) LIMIT 1;
SELECT MIN(packages) ,  name FROM packages WHERE numbe = '1'
SELECT T1.client_name FROM packages AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.id GROUP BY T1.client_id HAVING COUNT(T1.package_id) > 1
SELECT DISTINCT c.client_name FROM client AS c JOIN package AS p ON c.client_id = p.client_id GROUP BY c.client_name HAVING COUNT(p.package_id) > 1;
SELECT coordinates FROM planet WHERE name = 'Mars';
SELECT coordinates FROM planet WHERE name = 'Mars';
SELECT name, coordinates FROM Planet ORDER BY name;
SELECT name, coordinates FROM planet ORDER BY name;
SELECT shipmentID FROM Shipment WHERE managerID IN (SELECT ID FROM Employee WHERE name = 'Phillip J. Fry')
SELECT shipmentID FROM deliveries WHERE manager = 'Phillip J Fry';
SELECT shipment_date FROM shipments;
SELECT shipment_date FROM shipments;
SELECT shipment_id FROM shipments WHERE planet = 'Mars';
SELECT shipment_id FROM shipments WHERE planet_id = (SELECT id FROM planets WHERE name = 'Mars')
SELECT shipment_id FROM shipments WHERE planet = 'Mars' AND manager = 'Turanga Leela';
SELECT s.shipment_id FROM shipments s JOIN employees e ON s.employee_id = e.employee_id WHERE e.name = 'Turanga Leela' AND s.planet = 'Mars';
SELECT DISTINCT s.shipment_id FROM Shipment s JOIN Planet p ON s.planet_id = p.id JOIN Manager m ON s.manager_id = m.id WHERE p.name = 'Mars' OR m.name = 'Turanga Leela';
SELECT s.shipment_id FROM shipments s JOIN employees e ON s.employee_id = e.employee_id WHERE e.name = 'Turanga Leela' AND s.planet = 'Mars';
SELECT T1.name, SUM(T2.shipment_id) FROM planet AS T1 INNER JOIN shipment AS T2 ON T1.id = T2.planet_id GROUP BY T1.name;
SELECT COUNT(*) FROM shipments AS sh JOIN planet AS pl ON sh.planetID = pl.ID
SELECT planet FROM shipments GROUP BY planet ORDER BY COUNT(planet) DESC LIMIT 1;
SELECT p.name FROM shipments s JOIN planet p ON s.planet_id = p.id GROUP BY s.planet_id ORDER BY COUNT(s.shipment_id) DESC LIMIT 1;
SELECT T1.name, COUNT(T2.shipment_id) FROM employee AS T1 INNER JOIN shipment AS T2 ON T1.employee_id = T2.manager_id GROUP BY T1.name;
SELECT COUNT(*) ,  manager FROM shipments GROUP BY manager
SELECT SUM(T2.weight) FROM CREATABLE AS T1 INNER JOIN PACKAGE AS T2 ON T1.package_id = T2.package_id WHERE T2.shipment_type = 'Mars' AND T2.shipment_integregrator = 'NUL';
SELECT SUM(T2.weight) FROM packages AS T1 INNER JOIN shipments AS T2 ON T1.id = T2.package_id WHERE T2.destination = 'Mars';
SELECT T1.name, SUM(T2.weight) FROM planet AS T1 INNER JOIN package AS T2 ON T1.id = T2.planet_id GROUP BY T1.name;
SELECT T1.name, SUM(T2.weight) FROM planets AS T1 INNER JOIN packages AS T2 ON T1.id = T2.planet_id GROUP BY T1.name;
SELECT T2.planet_name FROM shipment AS T1 INNER JOIN planet AS T2 ON T1.p_id = T2.id WHERE T1.weight > 30;
SELECT T1.name FROM planet AS T1 INNER JOIN shipment AS T2 ON T1.id = T2.planet_id WHERE T2.total_weight > 30;
SELECT package_number FROM packages WHERE planet = 'Omicron Persei 8' AND shipper = 'Zapp Brannigan';
SELECT COUNT(*) FROM packages AS p JOIN shipments AS s ON p.id = s.package_id WHERE p.sender = 'Zapp Brannigan' AND s.destination = 'Omicron Persei 8';
SELECT package_number FROM packages WHERE planet = 'Omicron Persei 8' OR shipper = 'Zapp Brannigan';
SELECT COUNT(*) FROM packages WHERE planet = 'Omicron Persei 8' OR shipper = 'Zapp Brannigan';
SELECT package_number, weight FROM packages WHERE weight BETWEEN 10 AND 30;
SELECT package_number, weight FROM packages WHERE weight BETWEEN 10 AND 30;
SELECT DISTINCT T1.name FROM employees AS T1 INNER JOIN clearance AS T2 ON T1.employee_id = T2.employee_id WHERE T2.clearance IN ('Mars', 'NOT')
SELECT name FROM employees WHERE clearance NOT LIKE '%Mars%'
SELECT T1.name FROM employee AS T1 INNER JOIN clearance AS T2 ON T1.id = T2.employee_id WHERE T2.clearance_name IN ('Omega III')
SELECT T1.name FROM employee AS T1 INNER JOIN clearance AS T2 ON T1.id = T2.employee_id WHERE T2.clearance_name = 'Omega III'
SELECT T1.name FROM planets AS T1 JOIN employees AS T2 ON T1.id = T2.planet_id WHERE T2.clearance = 1 GROUP BY T1.name HAVING COUNT(T1.name) = 1;
SELECT T1.name FROM planets AS T1 JOIN employees AS T2 ON T1.id = T2.planet_id WHERE T2.clearance IS NOT NULL AND T2.employee_id IN (SELECT employee_id FROM clearance WHERE name = 'primairy')
SELECT name FROM employee WHERE salary BETWEEN 5000 AND 10000;
SELECT name FROM employees WHERE salary BETWEEN 5000 AND 10000;
SELECT name FROM employee WHERE salary > (SELECT AVG(salary) FROM employee) OR salary > 5000;
SELECT name FROM employee WHERE salary > (SELECT AVG(salary) FROM employee) OR salary > 5000;
SELECT COUNT(*) FROM employees WHERE clearance NOT LIKE '%Mars%'
SELECT COUNT(*) FROM employees WHERE clearance NOT LIKE '%Mars%'
SELECT COUNT(*) FROM games;
SELECT COUNT(*) FROM games;
SELECT T1.Title, T2.Developers FROM Games AS T1 INNER JOIN Developers AS T2 ON T1.id = T2.game_id ORDER BY T1.units_sold DESC;
SELECT T1.title, T2.developer FROM games AS T1 INNER JOIN developers AS T2 ON T1.id = T2.game_id ORDER BY T1.units_sold DESC;
SELECT AVG(units_sold / 1e6) FROM games WHERE developer != 'Nintendo'
SELECT AVG(units_sold / 1e6) FROM games WHERE developer != 'Nintendo'
SELECT name, market_district FROM platform;
SELECT platform_name, market_district FROM platforms WHERE id IN ( SELECT id FROM markets );
SELECT name, id FROM platform WHERE download_rank = 1;
SELECT name, id FROM platform WHERE download_rank = 1;
SELECT MAX(RANK_OF_YEAR), MIN(RANK_OF_YEAR) FROM PLAYER
SELECT MAX(RANK) ,  MIN(RANK) FROM player
SELECT COUNT(*) FROM player WHERE rank_of_the_year < 3;
SELECT COUNT(*) FROM player WHERE rank_year <= 3;
SELECT name FROM players ORDER BY name ASC;
SELECT name FROM players ORDER BY name;
SELECT name, college FROM player ORDER BY rank DESC
SELECT name, college FROM player ORDER BY rank DESC
SELECT T1.name, T2.rank FROM game AS T1 INNER JOIN player_game AS T2 ON T1.id = T2.game_id WHERE T1.title = 'Super Mario World';
SELECT T1.name, T2.rank FROM game AS T1 INNER JOIN player AS T2 ON T1.id = T2.game_id WHERE T1.title = 'Super Mario World';
SELECT DISTINCT T1.developer FROM games AS T1 INNER JOIN players AS T2 ON T1.player_id = T2.player_id INNER JOIN college AS T3 ON T2.college = T3.name WHERE T3.name = 'Auburn';
SELECT DISTINCT T1.developer_id FROM games AS T1 INNER JOIN players AS T2 ON T1.id = T2.game_id INNER JOIN attendance AS T3 ON T2.player_id = T3.player_id WHERE T3.college = 'Auburn'
SELECT AVG(units_sold / 1_000_000) FROM player WHERE position = 'Guard';
SELECT AVG(units_sold * 1_000_000) FROM game_player WHERE position = 'Guard'
SELECT title, platform_name FROM games WHERE platform_id IN ( SELECT id FROM platforms );
SELECT T1.title, T2.platform FROM games AS T1 INNER JOIN platforms AS T2 ON T1.id = T2.id
SELECT T1.title FROM games AS T1 INNER JOIN platforms AS T2 ON T1.id = T2.id WHERE T2.name IN ('Asia', 'USA')
SELECT T1.title FROM games AS T1 INNER JOIN platforms AS T2 ON T1.id = T2.game_id WHERE T2.market_district IN ('Asia', 'USA')
SELECT franchise, COUNT(*) FROM games GROUP BY franchise;
SELECT COUNT(DISTINCT T1.Franchise) FROM Games AS T1 INNER JOIN Franchises AS T2 ON T1.Franchise = T2.Name
SELECT franchise FROM games GROUP BY franchise ORDER BY COUNT(gamename) DESC LIMIT 1;
SELECT franchise FROM games GROUP BY franchise ORDER BY COUNT(gamename) DESC LIMIT 1;
SELECT name FROM franchises WHERE COUNT(game_id) >= 2;
SELECT name FROM franchises WHERE id IN ( SELECT id FROM games GROUP BY franchise_id HAVING COUNT(id) > 1 );
SELECT name FROM player WHERE id NOT IN (SELECT id FROM game)
SELECT name FROM player WHERE id NOT IN (SELECT game_id FROM game)
SELECT T1.title FROM games AS T1 INNER JOIN players AS T2 ON T1.id = T2.game_id WHERE T2.college IN ('Oklahoma', 'Auburn')
SELECT T1.title FROM games AS T1 INNER JOIN players AS T2 ON T1.id = T2.game_id WHERE T2.college IN ('Oklahoma College', 'Auburn College')
SELECT DISTINCT franchise FROM games;
SELECT DISTINCT franchise FROM franchises;
SELECT T1.title FROM games AS T1 INNER JOIN players AS T2 ON T1.id = T2.game_id WHERE T2.position != 'Guard'
SELECT T1.title FROM games AS T1 INNER JOIN players AS T2 ON T1.id = T2.game_id WHERE T2.position != 'Guard'
SELECT name FROM press ORDER BY profit_year DESC;
SELECT press_name FROM presses ORDER BY year_profit DESC;
SELECT T1.name FROM publishers AS T1 INNER JOIN yearly_profits AS T2 ON T1.id = T2.publisher_id WHERE T2.profit > 1500000000 OR T2.monthly_profit > 100000000
SELECT DISTINCT press_name FROM press WHERE yearly_profit > 15 OR monthly_profit > 1
SELECT AVG(YEAR_Prinits_billion), MAX(YEAR_Prinits_billion) FROM Presses
SELECT AVG(YEARLY_PROFIT_BILLION) ,  MAX(YEARLY_PROFIT_BILLION) FROM PRESSS_ID
SELECT T1.name FROM PRESS AS T1 INNER JOIN PRESS_ID AS T2 ON T1.id = T2.press_id WHERE T2.monthly_profit IS NOT NULL GROUP BY T1.name ORDER BY SUM(T2.monthly_profit) DESC LIMIT 1;
SELECT press_name FROM presses WHERE monthly_profit = ( SELECT MAX(monthly_profit) FROM presses );
SELECT name FROM PRESS WHERE (MONTHLY_PROFIT_BILLION = (SELECT MAX(MONTHLY_PROFIT_BILLION) FROM PRESS)) OR (MONTHLY_PROFIT_BILLION = (SELECT MIN(MONTHLY_PROFIT_BILLION) FROM PRESS))
SELECT name FROM press WHERE (monthly_profit > (SELECT MAX(monthly_profit) FROM press)) OR (monthly_profit < (SELECT MIN(monthly_profit) FROM press));
SELECT COUNT(*) FROM authors WHERE age < 30;
SELECT COUNT(DISTINCT author_id) FROM authors WHERE age < 30;
SELECT AVG(age) FROM authors WHERE gender IN ('Male', 'Female') GROUP BY gender;
SELECT gender, AVG(age) FROM authors GROUP BY gender;
SELECT COUNT(DISTINCT author_id) ,  COUNT(CASE WHEN gender = 'Male' THEN 1 ELSE NULL END) + COUNT(CASE WHEN gender = 'Female' THEN 1 ELSE NULL END) FROM authors WHERE age > 30;
SELECT COUNT(DISTINCT author_id) FROM authors WHERE age > 30 AND gender IN ('Male', 'Female')
SELECT title FROM books ORDER BY release_date DESC;
SELECT title FROM books ORDER BY release_date DESC;
SELECT COUNT(*) , s FROM books GROUP BY s
SELECT COUNT(b.id) ,  b.title FROM book AS b JOIN book_series AS bs ON b.id = bs.book_id GROUP BY bs.title
SELECT T1.title, T2.publish_date FROM books AS T1 INNER JOIN sales AS T2 ON T1.id = T2.book_id ORDER BY T2.sales DESC LIMIT 5;
SELECT T1.title, T2.release_date FROM books AS T1 INNER JOIN sales AS T2 ON T1.id = T2.book_id ORDER BY T2.amount DESC LIMIT 5;
SELECT T1.book_series FROM book_series AS T1 INNER JOIN books AS T2 ON T1.id = T2.book_series_id WHERE T2.sold > 1000 INTERSECT SELECT T1.book_series FROM book_series AS T1 INNER JOIN books AS T2 ON T1.id = T2.book_series_id WHERE T2.sold < 500
SELECT series FROM books WHERE sale_amount > 1000 INTERSECT SELECT series FROM books WHERE sale_amount < 500;
SELECT T1.name FROM authors AS T1 INNER JOIN books AS T2 ON T1.id = T2.author_id WHERE T2.series IN ('MM', 'LT') GROUP BY T1.name HAVING COUNT(DISTINCT T2.series) = 2;
SELECT DISTINCT author FROM books WHERE series = 'MM' INTERSECT SELECT DISTINCT author FROM books WHERE series = 'LT';
SELECT name, age FROM authors WHERE id NOT IN ( SELECT author_id FROM books )
SELECT T1.name FROM authors AS T1 INNER JOIN books AS T2 ON T1.id = T2.author_id WHERE T2.book_id NOT IN ( SELECT book_id FROM publications )
SELECT T1.name FROM authors AS T1 INNER JOIN books AS T2 ON T1.id = T2.author_id GROUP BY T1.name HAVING COUNT(T1.name) > 1;
SELECT T1.name FROM authors AS T1 INNER JOIN books AS T2 ON T1.id = T2.author_id GROUP BY T1.name HAVING COUNT(*) > 1;
SELECT T1.title, T2.author_name, T3.publisher_name FROM books AS T1 INNER JOIN authors AS T2 ON T1.author_id = T2.id INNER JOIN publishers AS T3 ON T1.publisher_id = T3.id ORDER BY T1.sales DESC LIMIT 3;
SELECT T1.title, T2.author_name, T3.press_name FROM books AS T1 INNER JOIN authors AS T2 ON T1.author_id = T2.id INNER JOIN presses AS T3 ON T1.press_id = T3.id ORDER BY T1.sold_quantity DESC LIMIT 3;
SELECT T1.name, SUM(T2.sale_amount) FROM presses AS T1 INNER JOIN books AS T2 ON T1.id = T2.press_id GROUP BY T1.name;
SELECT T1.name, SUM(T2.sale_amount) FROM PRESS AS T1 INNER JOIN BOOK AS T2 ON T1.id = T2.press_id GROUP BY T1.name;
SELECT COUNT(*) , T2.press_name FROM books AS T1 INNER JOIN publishers AS T2 ON T1.publisher_id = T2.id GROUP BY T2.press_name HAVING SUM(T1.quantity) > 1000;
SELECT T1.name, COUNT(T2.book_id) FROM presses AS T1 INNER JOIN sale_amount AS T2 ON T1.press_id = T2.press_id WHERE T2.sale_amount > 1000 GROUP BY T1.name;
SELECT T1.name FROM AUTHOR AS T1 INNER JOIN BOOK AS T2 ON T1.id = T2.author_id WHERE T2.title IN ('Best Selling Book')
SELECT author FROM books WHERE best_selling = 1;
SELECT T1.name, T2.gender FROM author AS T1 INNER JOIN book AS T2 ON T1.author_id = T2.author_id GROUP BY T1.name ORDER BY COUNT(T2.book_id) DESC LIMIT 1;
SELECT author_id, gender FROM books GROUP BY author_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT author FROM books WHERE press NOT IN ('Accor', 'Presses Indépendantes', 'Presses Royales Internationales')
SELECT T1.name FROM authors AS T1 INNER JOIN publications AS T2 ON T1.id = T2.author_id WHERE T2.press IN ('Accor', 'Namé', 'Age', 'Geneder', 'PRIMARY')
SELECT T1.name, SUM(T2.yearly_profit / 1000000000) FROM press AS T1 INNER JOIN book_press AS T2 ON T1.id = T2.press_id WHERE T2.num_books > 2 GROUP BY T1.name
SELECT T1.name, SUM(T2.yearly_profit / 1000000000) FROM presses AS T1 INNER JOIN books AS T2 ON T1.id = T2.press_id WHERE COUNT(T2.book_id) > 2 GROUP BY T1.name
SELECT COUNT(*) FROM authors;
SELECT author_name FROM authors;
SELECT name, email, phone FROM authors;
SELECT * FROM authors WHERE name = 'Addison Denesik';
SELECT COUNT(*) FROM documents;
SELECT authors FROM documents WHERE id = 4;
SELECT author FROM documents WHERE title = 'Travel to Brazil';
SELECT COUNT(DISTINCT author) FROM documents WHERE author = 'Era Kerluke';
SELECT name, description FROM documents;
SELECT id, name FROM documents WHERE author = 'Bianka Cummings';
SELECT T1.author_name, T2.details FROM authors AS T1 INNER JOIN documents AS T2 ON T1.author_id = T2.author_id WHERE T2.title = 'Travel to China';
SELECT author_name, COUNT(*) FROM documents GROUP BY author_name;
SELECT author_name FROM authors WHERE num_documents = ( SELECT MAX(num_documents) FROM authors );
SELECT T1.name FROM authors AS T1 INNER JOIN documents AS T2 ON T1.id = T2.author_id GROUP BY T1.name HAVING COUNT(T2.document_id) >= 2;
SELECT COUNT(*) FROM business_processes;
SELECT T2.next_process_id, T1.process_name, T1.process_description FROM processes AS T1 INNER JOIN process_details AS T2 ON T1.process_id = T2.process_id WHERE T1.process_id = 9;
SELECT name FROM processes WHERE id IN (SELECT next_id FROM processes WHERE id = 9)
SELECT COUNT(*) FROM processes;
SELECT code, description FROM processes;
SELECT description FROM processes WHERE outcome_code = 'working';
SELECT COUNT(*) FROM processes;
SELECT code, description FROM processes_status;
SELECT description FROM processes WHERE status_code = 'ct';
SELECT COUNT(staff_id) FROM staff
SELECT id, details FROM staff
SELECT * FROM staff WHERE id = 100;
SELECT COUNT(staff_role_id) FROM staff_roles;
SELECT code, description FROM staff_role;
SELECT description FROM roles WHERE role_code = 'HR';
SELECT COUNT(*) FROM documents WHERE processes_id IS NOT NULL;
SELECT processes_id FROM documents WHERE document_id IN (SELECT document_id FROM processes);
SELECT document_id FROM documents WHERE process = NULL;
SELECT DISTINCT id FROM processes WHERE status != 'running' AND status != 'new process';
SELECT process_outcome_description, process_status_description FROM documents WHERE id = 0;
SELECT T2.process_name FROM CREATETABLES AS T1 INNER JOIN documents AS T2 ON T1.id = T2.document_id WHERE T2.name = 'Travel to Brazil';
SELECT p.process_id, COUNT(d.document_id) FROM processes p LEFT JOIN documents d ON p.process_id = d.process_id GROUP BY p.process_id;
SELECT COUNT(DISTINCT staff_id) FROM documents WHERE id = 0 AND processes_id = 9;
SELECT staff_id, COUNT(document_process_id) FROM document_processes GROUP BY staff_id;
SELECT role_code, COUNT(document_process_id) FROM staff WHERE document_type IN ('processes', 'staffff_id') GROUP BY role_code;
SELECT COUNT(DISTINCT role_id) FROM staff WHERE id = 3;
SELECT COUNT(DISTINCT agency_id) FROM agencies;
SELECT COUNT(*) FROM agencies;
SELECT agency_id, details FROM agencies
SELECT agency_id, details FROM agencies
SELECT COUNT(*) FROM clients;
SELECT COUNT(*) FROM clients;
SELECT client_id, details FROM clients
SELECT client_id, details FROM clients WHERE status IN ('active', 'inactive') AND is_active = 1;
SELECT agency_id, COUNT(client_id) FROM clients GROUP BY agency_id;
SELECT COUNT(*) , agency_id FROM clients GROUP BY agency_id;
SELECT agency_id, details FROM clients ORDER BY COUNT(*) DESC LIMIT 1;
SELECT agency_id, details FROM agencies ORDER BY COUNT(*) DESC LIMIT 1;
SELECT agency_id FROM clients WHERE id IN (SELECT client_id FROM agencies) GROUP BY agency_id HAVING COUNT(DISTINCT client_id) >= 2;
SELECT agency_id FROM agencies WHERE id IN ( SELECT agency_id FROM clients GROUP BY agency_id HAVING COUNT(*) >= 2 );
SELECT agency_id FROM clients WHERE client_id IN ( SELECT client_id FROM agencies ) AND detail = 'Mac';
SELECT agency_id FROM clients WHERE detail = 'Mac';
SELECT c.client_id, c.name, a.agent_id, a.name FROM clients c JOIN agents a ON c.agent_id = a.id
SELECT c.client_id, a.agency_id, a.name, a.address, a.city, a.state, a.zip, a.country, a.phone, a.email FROM clients c JOIN agencies a ON c.agency_id = a.id
SELECT sic_code, COUNT(*) FROM clients GROUP BY sic_code;
SELECT COUNT(*) , s.sic_code FROM clients c JOIN sic_codes sc ON c.sic_code = sc.sic_code GROUP BY sc.sic_code;
SELECT client_id FROM clients WHERE sic_code = 'Bad'
SELECT client_ideas, client_details FROM clients WHERE sic_code = 'B'
SELECT agency_id FROM agencies WHERE id IN ( SELECT client_id FROM clients );
SELECT agency_id, agency_details FROM agencies WHERE client IS NOT NULL;
SELECT agency_id FROM agencies WHERE client IS NULL;
SELECT id FROM agencies WHERE id NOT IN (SELECT agency_id FROM clients)
SELECT COUNT(*) FROM invoices;
SELECT COUNT(*) FROM invoices;
SELECT i.id, invoice_status.code, invoice_details FROM invoices i JOIN clients c ON i.client_id = c.id
SELECT id, status, details FROM invoices
SELECT client_id, COUNT(invoice_id) FROM clients GROUP BY client_id;
SELECT COUNT(*) FROM invoices WHERE client_id IN (SELECT client_id FROM clients)
SELECT client_id, detail FROM clients WHERE id IN ( SELECT client_id FROM invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT client_id, details FROM clients WHERE id IN ( SELECT client_id FROM invoices GROUP BY client_id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT client_id FROM clients WHERE id IN ( SELECT client_id FROM invoices GROUP BY client_id HAVING COUNT(id) >= 2 );
SELECT client_id FROM clients WHERE id IN ( SELECT invoice_client_id FROM invoices GROUP BY invoice_client_id HAVING COUNT(*) >= 2 );
SELECT status, COUNT(*) FROM invoices GROUP BY status;
SELECT COUNT(*) , status_code FROM invoices GROUP BY status_code;
SELECT invoice_status_code FROM invoices GROUP BY invoice_status_code ORDER BY COUNT(invoice_id) DESC LIMIT 1;
SELECT invoice_status FROM invoices GROUP BY invoice_status ORDER BY COUNT(*) DESC LIMIT 1;
SELECT i.status_code, i.details, c.client_id, c.details AS client_details, a.agency_id, a.details AS agency_details FROM invoices i JOIN clients c ON i.client_id = c.id JOIN agencies a ON i.agency_id = a.id
SELECT i.status, i.details, c.client_id, c.client_details, a.agency_id, a.agency_details FROM invoices i JOIN clients c ON i.client_id = c.client_id JOIN agencies a ON c.agency_id = a.agency_id
SELECT meeting_type_code, meeting_type_details FROM meetings
SELECT meeting_type_id, name, description, type FROM meetings
SELECT meeting_outcome, meeting_purpose FROM meetings
SELECT meeting_outcome, meeting_purpose FROM meetings
SELECT payment_id, invoice_id, details FROM invoices WHERE status = 'Working';
SELECT payment_id, payment_details FROM invoices WHERE status = 'Working'
SELECT invoice_id, status FROM invoices WHERE payment_id IS NULL AND status IN ('NOT PAID', 'OVERDUE')
SELECT invoice_id, status FROM invoices WHERE payment_id IS NULL
SELECT COUNT(*) FROM payments;
SELECT COUNT(*) FROM payments;
SELECT payment_id, invoice_id, details FROM payments INNER JOIN invoices ON payments.invoice_id = invoices.id INNER JOIN invoice_details ON invoices.id = invoice_details.invoice_id
SELECT payment_id, invoice_id, payment_details FROM payments
SELECT DISTINCT invoice_id, status FROM invoices WHERE status IN ('INTEGNER', 'NOT NULL') OR status IN ('INTEGNER', 'NULL');
SELECT DISTINCT invoice_id, status FROM payments;
SELECT invoice_id, COUNT(*) FROM payments GROUP BY invoice_id;
SELECT COUNT(payment_id) FROM payments WHERE invoice_id IN (SELECT id FROM invoices);
SELECT invoice_id, status_code, details FROM invoices WHERE (status_code = 'NUL' AND details LIKE '%PAYMENT%' GROUP BY invoice_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT i.id, i.status, i.details FROM invoices AS i JOIN payments AS p ON i.id = p.invoice_id GROUP BY i.id ORDER BY COUNT(p.invoice_id) DESC LIMIT 1;
SELECT COUNT(staff_id) FROM staff
SELECT COUNT(*) FROM staff;
SELECT agency_id, COUNT(staff_id) FROM staff GROUP BY agency_id;
SELECT agency_id, COUNT(staff_id) FROM staff GROUP BY agency_id;
SELECT agent_id, agency_details FROM staff WHERE staff_id = ( SELECT MAX(staff_id) FROM staff );
SELECT id, detail FROM agency ORDER BY COUNT(staff_id) DESC LIMIT 1;
SELECT outcome_code, COUNT(*) FROM meetings GROUP BY outcome_code;
SELECT COUNT(*) ,  meeting_outcome FROM meetings GROUP BY meeting_outcome;
SELECT client_id, COUNT(*) FROM meetings GROUP BY client_id;
SELECT COUNT(*) FROM meetings WHERE client_id IN (SELECT client_id FROM clients)
SELECT meeting_type_code, COUNT(*) FROM meetings GROUP BY client_id
SELECT COUNT(*) , t.type FROM meetings m JOIN types t ON m.type_id = t.id GROUP BY t.type
SELECT m.meeting_id, m.outcome, mt.type, c.client_id, c.name FROM meetings m JOIN clients c ON m.client_id = c.id JOIN meeting_types mt ON m.type = mt.id
SELECT meeting_id, meeting_outcome, meeting_type, client_details FROM meetings
SELECT meeting_id, COUNT(staff_id) FROM meetings GROUP BY meeting_id;
SELECT COUNT(s) FROM meetings WHERE staff_id IN (SELECT id FROM staff)
SELECT staff_id, COUNT(*) FROM meetings WHERE meeting_id IN ( SELECT meeting_id FROM staff_meetings ) GROUP BY staff_id ORDER BY COUNT(*) LIMIT 1;
SELECT staff_id FROM meetings WHERE id IN (SELECT meeting_id FROM staff_meetings) AND count(*) = ( SELECT MIN(count()) FROM meetings WHERE id IN (SELECT meeting_id FROM staff_meetings) )
SELECT COUNT(DISTINCT staff_id) FROM meetings WHERE type = 'INTEGRATOR' AND status = 'NOT NULL';
SELECT COUNT(DISTINCT staff_id) FROM meetings WHERE type = 'INTEGRATOR' AND not null;
SELECT COUNT(staff_id) FROM staff WHERE meetings = ''
SELECT COUNT(*) FROM staff WHERE id NOT IN (SELECT meeting_id FROM meetings) AND id NOT IN (SELECT staff_id FROM meetingings)
SELECT c.client_id, c.client_details FROM clients JOIN meetings ON c.client_id = m.client_id JOIN invoices ON c.client_id = i.client_id
SELECT c.client_id, c.name, m.meeting_id, m.date, i.invoice_id, i.invoice_date FROM clients c JOIN meetings m ON c.client_id = m.client_id JOIN invoices i ON c.client_id = i.client_id
SELECT T1.id, T1.name, T1.email FROM staff AS T1 INNER JOIN meetings AS T2 ON T1.id = T2.staff_id WHERE T2.meeting_id IN ( SELECT meeting_id FROM details WHERE letter = 's' )
SELECT staff_id, details FROM staff WHERE id IN ( SELECT staff_id FROM meeting_attendance ) AND details LIKE '%s%'
SELECT T1.id, T2.sic_code, T3.agency_id FROM clients AS T1 INNER JOIN meetings AS T2 ON T1.client_id = T2.client_id INNER JOIN invoices AS T3 ON T1.client_id = T3.client_id WHERE T2.meeting_count = 1
SELECT T1.id, T2.sic_code, T3.agency_id FROM clients AS T1 INNER JOIN meetings AS T2 ON T1.client_id = T2.client_id INNER JOIN invoices AS T3 ON T1.client_id = T3.client_id WHERE T2.meeting_count = 1
SELECT m.start_time, m.end_time, c.client_id, c.name, s.staff_id, s.name FROM meetings m JOIN clients c ON m.client_id = c.client_id JOIN staff s ON m.staff_id = s.staff_id
SELECT T1.start_time, T2.client_id, T3.staff_id FROM meetings AS T1 INNER JOIN clients AS T2 ON T1.client_id = T2.id INNER JOIN staff AS T3 ON T1.staff_id = T3.id