SELECT COUNT(*) FROM singer
SELECT COUNT(*) FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC
SELECT Name, Country, Age FROM singer ORDER BY Age DESC
SELECT AVG("Age"), MIN("Age"), MAX("Age") FROM singer WHERE "Country" = "France";
SELECT AVG(Age) ,  MIN(Age) ,  MAX(Age) FROM singer WHERE Country = 'France'
SELECT T2.Name, T2."Song_release_year" FROM singer AS T1 INNER JOIN singer AS T2 ON T1."Age" < T2."Age" WHERE T2."Age" = ( SELECT MIN("Age") FROM singer );
SELECT T1.Name, T1.`Song_release_year` FROM singer AS T1 INNER JOIN singer AS T2 ON T1.`Singer_ID` = T2.`Singer_ID` ORDER BY T1.Age LIMIT 1;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT Country, COUNT(*) FROM singer GROUP BY Country
SELECT Country, COUNT(*) FROM singer GROUP BY Country
SELECT Song_Name FROM singer WHERE Age > ( SELECT AVG(Age) FROM singer )
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000
SELECT MAX(Capacity), AVG(Average) FROM stadium
SELECT AVG(Capacity), MAX(Capacity) FROM stadium
SELECT Name, Capacity FROM stadium WHERE Average = ( SELECT MAX(Average) FROM stadium );
SELECT Name, Capacity FROM stadium WHERE Average = ( SELECT MAX(Average) FROM stadium )
SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015';
SELECT COUNT(*) FROM concert WHERE YEAR = '2014' OR YEAR = '2015';
SELECT T2.Name, COUNT(T1.Stadium_ID) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID;
SELECT COUNT(T2.Stadium_ID) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T2.Stadium_ID
SELECT T2.Name, SUM(T1.Capacity) FROM stadium AS T2 INNER JOIN concert AS T1 ON T2.Stadium_ID = T1.Stadium_ID WHERE T1.Year >= '14' GROUP BY T2.Stadium_ID HAVING COUNT(*) = ( SELECT COUNT(DISTINCT Stadium_ID) FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE c.Year >= '14' AND c.Capacity IS NOT NULL )
SELECT T2.Name, T2.Capacity FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE STRFTIME('%Y', T1.Year) > '2013' GROUP BY T2.Stadium_ID ORDER BY COUNT(T1.Concert_ID) DESC LIMIT 1
SELECT "Year" FROM concert GROUP BY "Year" ORDER BY COUNT(*) DESC LIMIT 1
SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1
SELECT T2.Name FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Theme != 'Bleeding Love'
SELECT Name FROM stadium WHERE Stadium_ID NOT IN ( SELECT Stadium_ID FROM concert );
SELECT Country FROM singer WHERE Age > 40 INTERSECT SELECT Country FROM singer WHERE Age < 30
SELECT T1.Name FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year != '2014'
SELECT Name FROM stadium WHERE Stadium_ID NOT IN ( SELECT Stadium_ID FROM concert WHERE YEAR = '2014' );
SELECT T3.concert_Name, T3.Theme, COUNT(T4.Singer_ID) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID INNER JOIN singer_in_concert AS T4 ON T2.concert_ID = T4.concert_ID GROUP BY T3.concert_Name, T3.Theme
SELECT T1.concert_Name ,  T1.Theme ,  COUNT(T2.Singer_ID) FROM concert AS T1 LEFT JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T1.concert_ID
SELECT T1.Name, COUNT(T1.Singer_ID) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name
SELECT T1.Name, COUNT(T2.concert_ID) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID
SELECT T1.Name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE STRFTIME('%Y', T2.concert_ID) = '2014'
SELECT T4.Name FROM concert AS T1 INNER JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID INNER JOIN singer AS T3 ON T2.Singer_ID = T3.Singer_ID INNER JOIN singer AS T4 ON T3.Singer_ID = T4.Singer_ID WHERE T1.Year = '2014'
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'
SELECT T1.Name, T1.Country FROM singer AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Song_Name LIKE '%Hey%'
SELECT T1.Name, T2.Location FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year IN ('2014', '2015') AND T1.Stadium_ID = T2.Stadium_ID
SELECT T1.concert_Name, T2.Location FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Year IN ('2014', '2015')
SELECT COUNT(*) FROM concert WHERE Stadium_ID = ( SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1 )
SELECT COUNT(T2.concert_ID) FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.Capacity = ( SELECT MAX(Capacity) FROM stadium );
SELECT COUNT(PetID) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT MIN(weight) FROM Pets WHERE PetType = 'dog'
SELECT weight FROM Pets WHERE pet_age = ( SELECT MIN(pet_age) FROM Pets )
SELECT MAX(weight), PetType FROM Pets GROUP BY PetType
SELECT MAX(weight), PetType FROM Pets GROUP BY PetType
SELECT COUNT(*) FROM Has_Pet AS H JOIN Student AS S ON H.StuID = S.StuID WHERE S.Age > 20;
SELECT COUNT(T1.StuID) FROM Has_Pet AS T1 INNER JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age > 20;
SELECT COUNT(T1.PetID) FROM Has_Pet AS T1 INNER JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = 'F' AND T1.PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'dog' );
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Sex = 'F' AND PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'dog' )
SELECT COUNT(DISTINCT PetType) FROM Pets
SELECT COUNT(DISTINCT PetType) FROM Pets;
SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T3.PetID = T2.PetID WHERE T3.PetType IN ('cat', 'dog')
SELECT DISTINCT T1.Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age > 0 OR T3.pet_weight > 0
SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType IN ('cat', 'dog') GROUP BY T1.Fname HAVING COUNT(T1.Fname) > 1 LIMIT 1
SELECT T1.Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T3.PetID = T2.PetID WHERE T3.PetType IN ('cat', 'dog')
SELECT T1.Fname, T1.Age FROM Student AS T1 LEFT JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID LEFT JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE (T3.PetType != 'cat')
SELECT T1.Fname, T1.LName, T1.Age FROM Student AS T1 LEFT JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.PetID IS NULL;
SELECT StuID FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet );
SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT T1.Fname, T1.Age FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog'
SELECT T1.Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' EXCEPT SELECT T1.Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat'
SELECT PetType, weight FROM Pets WHERE pet_age = ( SELECT MIN(pet_age) FROM Pets )
SELECT PetType, weight FROM Pets WHERE pet_age = ( SELECT MIN(pet_age) FROM Pets )
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT AVG(pet_age) ,  MAX(pet_age) FROM Pets GROUP BY PetType
SELECT AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType
SELECT AVG(weight) , PetType FROM Pets GROUP BY PetType
SELECT AVG(weight) FROM Pets GROUP BY PetType;
SELECT T1.Fname, T1.Age FROM Student AS T1 INNER JOIN Has_Pet ON T1.StuID = Has_Pet.StuID WHERE Has_Pet.PetID IS NOT NULL
SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID
SELECT PetID FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE LName = 'Smith');
SELECT Has_Pet.StuID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.LName = 'Smith';
SELECT StuID , COUNT(*) FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 0;
SELECT StuID , COUNT(*) FROM Has_Pet GROUP BY StuID
SELECT T1.Fname, T1.Sex FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING COUNT(T2.PetID) > 1
SELECT T1.Fname, T1.Sex FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.PetID IN ( SELECT PetID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1 )
SELECT T1.LName FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = 3
SELECT T1.LName FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = 3
SELECT AVG(Age) FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet );
SELECT AVG(T1.Age) FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T2.PetID IS NULL;
SELECT COUNT("ContId") FROM "continents"
SELECT COUNT(*) FROM continents
SELECT T1.ContId, T1.Continent, COUNT(T2.CountryId) FROM continents AS T1 INNER JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId, T1.Continent
SELECT T2.ContId, T2.Continent, COUNT(T1.CountryId) FROM countries AS T1 INNER JOIN continents AS T2 ON T1.Continent = T2.ContId
SELECT COUNT(CountryName) FROM countries
SELECT COUNT(CountryName) FROM countries;
SELECT T1.FullName, T2.ModelId, COUNT(T2.ModelId) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.FullName
SELECT T1.FullName, T1.Id, COUNT(T3.ModelId) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker INNER JOIN model_list AS T3 ON T2.Maker = T3.Maker GROUP BY T1.Id
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T2."MakeId" = T1."Id" ORDER BY T1.Horsepower LIMIT 1
SELECT cars_data.* FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId ORDER BY CAST(REPLACE(cars_data.Horsepower, 'hp', '') AS REAL) ASC LIMIT 1
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Weight < ( SELECT AVG(Weight) FROM cars_data )
SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE Weight < (SELECT AVG(Weight) FROM cars_data) AND T1.Id IN ( SELECT Id FROM cars_data );
SELECT T1."Make", T3.Maker FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id INNER JOIN car_makers AS T3 ON T3."Maker" = T1."Make" WHERE T2.Year = 1970
SELECT T4.Maker FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId INNER JOIN model_list AS T3 ON T2.Model = T3.Model INNER JOIN car_makers AS T4 ON T3.Maker = T4.Id WHERE T1.Year = 1970
SELECT T2.Make, MIN(T1.Year) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId GROUP BY T2.Make
SELECT T2.Make, MIN(T1.Year) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId GROUP BY T2.Make
SELECT DISTINCT T1.Model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year > 1980
SELECT T1.Model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year > 1980 GROUP BY T1.Model
SELECT T2.Continent, COUNT(T1.Id) FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T2.Continent
SELECT T1.Continent, COUNT(T3.Id) FROM continents AS T1 INNER JOIN countries AS T2 ON T1.ContId = T2.Continent INNER JOIN car_makers AS T3 ON T2.CountryId = T3.Country WHERE T2.CountryName IS NOT NULL GROUP BY T1.Continent
SELECT T2.CountryName FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T2.CountryId ORDER BY COUNT(Id) DESC LIMIT 1;
SELECT T1.Country FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY COUNT(*) DESC LIMIT 1
SELECT COUNT(T1.ModelId), T2.FullName FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Id GROUP BY T2.FullName
SELECT COUNT(T1.Maker), T1.Id, T1.FullName FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id
SELECT accelerate FROM cars_data WHERE Id = ( SELECT MakeId FROM car_names WHERE Model = 'AMC Hornet Sportabout (SW)' );
SELECT T1.Accelerate FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'amc hornet sportabout (sw)'
SELECT COUNT(*) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')
SELECT COUNT(*) FROM car_makers WHERE Country = ( SELECT CountryName FROM countries WHERE Continent = 2 AND CountryName = 'France' );
SELECT COUNT(DISTINCT T4.Maker) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker INNER JOIN countries AS T3 ON T1.Country = T3.CountryId INNER JOIN model_list AS T4 ON T2.ModelId = T4.ModelId WHERE T3.CountryName = 'usa'
SELECT COUNT(*) FROM car_makers AS cm INNER JOIN countries AS c ON cm.Country = c.CountryId WHERE c.CountryName = 'usa'
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) FROM cars_data WHERE Year = 1974 AND Cylinders = 8;
SELECT T2.Model, T2.Maker FROM model_list AS T2 INNER JOIN car_makers AS T1 ON T2.Maker = T1.Id
SELECT Maker, Model FROM model_list;
SELECT T1.CountryName, T1.CountryId FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE T2.Maker IS NOT NULL
SELECT T1.CountryName, T1.CountryId FROM countries AS T1 INNER JOIN car_makers ON T1.CountryId = car_makers.Country WHERE car_makers.Country IS NOT NULL
SELECT COUNT(*) FROM cars_data WHERE Horsepower > '150';
SELECT COUNT(*) FROM cars_data WHERE Horsepower > '150';
SELECT AVG(Weight) FROM cars_data
SELECT AVG("Weight"), "Year" FROM cars_data GROUP BY "Year";
SELECT T1.Country FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country HAVING COUNT(DISTINCT T1.Country) >= 3
SELECT T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE CONTINENT = 2 GROUP BY T1.CountryName HAVING COUNT(T2.Maker) >= 3
SELECT MAX(T1.Horsepower), T2.Make FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3;
SELECT MAX(T1.Horsepower) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3
SELECT T1.MPG FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.MPG IS NOT NULL ORDER BY CAST(T1.MPG AS REAL) DESC LIMIT 1;
UPDATE `car_names` SET "Model" = ( SELECT c.Model FROM `car_names` AS c JOIN `cars_data` ON c.MakeId = cars_data.Id WHERE cars_data.MPG = ( SELECT MAX(MPG) FROM `cars_data`) )
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980
SELECT Edispl FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE car_names.Model = 'volvo'
ALTER TABLE cars_data ADD COLUMN "AverageEdispl" REAL;
SELECT MAX(CASE WHEN Cylinders = 8 THEN Accelerate END) FROM cars_data
SELECT MAX(CASE WHEN Cylinders = 4 THEN Accelerate END) FROM cars_data UNION SELECT MAX(CASE WHEN Cylinders = 6 THEN Accelerate END) FROM cars_data UNION SELECT MAX(CASE WHEN Cylinders = 8 THEN Accelerate END) FROM cars_data
SELECT Make FROM car_names GROUP BY Make ORDER BY COUNT(Make) DESC LIMIT 1
SELECT Model FROM car_names GROUP BY Model ORDER BY COUNT("MakeId") DESC LIMIT 1
SELECT COUNT(*) FROM cars_data WHERE "Cylinders" > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE YEAR = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(T1.ModelId) FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'
SELECT COUNT(ModelId) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE FullName = 'American Motor Company')
SELECT T1.FullName, T1.Id FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING COUNT(T2.ModelId) > 3
SELECT Maker, Id FROM car_makers WHERE Id IN ( SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(ModelId) > 3 )
SELECT T2.Model FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.Make = T2.Maker INNER JOIN cars_data AS T3 ON T3.Id = T1.MakeId WHERE (T3.Id IN (SELECT Id FROM car_makers WHERE FullName LIKE '%General Motors%')) OR (T3.Weight > 3500)
ALTER TABLE cars_data ADD COLUMN Maker INTEGER;
SELECT Year FROM cars_data WHERE Weight BETWEEN 3000 AND 4000;
SELECT DISTINCT YEAR FROM cars_data WHERE Weight < 4000 INTERSECT SELECT DISTINCT YEAR FROM cars_data WHERE Weight > 3000
SELECT Horsepower FROM cars_data WHERE Accelerate = ( SELECT MAX(Accelerate) FROM cars_data )
SELECT Horsepower FROM cars_data WHERE Accelerate = ( SELECT MAX(Accelerate) FROM cars_data )
SELECT MIN(Accelerate) ,  Cylinders FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Year = ( SELECT MIN(Year) FROM cars_data WHERE Model = 'volvo' ) AND car_names.Make = 'Volvo'
SELECT T2.Cylinders FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE ( SELECT MIN(T2.Accelerate) FROM cars_data AS T2 INNER JOIN car_names AS T1 ON T2.Id = T1.MakeId ) <= T2.Accelerate
SELECT COUNT(Id) FROM cars_data WHERE Accelerate > ( SELECT MAX(Accelerate) FROM cars_data )
SELECT COUNT(*) FROM cars_data WHERE Horsepower = ( SELECT MAX(Horsepower) FROM cars_data ) AND Accelerate > ( SELECT MAX(Accelerate) FROM cars_data );
SELECT COUNT(DISTINCT T1.Country) FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.Continent = 2
SELECT COUNT(Country) FROM car_makers GROUP BY Country HAVING COUNT(Id) > 2
SELECT COUNT(Cylinders) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(Id) FROM cars_data WHERE Cylinders > 6;
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 4 ORDER BY CAST(REPLACE(T1.Horsepower, ',', '') AS REAL) DESC LIMIT 1;
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 4 ORDER BY CAST(REPLACE(T1.Horsepower, ',', '') AS REAL) DESC LIMIT 1;
SELECT T2.MakeId, T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND T1.Cylinders <= 3
SELECT T2.MakeId, T2.Make FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.Model WHERE CAST(REPLACE(T1.Horsepower, ',', '') AS REAL) < ( SELECT MIN(horsepower) FROM cars_data ) AND T1.Cylinders < 4
SELECT MAX(MPG) FROM cars_data WHERE Year < 1980 AND Cylinders = 8;
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT Model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.Model = T2.MPG WHERE T2.Weight < 3500 EXCEPT SELECT Model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.Model = T2.MPG WHERE T2.Id IN (SELECT Id FROM car_makers WHERE Maker = 'Ford Motor Company')
SELECT T2.Model FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Weight < 3500 AND T2.Model NOT IN ( SELECT T4.Model FROM model_list AS T4 INNER JOIN car_makers AS T5 ON T5.Id = T4.Maker )
SELECT T2.Country FROM car_makers AS T2 JOIN countries AS T1 ON T1.CountryId = T2.Country WHERE (T2.Id NOT IN ( SELECT Id FROM car_makers ) OR T2.Country IS NULL)
SELECT T2.CountryName FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T1.Id NOT IN (SELECT Id FROM car_makers)
SELECT T2.Maker, T1.Id FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Maker HAVING COUNT(DISTINCT T2.Model) >= 2 AND COUNT(T1.Id) > 3
SELECT DISTINCT car_makers.Id, car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Maker HAVING COUNT(model_list.Model) >= 2 AND SUM(CASE WHEN model_list.Model IN ('chevrolet chevelle malibu', 'buick skylark 320', 'plymouth satellite') THEN 1 ELSE 0 END) > 3
SELECT T2.Country, T2.FullName FROM car_makers AS T2 INNER JOIN countries AS T1 ON T1.CountryId = T2.Country WHERE T2.Country IN ( SELECT Country FROM model_list WHERE Model = 'fiat' )
SELECT T1.CountryId, T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country WHERE (T2.Maker IN ( SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) > 3 ) OR T2.Maker = 4)
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
SELECT COUNT(uid) FROM airlines
SELECT COUNT(uid) FROM airlines
SELECT COUNT(AirportCode) FROM airports;
SELECT COUNT(AirportCode) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT COUNT(uid) FROM airlines WHERE Country = 'USA'
SELECT COUNT(*) FROM airlines WHERE Country = 'USA'
SELECT City, Country FROM airports WHERE AirportCode = 'APG'
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT AirportName FROM airports WHERE City = 'Aberdeen ';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(DestAirport) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT COUNT(*) FROM flights AS f JOIN airports AS a ON (f.SourceAirport = a.AirportCode OR f.DestAirport = a.AirportCode) WHERE f.SourceAirport = 'ABR' OR f.DestAirport = 'ABR';
SELECT COUNT(DISTINCT T1.SourceAirport) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'
SELECT COUNT(*) FROM airports WHERE City = 'Aberdeen'
SELECT COUNT(DISTINCT DestAirport) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley')
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG' AND DestAirport = 'ASY';
SELECT COUNT(*) FROM flights WHERE Airline = 3;
SELECT COUNT(DISTINCT Airline) FROM flights WHERE Airline = ( SELECT Airline FROM airlines WHERE Abbreviation = 'JETB' );
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ASY' AND Airline = ( SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' );
SELECT COUNT(Distinct T1.FlightNo) FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Abbreviation = 'UAL' AND T1.DestAirport = 'ASY';
SELECT COUNT(DISTINCT T2.FlightNo) FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.Uid = T2.Airline WHERE T1.Abbreviation = 'UAL' AND T2.SourceAirport = 'AHD'
SELECT COUNT(T2.FlightNo) FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.Abbreviation = T2.Airline WHERE T1.Country = 'USA' AND T2.SourceAirport = 'AHD';
SELECT COUNT(T2.FlightNo) FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = 'Aberdeen'
SELECT COUNT(T1.Airline) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T1.SourceAirport IN ( SELECT AirportCode FROM airports WHERE City = 'Aberdeen' ) AND T1.Airline IN ( SELECT Airline FROM airlines WHERE Abbreviation = 'UAL' );
SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(Distinct SourceAirport) DESC LIMIT 1;
SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(DestAirport) DESC LIMIT 1
SELECT T1.City FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY COUNT(T1.AirportCode) DESC LIMIT 1;
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(SourceAirport) DESC LIMIT 1
SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(DestAirport) LIMIT 1
SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(FlightNo) DESC LIMIT 1
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(Distinct FlightNo) LIMIT 1
SELECT T2.AirportCode FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode GROUP BY T2.AirportCode ORDER BY COUNT(*) LIMIT 1;
SELECT T2.Airline FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid GROUP BY T1.Airline ORDER BY COUNT(T1.FlightNo) DESC LIMIT 1;
SELECT T1.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid GROUP BY T1.Airline ORDER BY COUNT(T1.FlightNo) DESC LIMIT 1;
SELECT Abbreviation, Country FROM airlines WHERE uid = ( SELECT uid FROM flights GROUP BY Airline ORDER BY COUNT(Airline) LIMIT 1 )
SELECT Abbreviation, Country FROM airlines WHERE Abbreviation IN ( SELECT t2.Abbreviation FROM flights t1 JOIN airlines t2 ON t1.Airline = t2.uid GROUP BY t2.Abbreviation ORDER BY COUNT(*) LIMIT 1 )
SELECT DISTINCT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD'
SELECT DISTINCT T2.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.SourceAirport = 'AHD'
SELECT Airline FROM flights WHERE DestAirport = 'AHD'
SELECT DISTINCT T2.Airline FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.DestAirport = 'AHD'
SELECT T2.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.SourceAirport = 'APG' AND T1.DestAirport = 'CVO';
SELECT T2.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.SourceAirport IN ('APG', 'CVO')
SELECT Airline FROM flights WHERE SourceAirport = 'CVO' EXCEPT SELECT Airline FROM flights WHERE SourceAirport = 'APG'
SELECT T1.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T1.SourceAirport != 'APG' AND T1.DestAirport = 'CVO';
SELECT DISTINCT T2.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid GROUP BY T1.Airline HAVING COUNT(DISTINCT FlightNo) >= 10;
SELECT DISTINCT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING COUNT(*) >= 10
SELECT Airline FROM airlines WHERE Airline IN ( SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(Distinct FlightNo) < 200 )
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(FlightNo) < 200
SELECT FlightNo FROM flights WHERE Airline = ( SELECT uid FROM airlines WHERE Airline = 'United Airlines' )
SELECT DISTINCT FlightNo FROM flights WHERE Airline = 1;
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'
SELECT DISTINCT T2.FlightNo FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = 'Aberdeen ';
SELECT T2.FlightNo FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = 'Aberdeen ';
SELECT T2.FlightNo FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = 'Aberdeen';
SELECT T2.FlightNo FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.City = 'Aberdeen'
SELECT COUNT(DISTINCT SourceAirport) + COUNT(DISTINCT DestAirport) FROM flights WHERE SourceAirport IN ('Aberdeen ', 'ABR') OR DestAirport IN ('Aberdeen ', 'APG') OR DestAirport IN ('Abilene ', 'DYS');
SELECT COUNT(*) FROM flights WHERE SourceAirport IN ('APG', 'DYS') OR DestAirport IN ('APG', 'DYS')
SELECT AirportName FROM airports WHERE AirportCode NOT IN ( SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights )
SELECT SourceAirport FROM flights WHERE SourceAirport NOT IN ( SELECT DestAirport FROM flights )
SELECT COUNT("Employee_ID") FROM employee
SELECT COUNT(*) FROM employee
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC
SELECT COUNT(City), City FROM employee GROUP BY City
SELECT City, COUNT(Employee_ID) FROM employee GROUP BY City
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1
SELECT COUNT(Shop_ID), Location FROM shop GROUP BY Location
SELECT Location, COUNT(*) FROM shop GROUP BY Location
SELECT Manager_name, District FROM shop WHERE Number_products = ( SELECT MAX(Number_products) FROM shop );
SELECT Manager_name, District FROM shop WHERE Number_products = ( SELECT MAX(Number_products) FROM shop );
SELECT MIN(Number_products) , MAX(Number_products) FROM shop;
SELECT MIN(Number_products) , MAX(Number_products) FROM shop
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT T2.Name FROM evaluation AS T1 INNER JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID WHERE T1.Employee_ID IN ( SELECT Employee_ID FROM ( SELECT Employee_ID, COUNT(*) AS num FROM evaluation GROUP BY Employee_ID ) ORDER BY num DESC LIMIT 1 )
SELECT T2.Name FROM evaluation AS T1 INNER JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID INNER JOIN ( SELECT Employee_ID , COUNT(*) AS num FROM evaluation GROUP BY Employee_ID ) AS T3 ON T1.Employee_ID = T3.Employee_ID ORDER BY T3.num DESC LIMIT 1
SELECT T2.Name FROM evaluation AS T1 INNER JOIN employee AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T1.Bonus DESC LIMIT 1;
SELECT T1.Name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1;
SELECT T1.Name FROM employee AS T1 LEFT JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID WHERE T2.Employee_ID IS NULL
SELECT Name FROM employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM evaluation );
SELECT t1.Name FROM shop AS t1 INNER JOIN hiring AS t2 ON t1.Shop_ID = t2.Shop_ID GROUP BY t1.Name ORDER BY COUNT(t2.Employee_ID) DESC LIMIT 1;
SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(T1.Shop_ID) DESC LIMIT 1
SELECT T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Employee_ID IS NULL
SELECT T1.Name FROM shop AS T1 LEFT JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Employee_ID IS NULL
SELECT T2.Name , COUNT(*) FROM hiring AS T1 INNER JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID
SELECT COUNT(*) , T2.Name FROM hiring AS T1 INNER JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Name
SELECT SUM(Bonus) FROM evaluation
SELECT SUM(Bonus) FROM evaluation
SELECT * FROM hiring;
SELECT * FROM hiring
SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000
SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000;
SELECT COUNT(DISTINCT Location) FROM shop
SELECT COUNT(DISTINCT "Location") FROM shop
SELECT COUNT(*) FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_Name, Template_ID FROM Documents WHERE LOWER(Document_Description) LIKE '%w%'
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'
SELECT COUNT(DISTINCT Template_ID) FROM Documents
SELECT COUNT(DISTINCT Template_ID) FROM Documents
SELECT COUNT(DISTINCT Document_ID) FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PPT')
SELECT COUNT(DISTINCT T2.Template_ID) FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PP'
SELECT Template_ID, COUNT(Document_ID) FROM Documents GROUP BY Template_ID
SELECT Template_ID, COUNT(Document_ID) FROM Documents GROUP BY Template_ID
SELECT T.Template_ID, T.Template_Type_Code FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID GROUP BY D.Template_ID ORDER BY COUNT(D.Document_ID) DESC LIMIT 1
SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Code ORDER BY COUNT(T2.Document_ID) DESC LIMIT 1
SELECT T2.Template_ID FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T2.Template_ID HAVING COUNT(T1.Document_ID) > 1
SELECT T2.Template_ID FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID HAVING COUNT(T1.Document_ID) > 1
SELECT T1.Template_ID FROM Templates AS T1 LEFT JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_ID IS NULL
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN ( SELECT Template_ID FROM Documents )
SELECT COUNT(*) FROM Templates
SELECT COUNT(Template_ID) FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates
SELECT DISTINCT Template_Type_Code FROM Templates
SELECT DISTINCT Template_Type_Code FROM Templates
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';
SELECT COUNT(Template_ID) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT COUNT(Template_Type_Code) FROM Templates WHERE Template_Type_Code = 'PP';
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5
SELECT Template_Type_Code, COUNT(Template_ID) FROM Templates GROUP BY Template_Type_Code
SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC LIMIT 1
SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3);
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3
SELECT MIN(Template_ID) AS Smallest_Version_Number, Template_Type_Code FROM Templates WHERE Date_Effective_From IS NOT NULL
SELECT MIN(Version_Number), Template_Type_Code FROM Templates
SELECT Template_Type_Code FROM Templates WHERE Template_ID IN ( SELECT Template_ID FROM Documents WHERE Document_Name = 'Data base' )
SELECT T2.Template_Type_Code FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Data base';
SELECT T2.Document_Name FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Template_Type_Code = 'BK'
SELECT T.Document_Name FROM Documents AS T JOIN Templates ON T.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK'
SELECT T.Template_Type_Code, COUNT(D.Document_ID) AS Count FROM Documents D INNER JOIN Templates T ON D.Template_ID = T.Template_ID GROUP BY T.Template_Type_Code
SELECT Template_Type_Code, COUNT(Template_ID) FROM Templates GROUP BY Template_Type_Code
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates WHERE Template_Type_Code = ( SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(DISTINCT Template_ID) DESC LIMIT 1 )
SELECT DISTINCT Template_Type_Code FROM Templates WHERE Template_Type_Code NOT IN (SELECT Template_ID FROM Documents)
SELECT Template_Type_Code FROM Templates WHERE Template_Type_Code NOT IN ( SELECT Template_ID FROM Documents )
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT DISTINCT Ref_Template_Types.Template_Type_Description FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
SELECT T3.Template_Type_Description FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID INNER JOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code = T3.Template_Type_Code GROUP BY T3.Template_Type_Description
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')
SELECT COUNT(Paragraph_ID) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs
SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = ( SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show' )
SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Summer Show')
SELECT Other_Details FROM Paragraphs WHERE Paragraph_Text = 'Korea'
SELECT T1.Paragraph_Text, T2.Other_Details FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Paragraph_Text LIKE '%Korea %'
SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY';
SELECT T2.Paragraph_ID, T2.Paragraph_Text FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = 'Welcome to NY'
SELECT T1.Paragraph_Text FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'
SELECT T1.Paragraph_Text FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews';
SELECT T1.Document_ID, COUNT(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY T1.Document_ID;
SELECT T1.Document_ID, COUNT(*) AS Paragraphs FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY T1.Document_ID;
SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Paragraphs FROM Documents D LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID
SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Paragraphs FROM Documents D LEFT JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID
SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text != NULL GROUP BY Document_ID HAVING COUNT(DISTINCT Paragraph_ID) >= 2
SELECT T1.Document_ID FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING COUNT(*) >= 2
SELECT T2.Document_ID, T2.Document_Name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID ORDER BY COUNT(DISTINCT T1.Paragraph_ID) DESC LIMIT 1
SELECT Document_ID, Document_Name FROM Documents WHERE Document_ID = ( SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) LIMIT 1
SELECT T2.Document_ID FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE LENGTH(T1.Paragraph_Text) BETWEEN 1 AND 2;
SELECT T2.Document_ID FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Paragraph_Text LIKE '% %'
SELECT T1.Document_ID FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Paragraph_Text IN ('Brazil', 'Ireland')
SELECT T1.Document_ID FROM Paragraphs AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Paragraph_Text LIKE '%Brazil%' AND T2.Paragraph_Text LIKE '%Ireland%'
SELECT COUNT(*) FROM teacher;
SELECT COUNT(*) FROM teacher
SELECT Name FROM teacher ORDER BY Age ASC
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Age, Hometown FROM teacher
SELECT Age, Hometown FROM teacher
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'
SELECT Name FROM teacher WHERE Age = '32' OR Age = '33';
SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'
SELECT Hometown FROM teacher WHERE Age = ( SELECT MIN(Age) FROM teacher )
SELECT Hometown FROM teacher WHERE Age = ( SELECT MIN(Age) FROM teacher );
SELECT Hometown, COUNT(Teacher_ID) FROM teacher GROUP BY Hometown
SELECT COUNT(Teacher_ID) FROM teacher GROUP BY Hometown
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.Hometown FROM teacher AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T1.Hometown != T2.Hometown GROUP BY T1.Hometown HAVING COUNT(T1.Teacher_ID) > 1
SELECT DISTINCT T1.Hometown FROM teacher AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T1.Name != T2.Name GROUP BY T1.Hometown HAVING COUNT(T1.Teacher_ID) >= 2
SELECT T1.Name ,  T3.Course FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID INNER JOIN course AS T3 ON T2.Course_ID = T3.Course_ID
SELECT T1.Name, T3.Course FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID INNER JOIN course AS T3 ON T2.Course_ID = T3.Course_ID
SELECT T1.Name ,  T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name ASC
SELECT T1.Name, T3.Course FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T2.Course_ID = T3.Course_ID ORDER BY T1.Name;
SELECT T1.`Name` FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T1.Course_ID IN ( SELECT Course_ID FROM course )
SELECT T1.Name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T2.Course_ID IN ( SELECT Course_ID FROM course WHERE Course = 'Math' )
SELECT T1.Name, COUNT(T2.Course_ID) FROM teacher AS T1 LEFT JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name;
SELECT T1.Name, COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID
SELECT T1.Name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name HAVING COUNT(*) >= 2
SELECT T1.Name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Course_ID) >= 2
SELECT T1.Name FROM teacher AS T1 LEFT JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T2.Course_ID IS NULL
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T2.Course_ID IS NULL;
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;
SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age ASC
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = ( SELECT MAX(Num_of_Staff) FROM museum )
SELECT AVG(T1.Num_of_Staff) FROM museum AS T1 INNER JOIN ( SELECT Name , MIN(CAST(Open_Year AS INTEGER)) as year FROM museum GROUP BY Name ) AS T2 ON T1.Name = T2.Name WHERE T1.Open_Year < '2009'
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'
SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010')
SELECT T2.ID, T2.Name, T2.Age FROM visit AS T1 INNER JOIN visitor AS T2 ON T1.visitor_ID = T2.ID GROUP BY T1.visitor_ID HAVING COUNT(*) > 1;
SELECT T2.id, T2.name, T2.level_of_membership FROM visit AS T1 INNER JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T1.Total_spent IN ( SELECT Total_spent FROM visit GROUP BY Museum_ID, visitor_ID ORDER BY SUM(Total_spent) DESC LIMIT 1 )
SELECT T2.Museum_ID, T2.Name FROM visit AS T1 INNER JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T2.Museum_ID ORDER BY COUNT(T1.visitor_ID) DESC LIMIT 1
SELECT Name FROM museum WHERE Museum_ID NOT IN ( SELECT Museum_ID FROM visit );
SELECT T1.Name, T2.Age FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T1.ID ORDER BY SUM(T2.Num_of_Ticket) DESC LIMIT 1
SELECT AVG(Num_of_Ticket) , MAX(Num_of_Ticket) FROM visit
SELECT SUM(T1.Total_spent) FROM visit AS T1 INNER JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1;
SELECT DISTINCT T2.Name FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID INNER JOIN museum AS T3 ON T1.Museum_ID = T3.Museum_ID WHERE STRFTIME('%Y', T3.Open_Year) < '2009' AND STRFTIME('%Y', T3.Open_Year) > '2011'
SELECT COUNT(*) FROM visitor v JOIN visit v2 ON v.ID = v2.visitor_ID WHERE v2.Museum_ID NOT IN (SELECT Museum_ID FROM museum WHERE Open_Year > '2010')
SELECT COUNT(*) FROM museum WHERE Open_Year LIKE '%2013%' OR Open_Year LIKE '%2008%'
SELECT COUNT(player_id) FROM players;
SELECT COUNT(player_id) FROM players
SELECT COUNT(*) FROM matches
SELECT COUNT(*) FROM matches
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT AVG(CASE WHEN winner_name = '' THEN loser_age ELSE winner_age END) AS average_age FROM matches
SELECT AVG(winner_age) AS average_winner_age, AVG(loser_age) AS average_loser_age FROM matches
SELECT AVG(winner_rank) FROM matches
SELECT AVG(winner_rank) FROM matches
SELECT MAX(loser_rank) FROM matches
SELECT MIN(loser_rank) FROM matches
SELECT COUNT(DISTINCT "country_code") FROM players;
SELECT DISTINCT country_code FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches WHERE loser_name != ''
SELECT COUNT(DISTINCT loser_name) FROM matches
SELECT tourney_name FROM matches GROUP BY tourney_id HAVING COUNT(tourney_id) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_id HAVING COUNT(match_num) > 10;
SELECT T1.winner_name FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.year IN (2013, 2016) GROUP BY T1.winner_name HAVING COUNT(T1.match_num) >= 2
SELECT T1.winner_name FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.year IN (2013, 2016) AND T2.player_id IN (SELECT winner_id FROM matches GROUP BY year HAVING COUNT(DISTINCT winner_id) AND year IN (2013, 2016))
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)
SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)
SELECT T1.country_code, T2.first_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name IN ('WTA Championships', 'Australian Open') AND T2.winner_name IS NOT NULL
SELECT T1.first_name, T2.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open' AND T2.surface = 'Hard' AND T2.winner_rank_points > 0 AND T2.tour_name = 'WTA Championships'
SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date
SELECT T2.first_name, T2.country_code FROM rankings AS T1 INNER JOIN players AS T2 ON T2.player_id = T1.player_id ORDER BY T1.tours DESC LIMIT 1;
SELECT T2.first_name, T2.country_code FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id WHERE T1.tours = ( SELECT MAX(tours) FROM rankings )
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.winner_name, T2.winner_rank_points FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id GROUP BY T2.player_id ORDER BY COUNT(T1.match_num) DESC LIMIT 1
SELECT winner_name, SUM(winner_rank_points) FROM matches GROUP BY winner_name ORDER BY SUM(winner_rank_points) DESC LIMIT 1
SELECT T1.winner_name FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = 'Australian Open' AND EXISTS ( SELECT 1 FROM matches AS T3 WHERE T3.winner_rank_points = ( SELECT MAX(winner_rank_points) FROM matches ) AND T3.tourney_name = 'Australian Open' )
SELECT T2.winner_name FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T1.tourney_name = 'Australian Open' AND T2.name IS NOT NULL GROUP BY T2.name ORDER BY SUM(T2.winner_rank_points) DESC LIMIT 1
SELECT T1.winner_name, T1.loser_name FROM matches AS T1 INNER JOIN players AS T2 ON T1.loser_id = T2.player_id ORDER BY T1.minutes DESC LIMIT 1
SELECT T2.winner_name, T1.loser_name FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id ORDER BY T1.minutes DESC LIMIT 1
SELECT AVG(r.ranking), p.first_name FROM rankings AS r JOIN players p ON r.player_id = p.player_id GROUP BY p.first_name
SELECT T1.first_name, AVG(T2.ranking) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id;
SELECT T2.ranking_points, T1.first_name FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name
SELECT T1.first_name, SUM(T2.ranking_points) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name
SELECT COUNT(country_code) , country_code FROM players GROUP BY country_code;
SELECT COUNT(*), country_code FROM players GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50
SELECT COUNT("ranking_date"), SUM("tours") FROM rankings GROUP BY "ranking_date"
SELECT COUNT(tours), ranking_date FROM rankings GROUP BY ranking_date
SELECT COUNT(*) , YEAR FROM matches GROUP BY YEAR;
SELECT COUNT(DISTINCT T1.year) FROM matches AS T1
SELECT T1.winner_name, T1.winner_rank FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T2.winner_rank IS NOT NULL AND T1.best_of > 0 ORDER BY T2.winner_rank LIMIT 3
SELECT T1.winner_name, T1.winner_rank FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T2.player_id IN ( SELECT winner_id FROM matches ORDER BY winner_age LIMIT 3 )
SELECT COUNT(DISTINCT winner_name) FROM matches WHERE loser_hand = 'L' AND winner_hand = 'L'
SELECT COUNT(*) FROM matches WHERE winner_hand = 'L' AND score = 'W'
SELECT T2.first_name, T2.country_code, T1.tourney_date FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id ORDER BY T1.winner_rank_points DESC LIMIT 1
SELECT T1.first_name, T2.country_code, T1.birth_date FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id GROUP BY T1.player_id ORDER BY SUM(T2.winner_rank_points) DESC LIMIT 1
SELECT COUNT(hand), hand FROM players GROUP BY hand
SELECT COUNT(hand) , hand FROM players GROUP BY hand
SELECT COUNT(id) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT name FROM ship ORDER BY LOWER(name) DESC
SELECT name, date, result FROM battle
SELECT MAX(killed) ,  MIN(killed) FROM death
SELECT AVG(injured) FROM death;
SELECT T1.note FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'
SELECT id, name FROM ( SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig' ) WHERE 1
SELECT b.id, b.name FROM battle b JOIN ( SELECT caused_by_ship_id, SUM(killed) AS total_killed FROM death GROUP BY caused_by_ship_id ) d ON b.id = d.caused_by_ship_id WHERE d.total_killed > 10;
SELECT T1.id, T2.name FROM ship AS T2 JOIN death AS T1 ON T2.id = T1.caused_by_ship_id WHERE injured = ( SELECT MAX(injured) FROM death );
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle WHERE result != ''
SELECT COUNT(*) FROM ship WHERE tonnage = '225' AND lost_in_battle IS NULL;
SELECT T1.name, T1.date FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name IN ('Lettice', 'HMS Atalanta') AND T1.date != ''
SELECT T1.name, COALESCE(T2.result, '') , T3.bulgarian_commander FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle INNER JOIN ( SELECT id FROM ship WHERE location = 'English Channel' AND disposition_of_ship != 'Lost' ) AS T3 ON T1.id = T3.id
SELECT note FROM death WHERE note LIKE '%East%'
SELECT line_1, line_2 FROM Addresses;
SELECT line_1, line_2 FROM Addresses LIMIT 1, 1;
SELECT COUNT(course_id) FROM Courses
SELECT COUNT(course_id) FROM Courses;
SELECT course_description FROM Courses WHERE course_name = 'math';
SELECT course_description FROM Courses WHERE course_name = 'math';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT T1.department_name, T1.department_id FROM Departments AS T1 INNER JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY COUNT(T2.degree_program_id) DESC LIMIT 1;
SELECT T1.department_name, T1.department_id FROM Departments AS T1 INNER JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(T2.degree_program_id) DESC LIMIT 1;
SELECT COUNT(degree_program_id) FROM Degree_Programs GROUP BY department_id;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs;
SELECT COUNT(degree_program_id) FROM Degree_Programs
SELECT degree_summary_name FROM Degree_Programs WHERE department_id IN ( SELECT department_id FROM Departments WHERE department_name = 'engineering' )
SELECT degree_summary_name FROM Degree_Programs WHERE department_id IN ( SELECT department_id FROM Departments WHERE department_name = 'engineering' );
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT T1.course_id, T1.course_name FROM Sections AS T1 INNER JOIN Courses AS T2 ON T1.course_id = T2.course_id WHERE T1.section_name IN (SELECT s.section_name FROM Sections s GROUP BY s.course_id HAVING COUNT(s.section_id) <= 2 AND s.course_id NOT IN ( SELECT c.course_id FROM Sections c GROUP BY c.course_id HAVING COUNT(c.section_id) > 2))
SELECT T1.course_name, T1.course_id FROM Courses AS T1 INNER JOIN Sections AS T2 ON T1.course_id = T2.course_id WHERE T2.section_id < 2
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT T1.semester_name, T1.semester_id FROM Semesters AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.semester_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1
SELECT T1.semester_name, T1.semester_id FROM Semesters AS T1 INNER JOIN ( SELECT semester_id, student_id, COUNT(*) as total_students FROM Student_Enrolment GROUP BY semester_id, student_id ORDER BY total_students DESC LIMIT 1 ) AS T2 ON T1.semester_id = T2.semester_id
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT T1.first_name, T1.middle_name, T1.last_name, T2.student_id FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE EXISTS ( SELECT 1 FROM Degree_Programs GROUP BY degree_program_id HAVING COUNT(DISTINCT T3.student_id) > 1 AND T3.degree_program_id IN (SELECT degree_program_id FROM Student_Enrolment))
SELECT T1.first_name, T1.middle_name, T1.last_name, SE.student_enrolment_id FROM Students AS T1 INNER JOIN Student_Enrolment AS SE ON T1.student_id = SE.student_id WHERE SE.degree_program_id IN (2, 10) AND SE.semester_id = 2
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor';
SELECT T2.first_name, T2.middle_name, T2.last_name FROM Student_Enrolment AS T1 INNER JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T1.degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelors')
SELECT T3.degree_summary_name FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id GROUP BY T3.degree_program_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 INNER JOIN ( SELECT T1.degree_summary_name, COUNT(T1.degree_program_id) AS num_students FROM Student_Enrolment AS T2 JOIN Degree_Programs AS T1 ON T2.degree_program_id = T1.degree_program_id GROUP BY T1.degree_summary_name ) AS T2 ON T1.degree_summary_name = T2.degree_summary_name WHERE T2.num_students = ( SELECT MAX(num_students) FROM ( SELECT T1.degree_summary_name, COUNT(T1.degree_program_id) AS num_students FROM Student_Enrolment AS T2 JOIN Degree_Programs AS T1 ON T2.degree_program_id = T1.degree_program_id GROUP BY T1.degree_summary_name ) )
SELECT dp.degree_summary_name, COUNT(se.student_id) FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1
SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 INNER JOIN ( SELECT degree_program_id, COUNT(*) as count FROM Student_Enrolment GROUP BY degree_program_id ) AS T2 ON T1.degree_program_id = T2.degree_program_id ORDER BY T2.count DESC LIMIT 1
SELECT T1.first_name, T1.middle_name, T1.last_name, COUNT(*) as num_enrollments, T2.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY num_enrollments DESC LIMIT 1
SELECT T1.first_name, T1.middle_name, T1.last_name, SE.student_enrolment_id, COUNT(SE.degree_program_id) FROM Students AS T1 INNER JOIN Student_Enrolment AS SE ON T1.student_id = SE.student_id GROUP BY SE.student_id ORDER BY COUNT(SE.degree_program_id) DESC LIMIT 1
SELECT T2.semester_name FROM Student_Enrolment AS T1 INNER JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id HAVING COUNT(T1.student_id) = 0
SELECT T1.semester_name FROM Semesters AS T1 LEFT JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.student_enrolment_id IS NULL
SELECT T1.course_name FROM Courses AS T1 INNER JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id
SELECT T1.course_name FROM Courses AS T1 INNER JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(*) > 0;
SELECT T1.course_name FROM Courses AS T1 INNER JOIN ( SELECT course_id, COUNT(*) as enrollment_count FROM Student_Enrolment_Courses GROUP BY course_id ORDER BY enrollment_count DESC LIMIT 1 ) AS T2 ON T1.course_id = T2.course_id
SELECT T2.course_name FROM Student_Enrolment_Courses AS T1 INNER JOIN Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY COUNT(T1.student_course_id) DESC LIMIT 1;
SELECT T2.last_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' AND NOT EXISTS ( SELECT 1 FROM Student_Enrolment WHERE student_id = T1.student_id )
SELECT T1.last_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' AND T1.student_id NOT IN ( SELECT student_id FROM Student_Enrolment )
SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 INNER JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(T2.student_course_id) >= 2
SELECT T1.transcript_date, T2.student_course_id FROM Transcripts AS T1 INNER JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T2.transcript_id HAVING COUNT(T2.student_course_id) >= 2
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;
SELECT DISTINCT first_name FROM Students WHERE permanent_address_id != current_address_id
SELECT T1.first_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id OR T1.permanent_address_id = T2.address_id WHERE T1.current_address_id != T1.permanent_address_id
SELECT T2.address_id, T2.line_1, T2.line_2, T2.line_3 FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id GROUP BY T2.address_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1
SELECT T2.address_id, T2.line_1, T2.line_2 FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id GROUP BY T1.current_address_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1
SELECT AVG(transcript_date) FROM Transcripts
SELECT AVG(transcript_date) FROM Transcripts;
SELECT transcript_date, other_details FROM Transcripts WHERE transcript_id = (SELECT MIN(transcript_id) FROM Transcripts);
SELECT MIN(transcript_date), other_details FROM Transcripts
SELECT COUNT(*) FROM Transcripts;
SELECT COUNT(*) FROM Transcripts
SELECT transcript_date FROM Transcripts WHERE other_details IS NULL ORDER BY transcript_date DESC LIMIT 1;
SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;
SELECT MAX(CASE WHEN T1.student_course_id = T2.student_course_id THEN 1 ELSE 0 END), T1.student_course_id FROM Student_Enrolment_Courses AS T1 INNER JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.student_course_id
SELECT MAX(T1.student_course_id), T2.enrollment_id FROM Transcript_Contents AS T1 INNER JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.student_course_id
SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 INNER JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY COUNT(T2.student_course_id) LIMIT 1
SELECT T.transcript_date, TC.transcript_id FROM Transcripts AS T JOIN Transcript_Contents AS TC ON T.transcript_id = TC.transcript_id GROUP BY TC.transcript_id ORDER BY COUNT(TC.student_course_id) LIMIT 1;
SELECT T3.semester_id FROM Degree_Programs AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id INNER JOIN Semesters AS T3 ON T2.semester_id = T3.semester_id WHERE T1.degree_summary_name IN ('Master', 'Bachelor') GROUP BY T2.semester_id HAVING COUNT(T2.student_enrolment_id) > 1
SELECT T2.semester_id FROM Degree_Programs AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T1.degree_summary_name IN ('Master', 'Bachelor') GROUP BY T2.semester_id HAVING COUNT(T1.degree_summary_name) > 1
SELECT COUNT(DISTINCT T1.current_address_id) FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id;
SELECT DISTINCT T1.address_id FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.current_address_id UNION SELECT DISTINCT T1.address_id FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id;
SELECT * FROM Students ORDER BY last_name, first_name DESC;
SELECT * FROM Students ORDER BY last_name DESC;
SELECT section_description FROM Sections WHERE section_id = (SELECT section_id FROM Sections WHERE course_id = 1)
SELECT section_description FROM Sections WHERE section_name = 'h'
SELECT T2.first_name FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.permanent_address_id WHERE T1.country = 'Haiti' OR T2.cell_mobile_number = '09700166582'
SELECT T2.first_name FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.current_address_id OR T1.address_id = T2.permanent_address_id WHERE T1.country = 'Haiti' OR T2.cell_mobile_number = '(097)00166582'
SELECT Title FROM Cartoon ORDER BY Title;
SELECT Title FROM Cartoon ORDER BY Title
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones"
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr"
SELECT COUNT(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date;
SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')
SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Country, COUNT(id) FROM TV_Channel GROUP BY Country ORDER BY COUNT(id) DESC LIMIT 1
SELECT COUNT(DISTINCT "series_name"), COUNT(DISTINCT "Content") FROM TV_Channel
SELECT COUNT(DISTINCT "series_name") FROM TV_Channel;
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio"
SELECT "Content" FROM TV_Channel WHERE "series_name" = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio"
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT COUNT(*) FROM TV_Channel WHERE Language = "English";
SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language ORDER BY COUNT(id) LIMIT 1
SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language ORDER BY COUNT(id) ASC LIMIT 1
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language
SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language
SELECT T1.series_name FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T2.Channel = T1.id WHERE T2.Title = 'The Rise of the Blue Beetle!'
SELECT T2.series_name FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.`Channel` = T2.id WHERE T1.`Title` = 'The Rise of the Blue Beetle'
SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio' AND T2.id IN ( SELECT id FROM TV_Channel );
SELECT T1.`Title` FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.`Channel` = T2.id WHERE T2.series_name = 'Sky Radio' AND T2.id IN ( SELECT id FROM TV_Channel )
SELECT Episode FROM TV_series ORDER BY Rating
SELECT Episode FROM TV_series ORDER BY Rating
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT Episode, Rating FROM TV_series ORDER BY Weekly_Rank DESC LIMIT 3;
SELECT MIN(Share) ,  MAX(Share) FROM TV_series
SELECT MAX(Share) , MIN(Share) FROM TV_series WHERE "Air_Date" LIKE '%September%'
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime"
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT T1.series_name FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'
SELECT T1.series_name FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'
SELECT T1.Episode FROM TV_series AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'
SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = "Sky Radio")
SELECT COUNT(Directed_by) FROM Cartoon GROUP BY Directed_by
SELECT Directed_by, COUNT(Directed_by) FROM Cartoon GROUP BY Directed_by
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes'
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes'
SELECT T2.Country FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Written_by = 'Todd Casey'
SELECT T2.Country FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T2.id = T1.Channel WHERE T1.Written_by = 'Todd Casey'
SELECT Country FROM TV_Channel WHERE id NOT IN ( SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey' )
SELECT Country FROM TV_Channel WHERE Content != 'cartoons' AND id IN ( SELECT id FROM Cartoon WHERE Written_by = 'Todd Casey' );
SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang') AND T2.Title IS NOT NULL
SELECT T1.series_name, T2.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by IN ('Ben Jones', 'Michael Chang') AND T1.Country IS NOT NULL;
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English'
SELECT id FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2
SELECT id FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2
SELECT TV_Channel.id FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.`Directed_by` != 'Ben Jones'
SELECT T2.id FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.`Directed_by` != 'Ben Jones'
SELECT Package_Option FROM TV_Channel WHERE id NOT IN ( SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones' )
SELECT T1.Package_Option FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.`Directed_by` != 'Ben Jones'
SELECT COUNT(Poker_Player_ID) FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT Earnings FROM poker_player ORDER BY Earnings DESC
SELECT Final_Table_Made, Best_Finish FROM poker_player
SELECT "Final_Table_Made", "Best_Finish" FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT MAX(Money_Rank) FROM poker_player WHERE Earnings = ( SELECT MAX(Earnings) FROM poker_player );
SELECT MAX(Money_Rank) FROM poker_player
SELECT MAX(T1."Final_Table_Made") FROM poker_player AS T1 INNER JOIN people AS T2 ON T1."People_ID" = T2."People_ID" WHERE T2."People_ID" IN ( SELECT "People_ID" FROM people WHERE Earnings < 200000 )
SELECT MAX(T1_Final_Table_Made) FROM poker_player AS T1JOIN ( SELECT Poker_Player_ID FROM poker_player WHERE Earnings < 200000 GROUP BY Poker_Player_ID HAVING SUM(Earnings) <= 200000 ) AS T2 ON T1.Poker_Player_ID = T2.Poker_Player_ID
SELECT Name FROM people WHERE People_ID IN ( SELECT People_ID FROM poker_player );
SELECT T1.Name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.People_ID IS NOT NULL
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000;
SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC
SELECT T1.Name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made ASC
SELECT T2.Birth_Date FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings LIMIT 1;
SELECT Birth_Date FROM people WHERE People_ID IN ( SELECT People_ID FROM poker_player ORDER BY Earnings LIMIT 1 )
SELECT MIN(p.Money_Rank) FROM poker_player p JOIN people pe ON p.People_ID = pe."People_ID" WHERE pe."Height" = ( SELECT MAX("Height") FROM people )
SELECT T2.Money_Rank FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1
SELECT AVG(Earnings) FROM poker_player WHERE People_ID IN ( SELECT People_ID FROM people WHERE Height > 200 )
SELECT AVG(Earnings) FROM poker_player WHERE People_ID IN (SELECT People_ID FROM people WHERE Height > 200)
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC
SELECT T1.Name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC
SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;
SELECT COUNT(Nationality), Nationality FROM people GROUP BY Nationality
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT "Nationality" FROM people GROUP BY "Nationality" ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2
SELECT "Nationality" FROM people GROUP BY "Nationality" HAVING COUNT(*) > 1
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT Name, Birth_Date FROM people ORDER BY Name
SELECT Name FROM people WHERE Nationality != 'Russia'
SELECT Name FROM people WHERE Nationality != 'Russia'
SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player )
SELECT Name FROM people WHERE People_ID NOT IN ( SELECT People_ID FROM poker_player );
SELECT COUNT(DISTINCT "Nationality") FROM people
SELECT COUNT(DISTINCT "Nationality") FROM people;
SELECT COUNT(state) FROM AREA_CODE_STATE
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC
SELECT vote_id ,  phone_number ,  state FROM VOTES;
SELECT MAX(area_code), MIN(area_code) FROM AREA_CODE_STATE
SELECT created FROM VOTES WHERE state = 'CA' ORDER BY created DESC LIMIT 1
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'
SELECT DISTINCT state, created FROM VOTES;
SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 INNER JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING COUNT(T1.contestant_number) > 1
SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN ( SELECT contestant_number FROM VOTES GROUP BY contestant_number ORDER BY COUNT(*) LIMIT 1 )
SELECT COUNT(*) FROM VOTES WHERE state IN ('NY', 'CA')
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN ( SELECT contestant_number FROM VOTES );
SELECT area_code FROM AREA_CODE_STATE WHERE state IN ( SELECT state FROM VOTES GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT T1.created, T1.state, T1.phone_number FROM VOTES AS T1 INNER JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling';
SELECT T1.area_code FROM AREA_CODE_STATE AS T1 JOIN VOTES AS T2 ON T1.area_code = T2.state JOIN CONTESTANTS AS T3 ON T2.contestant_number = T3.contestant_number WHERE T3.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss');
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'
SELECT Name FROM country WHERE IndepYear > (1950 + 1)
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT COUNT(GovernmentForm) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(DISTINCT `GovernmentForm`) FROM country WHERE `GovernmentForm` = 'Republic'
SELECT SUM(`SurfaceArea`) FROM `country` WHERE `Region` = 'Caribbean'
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
SELECT Continent FROM country WHERE Name = 'Anguilla';
SELECT Continent FROM country WHERE Name = 'Anguilla'
SELECT T2.Region FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Kabul'
SELECT Region FROM country WHERE Name = 'Afghanistan'
SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba' GROUP BY T2.Language ORDER BY T2.Percentage DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT `Region`, `Population` FROM `country` WHERE `Name` = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola'
SELECT AVG(`LifeExpectancy`) FROM `country` WHERE `Region` = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = "Africa" AND Region = "Central Africa";
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1;
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy LIMIT 1;
SELECT SUM(Population) ,  MAX(GNP) FROM country WHERE Continent = 'Asia'
SELECT Population FROM country WHERE Continent = 'Asia' ORDER BY GNP DESC LIMIT 1;
SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' AND governmentform = 'Republic';
SELECT AVG(`LifeExpectancy`) FROM country WHERE `GovernmentForm` = 'Republic' AND `Continent` = 'Africa';
SELECT SUM(T2.SurfaceArea) FROM country AS T1 INNER JOIN country AS T2 ON T1.Continent = T2.Continent WHERE T1.Continent IN ('Asia', 'Europe')
SELECT SUM(T2.SurfaceArea) FROM country AS T1 INNER JOIN country AS T2 ON T1.`Code` = T2.`Code` WHERE T1.Continent IN ('Asia', 'Europe')
SELECT COUNT(T1.Population) FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.District = 'Gelderland'
SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
SELECT AVG(GNP), SUM(Population) FROM country WHERE GovernmentForm = 'US territory'
SELECT AVG(GNP) ,  SUM(Population) FROM country WHERE Continent = 'North America'
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT Language) FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(T2.Language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Aruba';
SELECT COUNT(DISTINCT T1.Language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba';
SELECT COUNT(DISTINCT CASE WHEN `IsOfficial` = 'T' THEN `Language` END) FROM countrylanguage WHERE CountryCode = 'AFG';
SELECT COUNT(T2.IsOfficial) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Pashto' AND T1.Name = 'Afghanistan';
SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T1.Language ORDER BY COUNT(T1.Language) DESC LIMIT 1;
SELECT t1.Name FROM country AS t1 INNER JOIN countrylanguage AS t2 ON t1.Code = t2.CountryCode GROUP BY t2.CountryCode ORDER BY SUM(t2.Percentage) DESC LIMIT 1
SELECT T2.Continent FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Continent ORDER BY COUNT(T1.Language) DESC LIMIT 1;
SELECT T2.Continent FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Continent ORDER BY COUNT(T2.Code) DESC LIMIT 1;
SELECT COUNT(T1.Code) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Dutch' AND T2.IsOfficial = 'T';
SELECT COUNT(DISTINCT T1.Code) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'Dutch')
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T'
SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' AND T1.IsOfficial = 'T';
SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' AND T1.IsOfficial = 'T'
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'French') AND T2.IsOfficial = 'T'
SELECT COUNT(DISTINCT T1.Continent) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'
SELECT COUNT(DISTINCT T1.Continent) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'
SELECT T1.Region FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('English', 'Dutch') GROUP BY T1.Region
SELECT T1.Region FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ('Dutch', 'English') GROUP BY T1.Region
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' OR T2.IsOfficial = 'F';
SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial IN ('T', 'F') GROUP BY T2.Language
SELECT Language FROM countrylanguage WHERE CountryCode = 'AFG' ORDER BY Percentage DESC LIMIT 1;
SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT(T2.Language) DESC LIMIT 1
SELECT T1.GovernmentForm FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language IN ( SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = 1 )
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic' AND T2.IsOfficial = 'T' GROUP BY T2.Language HAVING COUNT(T2.CountryCode) = 1;
SELECT T1.Name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1;
SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE Language = 'English' ORDER BY T1.Population DESC LIMIT 1;
SELECT T1.Name, T1.Population, T1.SurfaceArea FROM country AS T1 JOIN country AS T2 ON T2.Code = ( SELECT Code FROM country WHERE SurfaceArea = ( SELECT MAX(SurfaceArea) FROM country ) AND Continent = 'Asia' )
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = "Asia" ORDER BY SurfaceArea DESC LIMIT 1;
SELECT AVG(c.LifeExpectancy) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.Code NOT IN ('ABW') AND (cl.Language = 'English' OR cl.Percentage < 1.0)
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' );
SELECT SUM(CASE WHEN T2.Percentage < 1 THEN T1.Population ELSE 0 END) FROM country AS T1 LEFT JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode
SELECT COUNT(DISTINCT T1.Code) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'English'
SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix'
SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = 'Beatrix'
SELECT COUNT(DISTINCT T1.Code) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' AND T1.IndepYear < 1930;
SELECT COUNT(DISTINCT T2.Language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear < 1930
SELECT DISTINCT T2.Name FROM country AS T1 JOIN country AS T2 ON T1.Code = T2.Code WHERE T1.SurfaceArea > ( SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe' );
SELECT Code FROM country WHERE SurfaceArea > ( SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe' )
SELECT Name FROM country WHERE Population < ( SELECT MIN(Population) FROM country WHERE Continent = 'Asia' ) AND Continent = 'Africa';
SELECT `Name` FROM country WHERE `Population` < ( SELECT MIN(`Population`) FROM country WHERE Continent = 'Asia' ) AND Continent = 'Africa';
SELECT Name FROM country WHERE Population > ( SELECT MAX(Population) FROM country WHERE Continent = 'Africa' ) AND Continent = 'Asia';
SELECT `Name` FROM `country` WHERE `Population` > ( SELECT MAX(`Population`) FROM `country` WHERE `Continent` = 'Africa' )
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English' AND IsOfficial = 'T';
SELECT CountryCode FROM countrylanguage WHERE Language != 'English'
SELECT T2.Code FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language != 'English'
SELECT CountryCode FROM countrylanguage WHERE Language != 'English'
UPDATE `countrylanguage` SET `IsOfficial` = 'F' WHERE `CountryCode` IN (SELECT Code FROM country WHERE GovernmentForm != 'Republic' AND (Language IS NULL OR Language <> 'English'));
SELECT Code FROM country WHERE GovernmentForm != 'Republic' AND Population > 0;
SELECT T1.Name FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code INNER JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T3.IsOfficial = 'F' AND T2.Continent = 'Europe'
SELECT city.* FROM city INNER JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial != 'F'
SELECT DISTINCT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' AND T2.Language = 'Chinese' AND T2.IsOfficial = 'T'
SELECT T1.Name FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code INNER JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T2.Continent = 'Asia' AND T3.IsOfficial = 'T' AND T3.Language = 'Chinese';
SELECT Name, MIN(IndepYear), SurfaceArea FROM country WHERE Population = ( SELECT MIN(Population) FROM country );
SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population LIMIT 1;
SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;
SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;
SELECT T2.Name, COUNT(T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code INNER JOIN ( SELECT Name FROM country GROUP BY Name HAVING COUNT(Name) >= 3 ) AS T3 ON T2.Name = T3.Name WHERE T2.Name IN ( SELECT Name FROM country GROUP BY Name HAVING COUNT(Name) >= 3 )
SELECT T2.Name, COUNT(T1.Language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Percentage > 2 GROUP BY T2.Name;
SELECT District, COUNT(DISTINCT CASE WHEN Population > ( SELECT AVG(Population) FROM city ) THEN ID END ) FROM city GROUP BY District
SELECT District, COUNT(ID) FROM city WHERE Population > ( SELECT AVG(Population) FROM city ) GROUP BY District;
SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm
SELECT Continent, AVG(LifeExpectancy) AS average_life_expectancy, SUM(Population) FROM country WHERE LifeExpectancy < 72 GROUP BY Continent;
SELECT T1.Continent, SUM(T2.Population), AVG(T2.LifeExpectancy) FROM country AS T1 INNER JOIN country AS T2 ON T1.Code = T2.Code WHERE T1.Continent IN ( SELECT Continent FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72 ORDER BY (SELECT 1))
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population LIMIT 3;
SELECT Name FROM country ORDER BY Population LIMIT 3;
SELECT COUNT(T1.Code) FROM country AS T1 INNER JOIN country AS T2 ON T1.`Continent` = T2.`Continent` WHERE T2.`Continent` = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT SUM(`Population`) ,  AVG(`SurfaceArea`) FROM `country` WHERE `Continent` = 'North America' AND `SurfaceArea` > 3000
SELECT Population, (SurfaceArea * 1.0) / 100000 FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT T1.Language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T1.Language ORDER BY COUNT(T1.CountryCode) DESC LIMIT 1;
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(CountryCode) DESC LIMIT 1;
SELECT T1.Code, T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode ORDER BY T2.Percentage DESC LIMIT 10;
SELECT T1.CountryCode, T1.Language FROM countrylanguage AS T1JOIN country AS T2 ON T1.CountryCode = T2.CodeGROUP BY T1.CountryCode ORDER BY T1.Percentage DESC
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' ORDER BY Percentage DESC LIMIT 1;
SELECT COUNT(DISTINCT CountryCode) FROM countrylanguage WHERE Language = 'Spanish';
SELECT `CountryCode` FROM `countrylanguage` WHERE `Language` = 'Spanish' ORDER BY `Percentage` DESC LIMIT 1;
SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish'
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name FROM conductor ORDER BY Age
SELECT Name FROM conductor WHERE Nationality != 'USA'
SELECT Name FROM conductor WHERE Nationality != 'USA'
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
SELECT AVG(Attendance) FROM show WHERE Result = 'T'
SELECT AVG("Attendance") FROM "show"
SELECT MAX(CAST(REPLACE(trim(REPLACE(Share, '%', ''), ' ', ''), '%' AS REAL)), MIN(CAST(REPLACE(trim(REPLACE(Share, '%', '') , ' ') '', '%' AS REAL)) FROM performance WHERE Type != 'Live final'
SELECT MAX(CAST(REPLACE(SUBSTR(Share, INSTR(Share, '%') + 1), '%', '') AS REAL)) , MIN(CAST(REPLACE(SUBSTR(Share, INSTR(Share, '%') + 1), '%', '') AS REAL)) FROM performance WHERE Type != 'Live final'
SELECT COUNT(DISTINCT "Nationality") FROM conductor
SELECT COUNT(DISTINCT "Nationality") FROM conductor
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT T1.Name, T2.Orchestra FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
SELECT T1.Name, T2.Orchestra FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(T1.Name) > 1;
SELECT Name FROM conductor WHERE Conductor_ID NOT IN ( SELECT Conductor_ID FROM orchestra GROUP BY Conductor_ID HAVING COUNT(Conductor_ID) > 1 )
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1;
SELECT T1.Name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008;
SELECT T1.Name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008
SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company
SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) DESC;
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(DISTINCT Orchestra_ID) DESC LIMIT 1;
SELECT T1.Record_Company FROM orchestra AS T1 JOIN ( SELECT Record_Company, COUNT(*) as num FROM orchestra GROUP BY Record_Company ) AS T2 ON T1.Record_Company = T2.Record_Company WHERE T2.num = ( SELECT MAX(num) FROM ( SELECT Record_Company, COUNT(*) as num FROM orchestra GROUP BY Record_Company ) );
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance );
SELECT T2.`Orchestra` FROM `performance` AS T1 INNER JOIN `orchestra` AS T2 ON T1.`Orchestra_ID` = T2.`Orchestra_ID` WHERE T1.`Performance_ID` IS NULL;
SELECT DISTINCT Record_Company FROM orchestra WHERE Year_of_Founded BETWEEN 2003 AND 2009
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 GROUP BY Record_Company INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded >= 2003
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';
SELECT DISTINCT T2.Year_of_Founded FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(T1.Performance_ID) > 1
SELECT T2.`Year_of_Founded` FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.`Year_of_Founded` HAVING COUNT(T1.Performance_ID) > 1
SELECT COUNT(*) FROM Highschooler WHERE grade = 9
SELECT COUNT(*) FROM Highschooler WHERE grade = 9;
SELECT name, grade FROM Highschooler WHERE grade = 9;
SELECT name, grade FROM Highschooler;
SELECT name FROM Highschooler WHERE grade = 9
SELECT grade FROM Highschooler
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10;
SELECT grade , COUNT(*) FROM Highschooler GROUP BY grade
SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4
SELECT T1.ID , COUNT(T2.friend_id) FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id
SELECT COUNT(friend_id) FROM Friend GROUP BY student_id;
SELECT T2.name , COUNT(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T1.student_id
SELECT T1.name, COUNT(*) AS num_friends FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id OR T1.ID = T2.friend_id GROUP BY T1.ID
SELECT T2.name FROM Friend AS T1 INNER JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T1.student_id ORDER BY COUNT(T1.friend_id) DESC LIMIT 1;
SELECT T2.name FROM Friend AS T1 INNER JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T1.student_id ORDER BY COUNT(T1.friend_id) DESC LIMIT 1;
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(T2.friend_id) >= 3
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T1.student_id HAVING COUNT(T1.friend_id) >= 3
SELECT T2.name FROM Friend AS T1 INNER JOIN Highschooler AS T2 ON T1.friend_id = T2.ID WHERE T1.student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT T2.name FROM Friend AS T1 INNER JOIN Highschooler AS T2 ON T1.friend_id = T2.ID WHERE T1.student_id = 1510;
SELECT COUNT(*) FROM Friend WHERE student_id = 1510;
SELECT COUNT(T1.student_id) FROM Friend AS T1 INNER JOIN Highschooler AS T2 ON T1.friend_id = T2.ID WHERE T1.student_id = 1510;
SELECT DISTINCT T2.id FROM Friend AS T1 INNER JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T1.friend_id IS NULL
SELECT DISTINCT student_id FROM Friend WHERE friend_id IS NULL
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T1.friend_id IS NULL;
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T1.student_id HAVING COUNT(T1.student_id) = 1;
SELECT T1.id FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.id = T2.student_id JOIN Likes AS T3 ON T3.liked_id = T2.friend_id WHERE T3.student_id != T2.student_id
SELECT student_id FROM Friend WHERE friend_id IN ( SELECT liked_id FROM Likes );
SELECT DISTINCT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Friend AS T3 ON T1.ID = T3.friend_id JOIN Likes AS T4 ON T1.ID = T4.student_id OR T1.ID = T4.liked_id
SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Likes AS T3 ON T1.ID = T3.student_id WHERE T2.friend_id IN ( SELECT liked_id FROM Likes ) AND T1.ID NOT IN ( SELECT student_id FROM Likes );
SELECT COUNT(student_id), student_id FROM Likes GROUP BY student_id
SELECT COUNT(*) , student_id FROM Likes GROUP BY student_id;
SELECT T1.name, COUNT(*) FROM Highschooler AS T1 INNER JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY student_id
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.liked_id GROUP BY T1.name ORDER BY COUNT(T2.student_id) DESC LIMIT 1;
SELECT T3.name FROM Likes AS T1 INNER JOIN Highschooler AS T2 ON T1.liked_id = T2.ID INNER JOIN Highschooler AS T3 ON T1.student_id = T3.ID GROUP BY T3.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING COUNT(T2.liked_id) >= 2
SELECT T1.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(T2.liked_id) >= 2
SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T1.friend_id IN (SELECT friend_id FROM Friend GROUP BY friend_id HAVING COUNT(student_id) >= 2) AND T2.grade > 5
SELECT T2.name FROM Friend AS T1 INNER JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T1.student_id HAVING COUNT(T1.friend_id) >= 2 AND T2.grade > 5
SELECT COUNT(*) FROM Likes WHERE student_id = 1689;
SELECT COUNT(*) FROM Likes WHERE liked_id = ( SELECT ID FROM Highschooler WHERE name = 'Kyle' )
SELECT AVG(H.ID) FROM Friend F JOIN Highschooler H ON F.student_id = H.ID WHERE student_id IN ( SELECT friend_id FROM Friend );
SELECT AVG(T2.grade) FROM Friend AS T1 INNER JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T1.friend_id IN ( SELECT T1.friend_id FROM Friend AS T1 INNER JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T1.friend_id HAVING COUNT(T1.friend_id) > 1 );
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend)
SELECT MIN(T2.grade) FROM Friend AS T1 INNER JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T1.friend_id IS NULL;
SELECT T2.state FROM Owners AS T1 INNER JOIN Professionals AS T2 ON T1.owner_id = T2.professional_id;
SELECT T1.state FROM Owners AS T1 INNER JOIN Professionals AS T2 ON T1.state = T2.state
SELECT AVG(T1.age) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id
SELECT AVG(T1.age) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.treatment_type_code IN ('WALK', 'VAC')
SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id, T1.last_name, T1.cell_number HAVING COUNT(T2.treatment_id) > 2
SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(T2.treatment_id) > 2
SELECT T1.name FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.cost_of_treatment < 1000
SELECT T2.name FROM Treatments AS T1 INNER JOIN Dogs AS T2 ON T1.dog_id = T2.dog_id WHERE T1.cost_of_treatment <= 1000
SELECT DISTINCT T2.first_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id WHERE T1.name NOT IN ( SELECT name FROM Dogs WHERE name LIKE '%dog%' ) AND (T2.first_name != 'Hipolito' OR T2.first_name != 'Mavis');
SELECT T2.first_name FROM Dogs AS T1 INNER JOIN Owners AS T2 ON T1.owner_id = T2.owner_id LEFT JOIN Professionals AS T3 ON T2.owner_id = T3.professional_id WHERE NOT EXISTS ( SELECT 1 FROM Dogs ) AND T1.name NOT LIKE '%dog%'
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments );
SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.treatment_id IS NULL;
SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY COUNT(T2.dog_id) DESC LIMIT 1;
SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id IN ( SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING COUNT(T.professional_id) >= 2
SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_id) > 1
SELECT T1.breed_name FROM Breeds AS T1 INNER JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.breed_code ORDER BY COUNT(T2.breed_code) DESC LIMIT 1;
SELECT T1.breed_name FROM Breeds AS T1 INNER JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.breed_code ORDER BY COUNT(T2.dog_id) DESC LIMIT 1
SELECT T1.last_name FROM Owners AS T1 INNER JOIN Treatments AS T2 ON T1.owner_id = T2.dog_id INNER JOIN Dogs AS T3 ON T3.owner_id = T1.owner_id GROUP BY T1.last_name ORDER BY COUNT(T2.treatment_id) DESC LIMIT 1
SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Treatments AS T2 ON T1.owner_id = T2.professional_id GROUP BY T1.owner_id ORDER BY SUM(T2.cost_of_treatment) DESC LIMIT 1;
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code IN ( SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code ORDER BY SUM(cost_of_treatment) LIMIT 1 )
SELECT t1.treatment_type_description FROM Treatment_Types AS t1 INNER JOIN Treatments AS t2 ON t1.treatment_type_code = t2.treatment_type_code WHERE t2.cost_of_treatment IS NOT NULL ORDER BY t2.cost_of_treatment LIMIT 1
SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id LEFT JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1
SELECT O.owner_id, O.zip_code FROM Owners O INNER JOIN ( SELECT T1.owner_id, SUM(T2.cost_of_treatment) AS total_cost FROM Treatments T2 INNER JOIN Dogs T1 ON T2.dog_id = T1.dog_id GROUP BY T1.owner_id ORDER BY total_cost DESC LIMIT 1 ) T3 ON O.owner_id = T3.owner_id
SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2
SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2
SELECT T1.first_name, T1.last_name FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM Treatments );
SELECT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING AVG(T2.cost_of_treatment) < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT T1.`date_of_treatment`, P.first_name FROM Treatments T1 INNER JOIN Professionals P ON T1.professional_id = P.professional_id
SELECT T1.`date_of_treatment`, T2.first_name FROM Treatments AS T1 INNER JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id
SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 INNER JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code
SELECT cost_of_treatment, treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code
SELECT T1.first_name, T1.last_name, T2.size_code FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
SELECT T1.first_name, T1.last_name, T2.size_code FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.size_code IN ('LGE')
SELECT T1.first_name, T2.name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
SELECT T1.first_name, T2.name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id
SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id ORDER BY T1.breed_code DESC LIMIT 1
SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.name, T2.date_of_treatment ORDER BY COUNT(T2.treatment_type_code) ASC
SELECT T2.first_name, T1.name FROM Dogs AS T1 INNER JOIN Owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.state = 'Virginia'
SELECT T2.first_name, T1.name FROM Dogs AS T1 INNER JOIN Owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.state = 'Virginia'
SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.treatment_type_code IN ('WALK', 'VAC')
SELECT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.treatment_type_code != 'ADOT'
SELECT T2.last_name FROM Dogs AS T1 INNER JOIN Owners AS T2 ON T1.owner_id = T2.owner_id ORDER BY T1.age LIMIT 1
SELECT T1.last_name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age LIMIT 1
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin')
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1
SELECT date_arrived ,  date_departed FROM Dogs
SELECT COUNT(treatment_id) FROM Treatments;
SELECT COUNT(treatment_id) FROM Treatments WHERE treatment_type_code = 'WALK'
SELECT COUNT(*) FROM Treatments WHERE dog_id IN ( SELECT dog_id FROM Dogs );
SELECT COUNT(DISTINCT professional_id) FROM Treatments WHERE treatment_type_code IN ('WALK')
SELECT T1.role_code, T1.street, T2.city, T2.state FROM Professionals AS T1 INNER JOIN ( SELECT city FROM Professionals WHERE city LIKE '%West%' ) AS T2 ON T1.city = T2.city AND T2.city IS NOT NULL
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 INNER JOIN ( SELECT state FROM Owners WHERE state LIKE '%North%' ) AS T2 ON T1.state = T2.state
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) FROM Dogs WHERE age < ( SELECT AVG(age) FROM Dogs );
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
SELECT COUNT(*) FROM Dogs d LEFT JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.treatment_id IS NULL
SELECT COUNT(DISTINCT owner_id) FROM Dogs WHERE abandoned_yn = 1
SELECT COUNT(owner_id) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs );
SELECT COUNT(treatment_id) FROM Treatments WHERE professional_id NOT IN (SELECT professional_id FROM Professionals)
SELECT COUNT(professional_id) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments );
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1'
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1'
SELECT AVG(age) FROM Dogs;
SELECT AVG(age) FROM Dogs;
SELECT MAX(age) FROM Dogs;
SELECT MAX(age) FROM Dogs;
SELECT charge_type , charge_amount FROM Charges
SELECT charge_type , charge_amount FROM Charges
SELECT charge_amount FROM Charges WHERE charge_type = ( SELECT charge_type FROM Charges ORDER BY charge_amount DESC LIMIT 1 )
SELECT MAX(charge_amount) , charge_type FROM Charges GROUP BY charge_type ORDER BY charge_amount DESC LIMIT 1
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT breed_code, size_code FROM Dogs GROUP BY breed_code, size_code
SELECT DISTINCT breed_code , size_code FROM Dogs
SELECT T.first_name ,  TT.treatment_type_description FROM Treatments T JOIN Professionals P ON T.professional_id = P.professional_id JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code WHERE T.professional_id IN ( SELECT professional_id FROM Professionals ) AND TT.treatment_type_description IS NOT NULL
SELECT P.first_name, TT.treatment_type_description FROM Treatments T JOIN Professionals P ON T.professional_id = P.professional_id JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code WHERE T.professional_id IN ( SELECT professional_id FROM Professionals )
SELECT COUNT(*) FROM singer
SELECT COUNT(*) FROM singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Birth_Year, Citizenship FROM singer
SELECT Citizenship, Birth_Year FROM singer
SELECT Name FROM singer WHERE Citizenship != 'France';
SELECT Name FROM singer WHERE Citizenship != 'France'
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)
SELECT Name FROM singer WHERE Net_Worth_Millions = ( SELECT MAX(Net_Worth_Millions) FROM singer )
SELECT Name FROM singer WHERE Net_Worth_Millions = ( SELECT MAX (Net_Worth_Millions) FROM singer )
SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship
SELECT Citizenship, COUNT(Singer_ID) FROM singer GROUP BY Citizenship
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(Citizenship) DESC LIMIT 1
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(Citizenship) DESC LIMIT 1
SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship
SELECT MAX("Net_Worth_Millions") FROM singer WHERE "Citizenship" = 'France'
SELECT T2.Title, T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID
SELECT T2.Title, T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID
SELECT DISTINCT T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Sales > 300000;
SELECT DISTINCT T2.Name FROM song AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN ( SELECT Singer_ID FROM song WHERE Sales > 300000 ) AS T3 ON T1.Singer_ID = T3.Singer_ID
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(T1.Singer_ID) > 1
SELECT T2.Name FROM song AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID HAVING COUNT(Song_ID) > 1
SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name;
SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT T2.Name FROM song AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Singer_ID NOT IN (SELECT Singer_ID FROM singer)
SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1955 AND Birth_Year > 1944
SELECT Citizenship FROM singer WHERE Birth_Year BETWEEN 1955 AND 1944
SELECT COUNT(feature_id) FROM Other_Available_Features;
SELECT T2.feature_type_name FROM Other_Available_Features AS T1 INNER JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_id = 2
SELECT T2.property_type_description FROM Properties AS T1 INNER JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code WHERE T1.property_type_code IN ('House', 'Other')
SELECT DISTINCT property_name FROM Properties WHERE property_type_code IN ('House', 'Apartment') AND room_count > 1;